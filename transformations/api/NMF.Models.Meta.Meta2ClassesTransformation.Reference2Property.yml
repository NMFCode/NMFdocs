### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  commentId: T:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  id: Meta2ClassesTransformation.Reference2Property
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag(System.CodeDom.CodeTypeReference,System.Boolean)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList(System.CodeDom.CodeTypeReference,System.Boolean)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet(System.CodeDom.CodeTypeReference,System.Boolean)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet(System.CodeDom.CodeTypeReference,System.Boolean)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.CodeDom.CodeExpression,NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies
  - NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  langs:
  - csharp
  - vb
  name: Meta2ClassesTransformation.Reference2Property
  nameWithType: Meta2ClassesTransformation.Reference2Property
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  type: Class
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Reference2Property
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 25
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nThe transformation rule to transform a reference to a code property\n"
  example: []
  syntax:
    content: 'public class Reference2Property : TransformationRule<IReference, CodeMemberProperty>'
    content.vb: >-
      Public Class Reference2Property
          Inherits TransformationRule(Of IReference, CodeMemberProperty)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  inheritedMembers:
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.NeedDependenciesForOutputCreation
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Predicate{NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput2}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.OutputType
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},NMF.Transformations.Core.Computation)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},NMF.Transformations.Core.Computation)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TKey}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TKey}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Rule``1
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``1
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.InputType
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.TraceInput``1(System.Func{NMF.Models.Meta.IReference,{TKey}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IReference,{TKey}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IReference},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IReference},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.ToString
  - NMF.Transformations.Core.GeneralTransformationRule.OutputType
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies
  id: RegisterDependencies
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: RegisterDependencies()
  nameWithType: Meta2ClassesTransformation.Reference2Property.RegisterDependencies()
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies()
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterDependencies
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 30
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nRegisters the dependencies, i.e. transform the reference type and refined references\n"
  example: []
  syntax:
    content: public override void RegisterDependencies()
    content.vb: Public Overrides Sub RegisterDependencies
  overridden: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  id: CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateOutput(IReference, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateOutput(IReference, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput(NMF.Models.Meta.IReference, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOutput
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 43
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  example: []
  syntax:
    content: public override CodeMemberProperty CreateOutput(IReference input, ITransformationContext context)
    parameters:
    - id: input
      type: NMF.Models.Meta.IReference
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
    return:
      type: System.CodeDom.CodeMemberProperty
    content.vb: Public Overrides Function CreateOutput(input As IReference, context As ITransformationContext) As CodeMemberProperty
  overridden: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  id: Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: Transform(IReference, CodeMemberProperty, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.Reference2Property.Transform(IReference, CodeMemberProperty, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform(NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 88
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nInitializes the generated property\n"
  example: []
  syntax:
    content: public override void Transform(IReference input, CodeMemberProperty generatedProperty, ITransformationContext context)
    parameters:
    - id: input
      type: NMF.Models.Meta.IReference
      description: The NMeta reference
    - id: generatedProperty
      type: System.CodeDom.CodeMemberProperty
      description: The generated property
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context
    content.vb: Public Overrides Sub Transform(input As IReference, generatedProperty As CodeMemberProperty, context As ITransformationContext)
  overridden: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.CodeDom.CodeExpression,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.CodeDom.CodeExpression,NMF.Transformations.Core.ITransformationContext)
  id: GenerateSetStatement(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.CodeDom.CodeExpression,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: GenerateSetStatement(IReference, CodeMemberProperty, CodeExpression, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.Reference2Property.GenerateSetStatement(IReference, CodeMemberProperty, CodeExpression, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement(NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.CodeDom.CodeExpression, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GenerateSetStatement
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 376
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGenerates the set statements of a normal reference\n"
  remarks: Normal means in this case that the reference is not an overridden container reference
  example: []
  syntax:
    content: protected virtual void GenerateSetStatement(IReference property, CodeMemberProperty codeProperty, CodeExpression fieldReference, ITransformationContext context)
    parameters:
    - id: property
      type: NMF.Models.Meta.IReference
      description: The NMeta reference
    - id: codeProperty
      type: System.CodeDom.CodeMemberProperty
      description: The generated code property
    - id: fieldReference
      type: System.CodeDom.CodeExpression
      description: A reference to the backening field
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the reference is generated
    content.vb: Protected Overridable Sub GenerateSetStatement(property As IReference, codeProperty As CodeMemberProperty, fieldReference As CodeExpression, context As ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag(System.CodeDom.CodeTypeReference,System.Boolean)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag(System.CodeDom.CodeTypeReference,System.Boolean)
  id: CreateBag(System.CodeDom.CodeTypeReference,System.Boolean)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateBag(CodeTypeReference, Boolean)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateBag(CodeTypeReference, Boolean)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag(System.CodeDom.CodeTypeReference, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateBag
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 627
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the type reference for a bag with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateBag(CodeTypeReference elementTypeReference, bool isContainment)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    - id: isContainment
      type: System.Boolean
      description: Indicates whether the reference is a containment
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code reference to the class that implements the collection
    content.vb: Protected Overridable Function CreateBag(elementTypeReference As CodeTypeReference, isContainment As Boolean) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList(System.CodeDom.CodeTypeReference,System.Boolean)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList(System.CodeDom.CodeTypeReference,System.Boolean)
  id: CreateList(System.CodeDom.CodeTypeReference,System.Boolean)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateList(CodeTypeReference, Boolean)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateList(CodeTypeReference, Boolean)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList(System.CodeDom.CodeTypeReference, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateList
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 645
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the type reference for a list with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateList(CodeTypeReference elementTypeReference, bool isContainment)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    - id: isContainment
      type: System.Boolean
      description: Indicates whether the reference is a containment
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code reference to the class that implements the collection
    content.vb: Protected Overridable Function CreateList(elementTypeReference As CodeTypeReference, isContainment As Boolean) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet(System.CodeDom.CodeTypeReference,System.Boolean)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet(System.CodeDom.CodeTypeReference,System.Boolean)
  id: CreateSet(System.CodeDom.CodeTypeReference,System.Boolean)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateSet(CodeTypeReference, Boolean)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateSet(CodeTypeReference, Boolean)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet(System.CodeDom.CodeTypeReference, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSet
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 663
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the type reference for an unordered set with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateSet(CodeTypeReference elementTypeReference, bool isContainment)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    - id: isContainment
      type: System.Boolean
      description: Indicates whether the reference is a containment
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code type reference to the class that implements the collection
    content.vb: Protected Overridable Function CreateSet(elementTypeReference As CodeTypeReference, isContainment As Boolean) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet(System.CodeDom.CodeTypeReference,System.Boolean)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet(System.CodeDom.CodeTypeReference,System.Boolean)
  id: CreateOrderedSet(System.CodeDom.CodeTypeReference,System.Boolean)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateOrderedSet(CodeTypeReference, Boolean)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateOrderedSet(CodeTypeReference, Boolean)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet(System.CodeDom.CodeTypeReference, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOrderedSet
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 681
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the type reference for an ordered set with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateOrderedSet(CodeTypeReference elementTypeReference, bool isContainment)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    - id: isContainment
      type: System.Boolean
      description: Indicates whether the reference is a containment
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code type reference to the class that implements the collection
    content.vb: Protected Overridable Function CreateOrderedSet(elementTypeReference As CodeTypeReference, isContainment As Boolean) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateListInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateListInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 725
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the interface type for a list with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateListInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code type reference that represents a list with the given elements
    content.vb: Protected Overridable Function CreateListInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateSetInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSetInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 735
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the interface type for an unordered set with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateSetInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code type reference that represents an unordered set with the given elements
    content.vb: Protected Overridable Function CreateSetInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateOrderedSetInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOrderedSetInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 745
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the interface type for an ordered set with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateOrderedSetInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element tye reference
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code type reference that represents an ordered set
    content.vb: Protected Overridable Function CreateOrderedSetInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property
  langs:
  - csharp
  - vb
  name: CreateBagInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateBagInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Reference2Property.cs
    startLine: 755
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the interface type for a bag with the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateBagInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: ''
    return:
      type: System.CodeDom.CodeTypeReference
      description: ''
    content.vb: Protected Overridable Function CreateBagInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  commentId: T:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<IReference>
  nameWithType: GeneralTransformationRule<IReference>
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>
  nameWithType.vb: GeneralTransformationRule(Of IReference)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference)
  name.vb: GeneralTransformationRule(Of IReference)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  commentId: T:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<IReference, CodeMemberProperty>
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty)
  name.vb: TransformationRuleBase(Of IReference, CodeMemberProperty)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  commentId: T:NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRule`2
  name: TransformationRule<IReference, CodeMemberProperty>
  nameWithType: TransformationRule<IReference, CodeMemberProperty>
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>
  nameWithType.vb: TransformationRule(Of IReference, CodeMemberProperty)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty)
  name.vb: TransformationRule(Of IReference, CodeMemberProperty)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: TransformationRule<IReference, CodeMemberProperty>.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of IReference, CodeMemberProperty).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule<IReference, CodeMemberProperty>.CreateComputation
    fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule(Of IReference, CodeMemberProperty).CreateComputation
    fullName: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(IReference, ITransformationContext)
  nameWithType: TransformationRule<IReference, CodeMemberProperty>.CreateOutput(IReference, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CreateOutput(NMF.Models.Meta.IReference, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IReference, CodeMemberProperty).CreateOutput(IReference, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CreateOutput(NMF.Models.Meta.IReference, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule<IReference, CodeMemberProperty>.CreateOutput
    fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule(Of IReference, CodeMemberProperty).CreateOutput
    fullName: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<IReference, CodeMemberProperty>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of IReference, CodeMemberProperty).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: Transform(IReference, CodeMemberProperty, ITransformationContext)
  nameWithType: TransformationRule<IReference, CodeMemberProperty>.Transform(IReference, CodeMemberProperty, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Transform(NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IReference, CodeMemberProperty).Transform(IReference, CodeMemberProperty, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Transform(NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule<IReference, CodeMemberProperty>.Transform
    fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule(Of IReference, CodeMemberProperty).Transform
    fullName: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor<TBaseIn, TBaseOut>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<IReference>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<IReference>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>(System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of IReference))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor<TBaseIn, TBaseOut>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Predicate{NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Predicate<NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Predicate(Of NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IReference, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, TRequiredInput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, TRequiredInput>, Func<IReference, CodeMemberProperty, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, TRequiredInput>, Func<IReference, CodeMemberProperty, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, TRequiredInput), Func(Of IReference, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, TRequiredInput), Func(Of IReference, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput2}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, TRequiredInput1>, Func<IReference, CodeMemberProperty, TRequiredInput2>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, TRequiredInput1>, Func<IReference, CodeMemberProperty, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, TRequiredInput1), Func(Of IReference, CodeMemberProperty, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, TRequiredInput1), Func(Of IReference, CodeMemberProperty, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, TRequiredInput1>, Func<IReference, CodeMemberProperty, TRequiredInput2>, Func<IReference, CodeMemberProperty, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, TRequiredInput1>, Func<IReference, CodeMemberProperty, TRequiredInput2>, Func<IReference, CodeMemberProperty, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, TRequiredInput1), Func(Of IReference, CodeMemberProperty, TRequiredInput2), Func(Of IReference, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, TRequiredInput1), Func(Of IReference, CodeMemberProperty, TRequiredInput2), Func(Of IReference, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  name: CallOutputSensitive(GeneralTransformationRule<IReference, CodeMemberProperty>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive(GeneralTransformationRule<IReference, CodeMemberProperty>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(GeneralTransformationRule(Of IReference, CodeMemberProperty))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of IReference, CodeMemberProperty))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive(GeneralTransformationRule<IReference, CodeMemberProperty>, Func<IReference, CodeMemberProperty, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive(GeneralTransformationRule<IReference, CodeMemberProperty>, Func<IReference, CodeMemberProperty, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive(GeneralTransformationRule(Of IReference, CodeMemberProperty), Func(Of IReference, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of IReference, CodeMemberProperty), Func(Of IReference, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, IEnumerable<TRequiredInput>>, Func<IReference, CodeMemberProperty, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, CodeMemberProperty, IEnumerable<TRequiredInput>>, Func<IReference, CodeMemberProperty, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Func(Of IReference, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Func(Of IReference, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IReference, CodeMemberProperty, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IReference, CodeMemberProperty, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IReference, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IReference, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.OutputType
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.OutputType
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).OutputType
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  name: SelectArrays<TRequiredInput1, TRequiredInput2>(Func<IReference, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.SelectArrays<TRequiredInput1, TRequiredInput2>(Func<IReference, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.SelectArrays<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).SelectArrays(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.SelectArrays<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.SelectArrays<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).SelectArrays(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).SelectArrays(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  name: SelectArrays<TRequiredInput>(Func<IReference, CodeMemberProperty, IEnumerable<TRequiredInput>>, Computation)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.SelectArrays<TRequiredInput>(Func<IReference, CodeMemberProperty, IEnumerable<TRequiredInput>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.SelectArrays<TRequiredInput>(System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredInput>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).SelectArrays(Of TRequiredInput)(Func(Of IReference, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).SelectArrays(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredInput)), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput)(Func(Of IReference, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays<TRequiredInput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.SelectArrays<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.SelectArrays<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).SelectArrays(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).SelectArrays(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  name: TraceOutput<TKey>(Func<IReference, CodeMemberProperty, TKey>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceOutput<TKey>(Func<IReference, CodeMemberProperty, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceOutput<TKey>(System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceOutput(Of TKey)(Func(Of IReference, CodeMemberProperty, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceOutput(Of TKey)(System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of IReference, CodeMemberProperty, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, CodeMemberProperty>, Func<IReference, CodeMemberProperty, TKey>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceOutput<TKey>(TraceEntryGroup<TKey, CodeMemberProperty>, Func<IReference, CodeMemberProperty, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, System.CodeDom.CodeMemberProperty>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeMemberProperty), Func(Of IReference, CodeMemberProperty, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, System.CodeDom.CodeMemberProperty), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeMemberProperty), Func(Of IReference, CodeMemberProperty, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IReference, CodeMemberProperty, TTraceInput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IReference, CodeMemberProperty, TTraceInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceInput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IReference, CodeMemberProperty, TTraceInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceInput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IReference, CodeMemberProperty, TTraceInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IReference, CodeMemberProperty, TTraceOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IReference, CodeMemberProperty, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IReference, CodeMemberProperty, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IReference, CodeMemberProperty, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceInput}},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IReference,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IReference, CodeMemberProperty, TTraceInput>, Func<IReference, CodeMemberProperty, TTraceOutput>)
  nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IReference, CodeMemberProperty, TTraceInput>, Func<IReference, CodeMemberProperty, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceInput>, System.Func<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IReference, CodeMemberProperty, TTraceInput), Func(Of IReference, CodeMemberProperty, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceInput), System.Func(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IReference, CodeMemberProperty, TTraceInput), Func(Of IReference, CodeMemberProperty, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<IReference, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of IReference, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IReference, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    nameWithType: CodeMemberProperty
    fullName: System.CodeDom.CodeMemberProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule<IReference>.MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule(Of IReference).MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Rule``1
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<IReference>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of IReference).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule<TRule>
    nameWithType: GeneralTransformationRule<IReference>.Rule<TRule>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule(Of TRule)
    nameWithType: GeneralTransformationRule(Of IReference).Rule(Of TRule)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.WithPattern(ITransformationRulePattern<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.WithPattern(NMF.Transformations.ITransformationRulePattern<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).WithPattern(ITransformationRulePattern(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).WithPattern(NMF.Transformations.ITransformationRulePattern(Of NMF.Models.Meta.IReference))
  name.vb: WithPattern(ITransformationRulePattern(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
    nameWithType: GeneralTransformationRule<IReference>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of IReference).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.WithPattern(Func<ITransformationContext, INotifyEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<IReference>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of IReference).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.WithPattern(Func<ITransformationContext, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).WithPattern(Func(Of ITransformationContext, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<IReference>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of IReference).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``1
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<IReference>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  name: RequireByType<TRequiredInput>(Func<IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.RequireByType<TRequiredInput>(Func<IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireByType<TRequiredInput>(System.Func<NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireByType(Of TRequiredInput)(Func(Of IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IReference>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireManyByType<TRequiredInput>(Func<IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IReference>.RequireManyByType<TRequiredInput>(Func<IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireManyByType(Of TRequiredInput)(Func(Of IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.RequireManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).RequireManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IReference>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.RequireManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Require(GeneralTransformationRule, Func<IReference, Object[]>)
  nameWithType: GeneralTransformationRule<IReference>.Require(GeneralTransformationRule, Func<IReference, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IReference, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Require(GeneralTransformationRule, Func(Of IReference, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IReference, System.Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of IReference, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule<IReference>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule(Of IReference).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,``0},System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>, Predicate<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>, Predicate<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput>, System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput), Predicate(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput), System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput), Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1},System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Predicate<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Predicate<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>, System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Predicate(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2), System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: RequireMany(GeneralTransformationRule, Func<IReference, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<IReference>.RequireMany(GeneralTransformationRule, Func<IReference, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireMany(GeneralTransformationRule, Func(Of IReference, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of IReference, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule<IReference>.RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule(Of IReference).RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IReference>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.RequireMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).RequireMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IReference>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.RequireMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.RequireMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).RequireMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).RequireMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Call(GeneralTransformationRule, Func<IReference, Object[]>)
  nameWithType: GeneralTransformationRule<IReference>.Call(GeneralTransformationRule, Func<IReference, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IReference, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Call(GeneralTransformationRule, Func(Of IReference, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IReference, System.Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of IReference, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule<IReference>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule(Of IReference).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: CallMany(GeneralTransformationRule, Func<IReference, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<IReference>.CallMany(GeneralTransformationRule, Func<IReference, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallMany(GeneralTransformationRule, Func(Of IReference, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of IReference, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule<IReference>.CallMany
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule(Of IReference).CallMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  name: CallByType<TRequiredInput>(Func<IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.CallByType<TRequiredInput>(Func<IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallByType<TRequiredInput>(System.Func<NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallByType(Of TRequiredInput)(Func(Of IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IReference>.CallByType<TRequiredInput1, TRequiredInput2>(Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,``0},System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>, Predicate<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, TRequiredInput>, Predicate<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, TRequiredInput>, System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput), Predicate(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput), System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, TRequiredInput), Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IReference,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IReference,``1},System.Predicate{NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Predicate<IReference>)
  nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, TRequiredInput1>, Func<IReference, TRequiredInput2>, Predicate<IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IReference, TRequiredInput2>, System.Predicate<NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Predicate(Of IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IReference, TRequiredInput2), System.Predicate(Of NMF.Models.Meta.IReference))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, TRequiredInput1), Func(Of IReference, TRequiredInput2), Predicate(Of IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyByType<TRequiredInput>(Func<IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IReference>.CallManyByType<TRequiredInput>(Func<IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallManyByType(Of TRequiredInput)(Func(Of IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IReference>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IReference>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IReference>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.InputType
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<IReference>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.InputType
  nameWithType.vb: GeneralTransformationRule(Of IReference).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).InputType
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>(Func<TRequiredInput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IReference},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IReference>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>(Func<TRequiredInput, IReference>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IReference), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IReference), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IReference},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IReference>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IReference>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IReference), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IReference), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IReference>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IReference)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IReference>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IReference)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.TraceInput``1(System.Func{NMF.Models.Meta.IReference,{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.TraceInput``1(System.Func{NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  name: TraceInput<TKey>(Func<IReference, TKey>)
  nameWithType: GeneralTransformationRule<IReference>.TraceInput<TKey>(Func<IReference, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.TraceInput<TKey>(System.Func<NMF.Models.Meta.IReference, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).TraceInput(Of TKey)(Func(Of IReference, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).TraceInput(Of TKey)(System.Func(Of NMF.Models.Meta.IReference, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of IReference, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput<TKey>
    nameWithType: GeneralTransformationRule<IReference>.TraceInput<TKey>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.TraceInput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput(Of TKey)
    nameWithType: GeneralTransformationRule(Of IReference).TraceInput(Of TKey)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).TraceInput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IReference,{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  name: TraceInput<TKey>(TraceEntryGroup<TKey, IReference>, Func<IReference, TKey>)
  nameWithType: GeneralTransformationRule<IReference>.TraceInput<TKey>(TraceEntryGroup<TKey, IReference>, Func<IReference, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, NMF.Models.Meta.IReference>, System.Func<NMF.Models.Meta.IReference, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of IReference).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, IReference), Func(Of IReference, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, NMF.Models.Meta.IReference), System.Func(Of NMF.Models.Meta.IReference, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, IReference), Func(Of IReference, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput<TKey>
    nameWithType: GeneralTransformationRule<IReference>.TraceInput<TKey>
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.TraceInput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput(Of TKey)
    nameWithType: GeneralTransformationRule(Of IReference).TraceInput(Of TKey)
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).TraceInput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IReference},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IReference},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, IReference>, Boolean)
  nameWithType: GeneralTransformationRule<IReference>.CallFor(GeneralTransformationRule, Func<Computation, IReference>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, NMF.Models.Meta.IReference>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(GeneralTransformationRule, Func(Of Computation, IReference), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, NMF.Models.Meta.IReference), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, IReference), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<IReference>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of IReference).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IReference},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IReference},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, IReference>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<IReference>.CallFor(GeneralTransformationRule, Func<Computation, IReference>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, NMF.Models.Meta.IReference>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallFor(GeneralTransformationRule, Func(Of Computation, IReference), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, NMF.Models.Meta.IReference), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, IReference), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<IReference>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of IReference).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IReference>>, Boolean)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IReference>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IReference)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IReference)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<IReference>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IReference>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<IReference>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IReference>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of IReference).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IReference)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IReference)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<IReference>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of IReference).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}.ToString
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<IReference>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of IReference).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
    nameWithType: GeneralTransformationRule<IReference>.ToString
    fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IReference>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
    nameWithType: GeneralTransformationRule(Of IReference).ToString
    fullName: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IReference).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`2
  commentId: T:NMF.Transformations.TransformationRule`2
  name: TransformationRule<TIn, TOut>
  nameWithType: TransformationRule<TIn, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>
  nameWithType.vb: TransformationRule(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut)
  name.vb: TransformationRule(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  isExternal: true
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: TransformationRule<TIn, TOut>.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule<TIn, TOut>.CreateComputation
    fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule(Of TIn, TOut).CreateComputation
    fullName: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(TIn, ITransformationContext)
  nameWithType: TransformationRule<TIn, TOut>.CreateOutput(TIn, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateOutput(TIn, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).CreateOutput(TIn, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateOutput(TIn, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule<TIn, TOut>.CreateOutput
    fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule(Of TIn, TOut).CreateOutput
    fullName: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<TIn, TOut>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of TIn, TOut).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: Transform(TIn, TOut, ITransformationContext)
  nameWithType: TransformationRule<TIn, TOut>.Transform(TIn, TOut, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.Transform(TIn, TOut, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).Transform(TIn, TOut, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).Transform(TIn, TOut, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule<TIn, TOut>.Transform
    fullName: NMF.Transformations.TransformationRule<TIn, TOut>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule(Of TIn, TOut).Transform
    fullName: NMF.Transformations.TransformationRule(Of TIn, TOut).Transform
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  commentId: M:NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor<TBaseIn, TBaseOut>
    nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    nameWithType: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  isExternal: true
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<TIn>)
  nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<TIn>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>(System.Predicate<TIn>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor<TBaseIn, TBaseOut>
    nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    nameWithType: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Predicate<TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Predicate(Of TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>, Func<TIn, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>, Func<TIn, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, TRequiredInput>, System.Func<TIn, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, TRequiredInput), System.Func(Of TIn, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, TRequiredInput1>, System.Func<TIn, TOut, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, TRequiredInput1), System.Func(Of TIn, TOut, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>, Func<TIn, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>, Func<TIn, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, TRequiredInput1>, System.Func<TIn, TOut, TRequiredInput2>, System.Func<TIn, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, TRequiredInput1), System.Func(Of TIn, TOut, TRequiredInput2), System.Func(Of TIn, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  name: CallOutputSensitive(GeneralTransformationRule<TIn, TOut>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive(GeneralTransformationRule<TIn, TOut>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<TIn, TOut>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of TIn, TOut))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive(GeneralTransformationRule<TIn, TOut>, Func<TIn, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive(GeneralTransformationRule<TIn, TOut>, Func<TIn, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<TIn, TOut>, System.Func<TIn, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of TIn, TOut), System.Func(Of TIn, TOut, System.Boolean))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>, Func<TIn, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>, Func<TIn, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<TIn, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of TIn, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<TIn, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of TIn, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase`2.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<TIn, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.OutputType
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).OutputType
- uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  isExternal: true
  name: SelectArrays<TRequiredInput1, TRequiredInput2>(Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>(Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  isExternal: true
  name: SelectArrays<TRequiredInput>(Func<TIn, TOut, IEnumerable<TRequiredInput>>, Computation)
  nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>(Func<TIn, TOut, IEnumerable<TRequiredInput>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>(System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)(Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)(System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput)(Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  isExternal: true
  name: TraceOutput<TKey>(Func<TIn, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(Func<TIn, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(System.Func<TIn, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(Func(Of TIn, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(System.Func(Of TIn, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of TIn, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  isExternal: true
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TOut>, System.Func<TIn, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TOut), System.Func(Of TIn, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceInput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>, Func<TIn, TOut, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>, Func<TIn, TOut, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceInput>, System.Func<TIn, TOut, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput), Func(Of TIn, TOut, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceInput), System.Func(Of TIn, TOut, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput), Func(Of TIn, TOut, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs<TTraceInput, TTraceOutput>
    nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs(Of TTraceInput, TTraceOutput)
    nameWithType: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceInput
    nameWithType: TTraceInput
    fullName: TTraceInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTraceOutput
    nameWithType: TTraceOutput
    fullName: TTraceOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule(Of TIn).MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule<TRule>
    nameWithType: GeneralTransformationRule<TIn>.Rule<TRule>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule(Of TRule)
    nameWithType: GeneralTransformationRule(Of TIn).Rule(Of TRule)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(ITransformationRulePattern<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(ITransformationRulePattern(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  isExternal: true
  name: RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Require(GeneralTransformationRule, Func<TIn, Object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Require(GeneralTransformationRule, Func<TIn, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule<TIn>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule<TIn>.RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule(Of TIn).RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Call(GeneralTransformationRule, Func<TIn, Object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Call(GeneralTransformationRule, Func<TIn, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule<TIn>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule<TIn>.CallMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule(Of TIn).CallMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  isExternal: true
  name: CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).InputType
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput<TKey>
    nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput(Of TKey)
    nameWithType: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TIn>, System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TIn), System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput<TKey>
    nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput(Of TKey)
    nameWithType: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, Boolean)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
    nameWithType: GeneralTransformationRule<TIn>.ToString
    fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
    nameWithType: GeneralTransformationRule(Of TIn).ToString
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies
  name: RegisterDependencies
  nameWithType: Meta2ClassesTransformation.Reference2Property.RegisterDependencies
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.RegisterDependencies
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput
  name: CreateOutput
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateOutput
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOutput
- uid: NMF.Models.Meta.IReference
  commentId: T:NMF.Models.Meta.IReference
  parent: NMF.Models.Meta
  name: IReference
  nameWithType: IReference
  fullName: NMF.Models.Meta.IReference
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: System.CodeDom.CodeMemberProperty
  commentId: T:System.CodeDom.CodeMemberProperty
  parent: System.CodeDom
  isExternal: true
  name: CodeMemberProperty
  nameWithType: CodeMemberProperty
  fullName: System.CodeDom.CodeMemberProperty
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform
  name: Transform
  nameWithType: Meta2ClassesTransformation.Reference2Property.Transform
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.Transform
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement
  name: GenerateSetStatement
  nameWithType: Meta2ClassesTransformation.Reference2Property.GenerateSetStatement
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.GenerateSetStatement
- uid: System.CodeDom.CodeExpression
  commentId: T:System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: true
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag
  name: CreateBag
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateBag
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBag
- uid: System.CodeDom.CodeTypeReference
  commentId: T:System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList
  name: CreateList
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateList
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateList
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet
  name: CreateSet
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateSet
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSet
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet
  name: CreateOrderedSet
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateOrderedSet
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSet
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType
  name: CreateListInterfaceType
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateListInterfaceType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType
  name: CreateSetInterfaceType
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateSetInterfaceType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType
  name: CreateOrderedSetInterfaceType
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateOrderedSetInterfaceType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType
  name: CreateBagInterfaceType
  nameWithType: Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Reference2Property.CreateBagInterfaceType
