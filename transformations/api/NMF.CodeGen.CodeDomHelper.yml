### YamlMime:ManagedReference
items:
- uid: NMF.CodeGen.CodeDomHelper
  commentId: T:NMF.CodeGen.CodeDomHelper
  id: CodeDomHelper
  parent: NMF.CodeGen
  children:
  - NMF.CodeGen.CodeDomHelper.AddAttribute(System.CodeDom.CodeTypeMember,System.Type,System.Object[])
  - NMF.CodeGen.CodeDomHelper.ApplyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.CodeDom.CodeExpression)
  - NMF.CodeGen.CodeDomHelper.ApplyExpression``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  - NMF.CodeGen.CodeDomHelper.ApplyExpression``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  - NMF.CodeGen.CodeDomHelper.ApplyExpression``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  - NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty)
  - NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  - NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty)
  - NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  - NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty)
  - NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  - NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression(System.String,System.CodeDom.CodeTypeReference,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  - NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(System.String,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.GetBackingField(System.CodeDom.CodeMemberProperty)
  - NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor(System.CodeDom.CodeTypeDeclaration,System.Func{System.CodeDom.CodeConstructor})
  - NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  - NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  - NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  - NMF.CodeGen.CodeDomHelper.GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.ImplementGetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression)
  - NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.CodeDom.CodeStatement[])
  - NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement})
  - NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.MarkCollectionProperty(System.CodeDom.CodeMemberProperty)
  - NMF.CodeGen.CodeDomHelper.Merge(System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember)
  - NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  - NMF.CodeGen.CodeDomHelper.SetMerge(System.CodeDom.CodeTypeMember,System.Func{System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember})
  - NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  - NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  - NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  - NMF.CodeGen.CodeDomHelper.ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  - NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type)
  - NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type,System.CodeDom.CodeTypeReference[])
  - NMF.CodeGen.CodeDomHelper.ValidateArgument(System.CodeDom.CodeMemberMethod,System.String)
  - NMF.CodeGen.CodeDomHelper.ValidateArguments(System.CodeDom.CodeMemberMethod)
  - NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeMemberMethod,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeTypeMember,System.String,System.String)
  langs:
  - csharp
  - vb
  name: CodeDomHelper
  nameWithType: CodeDomHelper
  fullName: NMF.CodeGen.CodeDomHelper
  type: Class
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CodeDomHelper
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 19
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: A helper class to generate code using CodeDOM
  example: []
  syntax:
    content: public static class CodeDomHelper
    content.vb: Public Module CodeDomHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  id: Namespace(System.CodeDom.CodeTypeReference)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: Namespace(CodeTypeReference)
  nameWithType: CodeDomHelper.Namespace(CodeTypeReference)
  fullName: NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Namespace
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 40
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the namespace associated with the given type reference
  example: []
  syntax:
    content: public static string Namespace(this CodeTypeReference typeReference)
    parameters:
    - id: typeReference
      type: System.CodeDom.CodeTypeReference
      description: The type reference
    return:
      type: System.String
      description: The namespace associated with the type reference if any
    content.vb: Public Shared Function [Namespace](typeReference As CodeTypeReference) As String
  overload: NMF.CodeGen.CodeDomHelper.Namespace*
- uid: NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  commentId: M:NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  id: SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: SetNamespace(CodeTypeReference, string)
  nameWithType: CodeDomHelper.SetNamespace(CodeTypeReference, string)
  fullName: NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference, string)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetNamespace
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 50
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Associates the given type reference with the given namespace
  example: []
  syntax:
    content: public static void SetNamespace(this CodeTypeReference typeReference, string necessaryNamespace)
    parameters:
    - id: typeReference
      type: System.CodeDom.CodeTypeReference
      description: The type reference
    - id: necessaryNamespace
      type: System.String
      description: The namespace to be associated with the given type reference
    content.vb: Public Shared Sub SetNamespace(typeReference As CodeTypeReference, necessaryNamespace As String)
  overload: NMF.CodeGen.CodeDomHelper.SetNamespace*
  nameWithType.vb: CodeDomHelper.SetNamespace(CodeTypeReference, String)
  fullName.vb: NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference, String)
  name.vb: SetNamespace(CodeTypeReference, String)
- uid: NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  id: DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: DependentTypes(CodeTypeMember, bool)
  nameWithType: CodeDomHelper.DependentTypes(CodeTypeMember, bool)
  fullName: NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DependentTypes
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 61
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the dependent types of a code member
  example: []
  syntax:
    content: public static ICollection<CodeTypeDeclaration> DependentTypes(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of dependent types should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeDeclaration}
      description: The collection of dependent types or null
    content.vb: Public Shared Function DependentTypes(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeTypeDeclaration)
  overload: NMF.CodeGen.CodeDomHelper.DependentTypes*
  nameWithType.vb: CodeDomHelper.DependentTypes(CodeTypeMember, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember, Boolean)
  name.vb: DependentTypes(CodeTypeMember, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  id: DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: DependentMembers(CodeTypeMember, bool)
  nameWithType: CodeDomHelper.DependentMembers(CodeTypeMember, bool)
  fullName: NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DependentMembers
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 72
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the dependent members of a code member
  example: []
  syntax:
    content: public static ICollection<CodeTypeMember> DependentMembers(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of dependent members should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
      description: The collection of dependent members
    content.vb: Public Shared Function DependentMembers(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeTypeMember)
  overload: NMF.CodeGen.CodeDomHelper.DependentMembers*
  nameWithType.vb: CodeDomHelper.DependentMembers(CodeTypeMember, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember, Boolean)
  name.vb: DependentMembers(CodeTypeMember, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  id: ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ImpliedConstructorStatements(CodeTypeMember, bool)
  nameWithType: CodeDomHelper.ImpliedConstructorStatements(CodeTypeMember, bool)
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImpliedConstructorStatements
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 83
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the implied constructor statements of the given code member
  example: []
  syntax:
    content: public static ICollection<CodeStatement> ImpliedConstructorStatements(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of implied statements should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
      description: The collection of implied constructor statements
    content.vb: Public Shared Function ImpliedConstructorStatements(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeStatement)
  overload: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements*
  nameWithType.vb: CodeDomHelper.ImpliedConstructorStatements(CodeTypeMember, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember, Boolean)
  name.vb: ImpliedConstructorStatements(CodeTypeMember, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  id: ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ImpliedConstructorStatementsInternal(CodeTypeMember, bool)
  nameWithType: CodeDomHelper.ImpliedConstructorStatementsInternal(CodeTypeMember, bool)
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImpliedConstructorStatementsInternal
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 94
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the implied default constructor statements of the given code member
  example: []
  syntax:
    content: public static ICollection<CodeStatement> ImpliedConstructorStatementsInternal(CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of implied constructor statements should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
      description: The collection of implied constructor statements
    content.vb: Public Shared Function ImpliedConstructorStatementsInternal(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeStatement)
  overload: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal*
  nameWithType.vb: CodeDomHelper.ImpliedConstructorStatementsInternal(CodeTypeMember, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember, Boolean)
  name.vb: ImpliedConstructorStatementsInternal(CodeTypeMember, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  id: Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: Shadows(CodeTypeMember, bool)
  nameWithType: CodeDomHelper.Shadows(CodeTypeMember, bool)
  fullName: NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Shadows
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 105
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets a collection of members that are being shadowed by the given code member
  example: []
  syntax:
    content: public static ICollection<CodeTypeMember> Shadows(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
      description: The collection of shadowed members or null
    content.vb: Public Shared Function [Shadows](item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeTypeMember)
  overload: NMF.CodeGen.CodeDomHelper.Shadows*
  nameWithType.vb: CodeDomHelper.Shadows(CodeTypeMember, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember, Boolean)
  name.vb: Shadows(CodeTypeMember, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  commentId: M:NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  id: GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetReferenceForType(CodeTypeDeclaration)
  nameWithType: CodeDomHelper.GetReferenceForType(CodeTypeDeclaration)
  fullName: NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetReferenceForType
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 115
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the type reference associated with the given code type declaration
  example: []
  syntax:
    content: public static CodeTypeReference GetReferenceForType(this CodeTypeDeclaration typeDeclaration)
    parameters:
    - id: typeDeclaration
      type: System.CodeDom.CodeTypeDeclaration
      description: The code type declaration
    return:
      type: System.CodeDom.CodeTypeReference
      description: The type reference associated with the given type
    content.vb: Public Shared Function GetReferenceForType(typeDeclaration As CodeTypeDeclaration) As CodeTypeReference
  overload: NMF.CodeGen.CodeDomHelper.GetReferenceForType*
- uid: NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  id: GetTypeForReference(System.CodeDom.CodeTypeReference)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetTypeForReference(CodeTypeReference)
  nameWithType: CodeDomHelper.GetTypeForReference(CodeTypeReference)
  fullName: NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetTypeForReference
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 125
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the type declaration associated with the given code type reference
  example: []
  syntax:
    content: public static CodeTypeDeclaration GetTypeForReference(this CodeTypeReference typeReference)
    parameters:
    - id: typeReference
      type: System.CodeDom.CodeTypeReference
      description: The code type reference
    return:
      type: System.CodeDom.CodeTypeDeclaration
      description: The code type declaration associated with the given code type reference
    content.vb: Public Shared Function GetTypeForReference(typeReference As CodeTypeReference) As CodeTypeDeclaration
  overload: NMF.CodeGen.CodeDomHelper.GetTypeForReference*
- uid: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(System.String,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(System.String,System.Boolean)
  id: CreateTypeDeclarationWithReference(System.String,System.Boolean)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateTypeDeclarationWithReference(string, bool)
  nameWithType: CodeDomHelper.CreateTypeDeclarationWithReference(string, bool)
  fullName: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(string, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateTypeDeclarationWithReference
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 136
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Creates a type declaration with a reference attached to it
  example: []
  syntax:
    content: public static CodeTypeDeclaration CreateTypeDeclarationWithReference(string name, bool autoAssignNamespace)
    parameters:
    - id: name
      type: System.String
      description: The initial name of the type declaration
    - id: autoAssignNamespace
      type: System.Boolean
      description: If true, the namespace is set in the user data such that the code generation helper can automatically deduct when the namespace can be omitted.
    return:
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated type declaration
    content.vb: Public Shared Function CreateTypeDeclarationWithReference(name As String, autoAssignNamespace As Boolean) As CodeTypeDeclaration
  overload: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference*
  nameWithType.vb: CodeDomHelper.CreateTypeDeclarationWithReference(String, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(String, Boolean)
  name.vb: CreateTypeDeclarationWithReference(String, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  id: GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetUserCollection<TValue>(CodeObject, object, bool)
  nameWithType: CodeDomHelper.GetUserCollection<TValue>(CodeObject, object, bool)
  fullName: NMF.CodeGen.CodeDomHelper.GetUserCollection<TValue>(System.CodeDom.CodeObject, object, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetUserCollection
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 161
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the user collection associated with the given code object
  example: []
  syntax:
    content: public static List<TValue> GetUserCollection<TValue>(this CodeObject item, object key, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeObject
      description: The code object
    - id: key
      type: System.Object
      description: The user key for retrieving the collection
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection should be created if not yet existing
    typeParameters:
    - id: TValue
      description: The type of the collection elements
    return:
      type: System.Collections.Generic.List{{TValue}}
      description: The user collection or null
    content.vb: Public Shared Function GetUserCollection(Of TValue)(item As CodeObject, key As Object, createIfNecessary As Boolean) As List(Of TValue)
  overload: NMF.CodeGen.CodeDomHelper.GetUserCollection*
  nameWithType.vb: CodeDomHelper.GetUserCollection(Of TValue)(CodeObject, Object, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.GetUserCollection(Of TValue)(System.CodeDom.CodeObject, Object, Boolean)
  name.vb: GetUserCollection(Of TValue)(CodeObject, Object, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  commentId: M:NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  id: GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetOrCreateUserItem<TValue>(CodeObject, object, Func<TValue>)
  nameWithType: CodeDomHelper.GetOrCreateUserItem<TValue>(CodeObject, object, Func<TValue>)
  fullName: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem<TValue>(System.CodeDom.CodeObject, object, System.Func<TValue>)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetOrCreateUserItem
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 176
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets or creates the user item with the specified key
  example: []
  syntax:
    content: 'public static TValue GetOrCreateUserItem<TValue>(this CodeObject item, object key, Func<TValue> valueCreator = null) where TValue : class'
    parameters:
    - id: item
      type: System.CodeDom.CodeObject
      description: The code object
    - id: key
      type: System.Object
      description: The key for the user item
    - id: valueCreator
      type: System.Func{{TValue}}
      description: A method that creates the default value if the user item does not yet exist or null, if no user item should be created
    typeParameters:
    - id: TValue
      description: The type of the user item
    return:
      type: '{TValue}'
      description: The user item with the specified key
    content.vb: Public Shared Function GetOrCreateUserItem(Of TValue As Class)(item As CodeObject, key As Object, valueCreator As Func(Of TValue) = Nothing) As TValue
  overload: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem*
  nameWithType.vb: CodeDomHelper.GetOrCreateUserItem(Of TValue)(CodeObject, Object, Func(Of TValue))
  fullName.vb: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem(Of TValue)(System.CodeDom.CodeObject, Object, System.Func(Of TValue))
  name.vb: GetOrCreateUserItem(Of TValue)(CodeObject, Object, Func(Of TValue))
- uid: NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  commentId: M:NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  id: SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: SetUserItem(CodeObject, object, object)
  nameWithType: CodeDomHelper.SetUserItem(CodeObject, object, object)
  fullName: NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject, object, object)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetUserItem
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 206
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Overrides the user item with the given key
  example: []
  syntax:
    content: public static void SetUserItem(this CodeObject item, object key, object value)
    parameters:
    - id: item
      type: System.CodeDom.CodeObject
      description: The code object
    - id: key
      type: System.Object
      description: The user item key
    - id: value
      type: System.Object
      description: The value to set
    content.vb: Public Shared Sub SetUserItem(item As CodeObject, key As Object, value As Object)
  overload: NMF.CodeGen.CodeDomHelper.SetUserItem*
  nameWithType.vb: CodeDomHelper.SetUserItem(CodeObject, Object, Object)
  fullName.vb: NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject, Object, Object)
  name.vb: SetUserItem(CodeObject, Object, Object)
- uid: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  id: CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateRaiseMethod(CodeMemberEvent, CodeTypeReference)
  nameWithType: CodeDomHelper.CreateRaiseMethod(CodeMemberEvent, CodeTypeReference)
  fullName: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent, System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateRaiseMethod
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 226
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Creates a method that raises the given event
  example: []
  syntax:
    content: public static CodeMemberMethod CreateRaiseMethod(this CodeMemberEvent memberEvent, CodeTypeReference eventDataType)
    parameters:
    - id: memberEvent
      type: System.CodeDom.CodeMemberEvent
      description: The event that is to be raised
    - id: eventDataType
      type: System.CodeDom.CodeTypeReference
      description: The event arguments type
    return:
      type: System.CodeDom.CodeMemberMethod
      description: A code method that raises the event
    content.vb: Public Shared Function CreateRaiseMethod(memberEvent As CodeMemberEvent, eventDataType As CodeTypeReference) As CodeMemberMethod
  overload: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod*
- uid: NMF.CodeGen.CodeDomHelper.ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  commentId: M:NMF.CodeGen.CodeDomHelper.ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  id: ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ThrowException<TException>(CodeMemberMethod, params object[])
  nameWithType: CodeDomHelper.ThrowException<TException>(CodeMemberMethod, params object[])
  fullName: NMF.CodeGen.CodeDomHelper.ThrowException<TException>(System.CodeDom.CodeMemberMethod, params object[])
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThrowException
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 264
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Adds a statement to throw an exception of the given type
  example: []
  syntax:
    content: public static void ThrowException<TException>(this CodeMemberMethod method, params object[] arguments)
    parameters:
    - id: method
      type: System.CodeDom.CodeMemberMethod
      description: The method that should throw the exception
    - id: arguments
      type: System.Object[]
      description: The arguments that should be passed to the constructor of the exception
    typeParameters:
    - id: TException
      description: The type of the exception
    content.vb: Public Shared Sub ThrowException(Of TException)(method As CodeMemberMethod, ParamArray arguments As Object())
  overload: NMF.CodeGen.CodeDomHelper.ThrowException*
  nameWithType.vb: CodeDomHelper.ThrowException(Of TException)(CodeMemberMethod, ParamArray Object())
  fullName.vb: NMF.CodeGen.CodeDomHelper.ThrowException(Of TException)(System.CodeDom.CodeMemberMethod, ParamArray Object())
  name.vb: ThrowException(Of TException)(CodeMemberMethod, ParamArray Object())
- uid: NMF.CodeGen.CodeDomHelper.AddAttribute(System.CodeDom.CodeTypeMember,System.Type,System.Object[])
  commentId: M:NMF.CodeGen.CodeDomHelper.AddAttribute(System.CodeDom.CodeTypeMember,System.Type,System.Object[])
  id: AddAttribute(System.CodeDom.CodeTypeMember,System.Type,System.Object[])
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: AddAttribute(CodeTypeMember, Type, params object[])
  nameWithType: CodeDomHelper.AddAttribute(CodeTypeMember, Type, params object[])
  fullName: NMF.CodeGen.CodeDomHelper.AddAttribute(System.CodeDom.CodeTypeMember, System.Type, params object[])
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AddAttribute
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 309
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Adds an attribute of the given attribute type to the given code member
  example: []
  syntax:
    content: public static void AddAttribute(this CodeTypeMember member, Type attributeType, params object[] arguments)
    parameters:
    - id: member
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: attributeType
      type: System.Type
      description: The type of the attribute
    - id: arguments
      type: System.Object[]
      description: The arguments of the attribute, can either be primitive values, code expressions or code attribute arguments
    content.vb: Public Shared Sub AddAttribute(member As CodeTypeMember, attributeType As Type, ParamArray arguments As Object())
  overload: NMF.CodeGen.CodeDomHelper.AddAttribute*
  nameWithType.vb: CodeDomHelper.AddAttribute(CodeTypeMember, Type, ParamArray Object())
  fullName.vb: NMF.CodeGen.CodeDomHelper.AddAttribute(System.CodeDom.CodeTypeMember, System.Type, ParamArray Object())
  name.vb: AddAttribute(CodeTypeMember, Type, ParamArray Object())
- uid: NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression(System.String,System.CodeDom.CodeTypeReference,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression(System.String,System.CodeDom.CodeTypeReference,System.Boolean)
  id: CreatePrimitiveExpression(System.String,System.CodeDom.CodeTypeReference,System.Boolean)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreatePrimitiveExpression(string, CodeTypeReference, bool)
  nameWithType: CodeDomHelper.CreatePrimitiveExpression(string, CodeTypeReference, bool)
  fullName: NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression(string, System.CodeDom.CodeTypeReference, bool)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreatePrimitiveExpression
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 342
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Creates a primitive expression from the serialized value
  example: []
  syntax:
    content: public static CodeExpression CreatePrimitiveExpression(string value, CodeTypeReference type, bool isEnum)
    parameters:
    - id: value
      type: System.String
      description: The serialized value
    - id: type
      type: System.CodeDom.CodeTypeReference
      description: The type for the primitive expression
    - id: isEnum
      type: System.Boolean
      description: True, if the value is an enum, otherwise False
    return:
      type: System.CodeDom.CodeExpression
      description: A code expression that represents the value as a code expression or null if there is no such expression
    content.vb: Public Shared Function CreatePrimitiveExpression(value As String, type As CodeTypeReference, isEnum As Boolean) As CodeExpression
  overload: NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression*
  nameWithType.vb: CodeDomHelper.CreatePrimitiveExpression(String, CodeTypeReference, Boolean)
  fullName.vb: NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression(String, System.CodeDom.CodeTypeReference, Boolean)
  name.vb: CreatePrimitiveExpression(String, CodeTypeReference, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.ValidateArgument(System.CodeDom.CodeMemberMethod,System.String)
  commentId: M:NMF.CodeGen.CodeDomHelper.ValidateArgument(System.CodeDom.CodeMemberMethod,System.String)
  id: ValidateArgument(System.CodeDom.CodeMemberMethod,System.String)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ValidateArgument(CodeMemberMethod, string)
  nameWithType: CodeDomHelper.ValidateArgument(CodeMemberMethod, string)
  fullName: NMF.CodeGen.CodeDomHelper.ValidateArgument(System.CodeDom.CodeMemberMethod, string)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValidateArgument
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 404
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Generates code to validate that the given argument is not null
  example: []
  syntax:
    content: public static void ValidateArgument(this CodeMemberMethod method, string parameterName)
    parameters:
    - id: method
      type: System.CodeDom.CodeMemberMethod
      description: The method that should be checked
    - id: parameterName
      type: System.String
      description: The parameter name
    content.vb: Public Shared Sub ValidateArgument(method As CodeMemberMethod, parameterName As String)
  overload: NMF.CodeGen.CodeDomHelper.ValidateArgument*
  nameWithType.vb: CodeDomHelper.ValidateArgument(CodeMemberMethod, String)
  fullName.vb: NMF.CodeGen.CodeDomHelper.ValidateArgument(System.CodeDom.CodeMemberMethod, String)
  name.vb: ValidateArgument(CodeMemberMethod, String)
- uid: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty)
  id: CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateOnChangedEventPattern(CodeMemberProperty)
  nameWithType: CodeDomHelper.CreateOnChangedEventPattern(CodeMemberProperty)
  fullName: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOnChangedEventPattern
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 417
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Generates an OnChanged-pattern for the given property
  example: []
  syntax:
    content: public static CodeStatement CreateOnChangedEventPattern(this CodeMemberProperty property)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    return:
      type: System.CodeDom.CodeStatement
      description: The statement to call the OnChanged method for the given property
    content.vb: Public Shared Function CreateOnChangedEventPattern([property] As CodeMemberProperty) As CodeStatement
  overload: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern*
- uid: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty)
  id: CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateOnChangingEventPattern(CodeMemberProperty)
  nameWithType: CodeDomHelper.CreateOnChangingEventPattern(CodeMemberProperty)
  fullName: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOnChangingEventPattern
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 428
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Generates an OnChanging-pattern for the given property
  example: []
  syntax:
    content: public static CodeStatement CreateOnChangingEventPattern(this CodeMemberProperty property)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    return:
      type: System.CodeDom.CodeStatement
      description: ''
    content.vb: Public Shared Function CreateOnChangingEventPattern([property] As CodeMemberProperty) As CodeStatement
  overload: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern*
- uid: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  id: CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateOnChangingEventPattern(CodeMemberProperty, CodeTypeReference, CodeExpression)
  nameWithType: CodeDomHelper.CreateOnChangingEventPattern(CodeMemberProperty, CodeTypeReference, CodeExpression)
  fullName: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeTypeReference, System.CodeDom.CodeExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOnChangingEventPattern
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 440
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Generates an OnChanging-pattern for the given property
  example: []
  syntax:
    content: public static CodeStatement CreateOnChangingEventPattern(this CodeMemberProperty property, CodeTypeReference eventType, CodeExpression eventData)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    - id: eventType
      type: System.CodeDom.CodeTypeReference
      description: The type of the changing event
    - id: eventData
      type: System.CodeDom.CodeExpression
      description: The event data for the changing event
    return:
      type: System.CodeDom.CodeStatement
      description: A method that can be called on changing of a property
    content.vb: Public Shared Function CreateOnChangingEventPattern([property] As CodeMemberProperty, eventType As CodeTypeReference, eventData As CodeExpression) As CodeStatement
  overload: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern*
- uid: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  id: CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateOnChangedEventPattern(CodeMemberProperty, CodeTypeReference, CodeExpression)
  nameWithType: CodeDomHelper.CreateOnChangedEventPattern(CodeMemberProperty, CodeTypeReference, CodeExpression)
  fullName: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeTypeReference, System.CodeDom.CodeExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOnChangedEventPattern
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 486
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Generates an OnChanged-pattern for the given property
  example: []
  syntax:
    content: public static CodeStatement CreateOnChangedEventPattern(this CodeMemberProperty property, CodeTypeReference eventType, CodeExpression eventData)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    - id: eventType
      type: System.CodeDom.CodeTypeReference
      description: The event type
    - id: eventData
      type: System.CodeDom.CodeExpression
      description: The event data
    return:
      type: System.CodeDom.CodeStatement
      description: The statement to call the OnChanged method for the given property
    content.vb: Public Shared Function CreateOnChangedEventPattern([property] As CodeMemberProperty, eventType As CodeTypeReference, eventData As CodeExpression) As CodeStatement
  overload: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern*
- uid: NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty)
  id: CreateBackingField(System.CodeDom.CodeMemberProperty)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateBackingField(CodeMemberProperty)
  nameWithType: CodeDomHelper.CreateBackingField(CodeMemberProperty)
  fullName: NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateBackingField
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 528
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Creates a backing field for the given property
  example: []
  syntax:
    content: public static CodeFieldReferenceExpression CreateBackingField(this CodeMemberProperty property)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    return:
      type: System.CodeDom.CodeFieldReferenceExpression
      description: A reference to the generated backing field
    content.vb: Public Shared Function CreateBackingField([property] As CodeMemberProperty) As CodeFieldReferenceExpression
  overload: NMF.CodeGen.CodeDomHelper.CreateBackingField*
- uid: NMF.CodeGen.CodeDomHelper.GetBackingField(System.CodeDom.CodeMemberProperty)
  commentId: M:NMF.CodeGen.CodeDomHelper.GetBackingField(System.CodeDom.CodeMemberProperty)
  id: GetBackingField(System.CodeDom.CodeMemberProperty)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetBackingField(CodeMemberProperty)
  nameWithType: CodeDomHelper.GetBackingField(CodeMemberProperty)
  fullName: NMF.CodeGen.CodeDomHelper.GetBackingField(System.CodeDom.CodeMemberProperty)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetBackingField
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 538
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets the backing field for the given property
  example: []
  syntax:
    content: public static CodeFieldReferenceExpression GetBackingField(this CodeMemberProperty property)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The property
    return:
      type: System.CodeDom.CodeFieldReferenceExpression
      description: A code field reference to the backing field
    content.vb: Public Shared Function GetBackingField([property] As CodeMemberProperty) As CodeFieldReferenceExpression
  overload: NMF.CodeGen.CodeDomHelper.GetBackingField*
- uid: NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  id: CreateBackingField(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateBackingField(CodeMemberProperty, CodeTypeReference, CodeExpression)
  nameWithType: CodeDomHelper.CreateBackingField(CodeMemberProperty, CodeTypeReference, CodeExpression)
  fullName: NMF.CodeGen.CodeDomHelper.CreateBackingField(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeTypeReference, System.CodeDom.CodeExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateBackingField
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 550
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Creates a backing field for the given property
  example: []
  syntax:
    content: public static CodeFieldReferenceExpression CreateBackingField(this CodeMemberProperty property, CodeTypeReference type, CodeExpression initialValue)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    - id: type
      type: System.CodeDom.CodeTypeReference
      description: The type of the property
    - id: initialValue
      type: System.CodeDom.CodeExpression
      description: The initial value expression for the field
    return:
      type: System.CodeDom.CodeFieldReferenceExpression
      description: A reference to the generated backing field
    content.vb: Public Shared Function CreateBackingField([property] As CodeMemberProperty, type As CodeTypeReference, initialValue As CodeExpression) As CodeFieldReferenceExpression
  overload: NMF.CodeGen.CodeDomHelper.CreateBackingField*
- uid: NMF.CodeGen.CodeDomHelper.MarkCollectionProperty(System.CodeDom.CodeMemberProperty)
  commentId: M:NMF.CodeGen.CodeDomHelper.MarkCollectionProperty(System.CodeDom.CodeMemberProperty)
  id: MarkCollectionProperty(System.CodeDom.CodeMemberProperty)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: MarkCollectionProperty(CodeMemberProperty)
  nameWithType: CodeDomHelper.MarkCollectionProperty(CodeMemberProperty)
  fullName: NMF.CodeGen.CodeDomHelper.MarkCollectionProperty(System.CodeDom.CodeMemberProperty)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MarkCollectionProperty
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 584
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Marks the given code property as a collection property
  example: []
  syntax:
    content: public static void MarkCollectionProperty(this CodeMemberProperty property)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The property
    content.vb: Public Shared Sub MarkCollectionProperty([property] As CodeMemberProperty)
  overload: NMF.CodeGen.CodeDomHelper.MarkCollectionProperty*
- uid: NMF.CodeGen.CodeDomHelper.ImplementGetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.ImplementGetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression)
  id: ImplementGetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ImplementGetter(CodeMemberProperty, CodeFieldReferenceExpression)
  nameWithType: CodeDomHelper.ImplementGetter(CodeMemberProperty, CodeFieldReferenceExpression)
  fullName: NMF.CodeGen.CodeDomHelper.ImplementGetter(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeFieldReferenceExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImplementGetter
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 594
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Implements the getter of the given property
  example: []
  syntax:
    content: public static void ImplementGetter(this CodeMemberProperty property, CodeFieldReferenceExpression fieldRef)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The property
    - id: fieldRef
      type: System.CodeDom.CodeFieldReferenceExpression
      description: A reference to the underlying field
    content.vb: Public Shared Sub ImplementGetter([property] As CodeMemberProperty, fieldRef As CodeFieldReferenceExpression)
  overload: NMF.CodeGen.CodeDomHelper.ImplementGetter*
- uid: NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.CodeDom.CodeStatement[])
  commentId: M:NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.CodeDom.CodeStatement[])
  id: ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.CodeDom.CodeStatement[])
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, params CodeStatement[])
  nameWithType: CodeDomHelper.ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, params CodeStatement[])
  fullName: NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeFieldReferenceExpression, params System.CodeDom.CodeStatement[])
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImplementSetter
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 606
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Implements the setter of the given property
  example: []
  syntax:
    content: public static void ImplementSetter(this CodeMemberProperty property, CodeFieldReferenceExpression fieldRef, params CodeStatement[] whenChanged)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    - id: fieldRef
      type: System.CodeDom.CodeFieldReferenceExpression
      description: A reference to the underlying field
    - id: whenChanged
      type: System.CodeDom.CodeStatement[]
      description: A collection of statements that should be performed when the value of the property changed
    content.vb: Public Shared Sub ImplementSetter([property] As CodeMemberProperty, fieldRef As CodeFieldReferenceExpression, ParamArray whenChanged As CodeStatement())
  overload: NMF.CodeGen.CodeDomHelper.ImplementSetter*
  nameWithType.vb: CodeDomHelper.ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, ParamArray CodeStatement())
  fullName.vb: NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeFieldReferenceExpression, ParamArray System.CodeDom.CodeStatement())
  name.vb: ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, ParamArray CodeStatement())
- uid: NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement})
  commentId: M:NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement})
  id: ImplementSetter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeFieldReferenceExpression,System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement})
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, IEnumerable<CodeStatement>)
  nameWithType: CodeDomHelper.ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, IEnumerable<CodeStatement>)
  fullName: NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeFieldReferenceExpression, System.Collections.Generic.IEnumerable<System.CodeDom.CodeStatement>)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImplementSetter
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 617
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Implements the setter of the given property
  example: []
  syntax:
    content: public static void ImplementSetter(this CodeMemberProperty property, CodeFieldReferenceExpression fieldRef, IEnumerable<CodeStatement> whenChanged)
    parameters:
    - id: property
      type: System.CodeDom.CodeMemberProperty
      description: The code property
    - id: fieldRef
      type: System.CodeDom.CodeFieldReferenceExpression
      description: A reference to the underlying field
    - id: whenChanged
      type: System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement}
      description: A collection of statements that should be performed when the value of the property changed
    content.vb: Public Shared Sub ImplementSetter([property] As CodeMemberProperty, fieldRef As CodeFieldReferenceExpression, whenChanged As IEnumerable(Of CodeStatement))
  overload: NMF.CodeGen.CodeDomHelper.ImplementSetter*
  nameWithType.vb: CodeDomHelper.ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, IEnumerable(Of CodeStatement))
  fullName.vb: NMF.CodeGen.CodeDomHelper.ImplementSetter(System.CodeDom.CodeMemberProperty, System.CodeDom.CodeFieldReferenceExpression, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeStatement))
  name.vb: ImplementSetter(CodeMemberProperty, CodeFieldReferenceExpression, IEnumerable(Of CodeStatement))
- uid: NMF.CodeGen.CodeDomHelper.ValidateArguments(System.CodeDom.CodeMemberMethod)
  commentId: M:NMF.CodeGen.CodeDomHelper.ValidateArguments(System.CodeDom.CodeMemberMethod)
  id: ValidateArguments(System.CodeDom.CodeMemberMethod)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ValidateArguments(CodeMemberMethod)
  nameWithType: CodeDomHelper.ValidateArguments(CodeMemberMethod)
  fullName: NMF.CodeGen.CodeDomHelper.ValidateArguments(System.CodeDom.CodeMemberMethod)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValidateArguments
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 644
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Validate all arguments to be not null
  example: []
  syntax:
    content: public static void ValidateArguments(this CodeMemberMethod method)
    parameters:
    - id: method
      type: System.CodeDom.CodeMemberMethod
      description: The method whose arguments should be validated
    content.vb: Public Shared Sub ValidateArguments(method As CodeMemberMethod)
  overload: NMF.CodeGen.CodeDomHelper.ValidateArguments*
- uid: NMF.CodeGen.CodeDomHelper.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  commentId: M:NMF.CodeGen.CodeDomHelper.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  id: SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: SplitCompileUnit(CodeCompileUnit)
  nameWithType: CodeDomHelper.SplitCompileUnit(CodeCompileUnit)
  fullName: NMF.CodeGen.CodeDomHelper.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SplitCompileUnit
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 657
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Splits the given code compile unit in multiple compile units to separate each type in its own compile unit
  example: []
  syntax:
    content: public static IDictionary<string, CodeCompileUnit> SplitCompileUnit(CodeCompileUnit unit)
    parameters:
    - id: unit
      type: System.CodeDom.CodeCompileUnit
      description: The code compile unit
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.CodeDom.CodeCompileUnit}
      description: A dictionary of full type names and code compile units that only contain this single type
    content.vb: Public Shared Function SplitCompileUnit(unit As CodeCompileUnit) As IDictionary(Of String, CodeCompileUnit)
  overload: NMF.CodeGen.CodeDomHelper.SplitCompileUnit*
- uid: NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeTypeMember,System.String,System.String)
  commentId: M:NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeTypeMember,System.String,System.String)
  id: WriteDocumentation(System.CodeDom.CodeTypeMember,System.String,System.String)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: WriteDocumentation(CodeTypeMember, string, string)
  nameWithType: CodeDomHelper.WriteDocumentation(CodeTypeMember, string, string)
  fullName: NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeTypeMember, string, string)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: WriteDocumentation
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 754
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Writes documentation for the given code member
  example: []
  syntax:
    content: public static void WriteDocumentation(this CodeTypeMember member, string summary, string remarks = null)
    parameters:
    - id: member
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: summary
      type: System.String
      description: The summary documentation
    - id: remarks
      type: System.String
      description: The documentation remarks
    content.vb: Public Shared Sub WriteDocumentation(member As CodeTypeMember, summary As String, remarks As String = Nothing)
  overload: NMF.CodeGen.CodeDomHelper.WriteDocumentation*
  nameWithType.vb: CodeDomHelper.WriteDocumentation(CodeTypeMember, String, String)
  fullName.vb: NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeTypeMember, String, String)
  name.vb: WriteDocumentation(CodeTypeMember, String, String)
- uid: NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeMemberMethod,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  commentId: M:NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeMemberMethod,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: WriteDocumentation(System.CodeDom.CodeMemberMethod,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: WriteDocumentation(CodeMemberMethod, string, string, IDictionary<string, string>, string)
  nameWithType: CodeDomHelper.WriteDocumentation(CodeMemberMethod, string, string, IDictionary<string, string>, string)
  fullName: NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeMemberMethod, string, string, System.Collections.Generic.IDictionary<string, string>, string)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: WriteDocumentation
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 785
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Writes documentation for the given code member
  example: []
  syntax:
    content: public static void WriteDocumentation(this CodeMemberMethod member, string summary, string returns, IDictionary<string, string> parameters = null, string remarks = null)
    parameters:
    - id: member
      type: System.CodeDom.CodeMemberMethod
      description: The code member
    - id: summary
      type: System.String
      description: The summary documentation
    - id: returns
      type: System.String
      description: The documentation for the return value
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The documentation for the method parameters
    - id: remarks
      type: System.String
      description: The documentation remarks
    content.vb: Public Shared Sub WriteDocumentation(member As CodeMemberMethod, summary As String, returns As String, parameters As IDictionary(Of String, String) = Nothing, remarks As String = Nothing)
  overload: NMF.CodeGen.CodeDomHelper.WriteDocumentation*
  nameWithType.vb: CodeDomHelper.WriteDocumentation(CodeMemberMethod, String, String, IDictionary(Of String, String), String)
  fullName.vb: NMF.CodeGen.CodeDomHelper.WriteDocumentation(System.CodeDom.CodeMemberMethod, String, String, System.Collections.Generic.IDictionary(Of String, String), String)
  name.vb: WriteDocumentation(CodeMemberMethod, String, String, IDictionary(Of String, String), String)
- uid: NMF.CodeGen.CodeDomHelper.ApplyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.CodeDom.CodeExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.ApplyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.CodeDom.CodeExpression)
  id: ApplyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.CodeDom.CodeExpression)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ApplyExpression<T1, TResult>(Expression<Func<T1, TResult>>, CodeExpression)
  nameWithType: CodeDomHelper.ApplyExpression<T1, TResult>(Expression<Func<T1, TResult>>, CodeExpression)
  fullName: NMF.CodeGen.CodeDomHelper.ApplyExpression<T1, TResult>(System.Linq.Expressions.Expression<System.Func<T1, TResult>>, System.CodeDom.CodeExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ApplyExpression
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 814
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Applies the given expression to the given code expressions as input
  example: []
  syntax:
    content: public static CodeExpression ApplyExpression<T1, TResult>(Expression<Func<T1, TResult>> expression, CodeExpression argument)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
      description: The expression to be converted to CodeDOM
    - id: argument
      type: System.CodeDom.CodeExpression
      description: The first argument
    typeParameters:
    - id: T1
      description: The type of the first argument
    - id: TResult
      description: The type of the result
    return:
      type: System.CodeDom.CodeExpression
      description: The CodeDOM expression that contains the equivalent code
    content.vb: Public Shared Function ApplyExpression(Of T1, TResult)(expression As Expression(Of Func(Of T1, TResult)), argument As CodeExpression) As CodeExpression
  overload: NMF.CodeGen.CodeDomHelper.ApplyExpression*
  nameWithType.vb: CodeDomHelper.ApplyExpression(Of T1, TResult)(Expression(Of Func(Of T1, TResult)), CodeExpression)
  fullName.vb: NMF.CodeGen.CodeDomHelper.ApplyExpression(Of T1, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)), System.CodeDom.CodeExpression)
  name.vb: ApplyExpression(Of T1, TResult)(Expression(Of Func(Of T1, TResult)), CodeExpression)
- uid: NMF.CodeGen.CodeDomHelper.ApplyExpression``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.ApplyExpression``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  id: ApplyExpression``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ApplyExpression<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>, CodeExpression, CodeExpression)
  nameWithType: CodeDomHelper.ApplyExpression<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>, CodeExpression, CodeExpression)
  fullName: NMF.CodeGen.CodeDomHelper.ApplyExpression<T1, T2, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ApplyExpression
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 836
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Applies the given expression to the given code expressions as input
  example: []
  syntax:
    content: public static CodeExpression ApplyExpression<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> expression, CodeExpression argument1, CodeExpression argument2)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
      description: The expression to be converted to CodeDOM
    - id: argument1
      type: System.CodeDom.CodeExpression
      description: The first argument
    - id: argument2
      type: System.CodeDom.CodeExpression
      description: The second argument
    typeParameters:
    - id: T1
      description: The type of the first argument
    - id: T2
      description: The type of the second argument
    - id: TResult
      description: The type of the result
    return:
      type: System.CodeDom.CodeExpression
      description: The CodeDOM expression that contains the equivalent code
    content.vb: Public Shared Function ApplyExpression(Of T1, T2, TResult)(expression As Expression(Of Func(Of T1, T2, TResult)), argument1 As CodeExpression, argument2 As CodeExpression) As CodeExpression
  overload: NMF.CodeGen.CodeDomHelper.ApplyExpression*
  nameWithType.vb: CodeDomHelper.ApplyExpression(Of T1, T2, TResult)(Expression(Of Func(Of T1, T2, TResult)), CodeExpression, CodeExpression)
  fullName.vb: NMF.CodeGen.CodeDomHelper.ApplyExpression(Of T1, T2, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult)), System.CodeDom.CodeExpression, System.CodeDom.CodeExpression)
  name.vb: ApplyExpression(Of T1, T2, TResult)(Expression(Of Func(Of T1, T2, TResult)), CodeExpression, CodeExpression)
- uid: NMF.CodeGen.CodeDomHelper.ApplyExpression``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.ApplyExpression``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  id: ApplyExpression``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ApplyExpression<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>, CodeExpression, CodeExpression, CodeExpression)
  nameWithType: CodeDomHelper.ApplyExpression<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>, CodeExpression, CodeExpression, CodeExpression)
  fullName: NMF.CodeGen.CodeDomHelper.ApplyExpression<T1, T2, T3, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ApplyExpression
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 861
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Applies the given expression to the given code expressions as input
  example: []
  syntax:
    content: public static CodeExpression ApplyExpression<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>> expression, CodeExpression argument1, CodeExpression argument2, CodeExpression argument3)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}}
      description: The expression to be converted to CodeDOM
    - id: argument1
      type: System.CodeDom.CodeExpression
      description: The first argument
    - id: argument2
      type: System.CodeDom.CodeExpression
      description: The second argument
    - id: argument3
      type: System.CodeDom.CodeExpression
      description: The third argument
    typeParameters:
    - id: T1
      description: The type of the first argument
    - id: T2
      description: The type of the second argument
    - id: T3
      description: The type of the third argument
    - id: TResult
      description: The type of the result
    return:
      type: System.CodeDom.CodeExpression
      description: The CodeDOM expression that contains the equivalent code
    content.vb: Public Shared Function ApplyExpression(Of T1, T2, T3, TResult)(expression As Expression(Of Func(Of T1, T2, T3, TResult)), argument1 As CodeExpression, argument2 As CodeExpression, argument3 As CodeExpression) As CodeExpression
  overload: NMF.CodeGen.CodeDomHelper.ApplyExpression*
  nameWithType.vb: CodeDomHelper.ApplyExpression(Of T1, T2, T3, TResult)(Expression(Of Func(Of T1, T2, T3, TResult)), CodeExpression, CodeExpression, CodeExpression)
  fullName.vb: NMF.CodeGen.CodeDomHelper.ApplyExpression(Of T1, T2, T3, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult)), System.CodeDom.CodeExpression, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression)
  name.vb: ApplyExpression(Of T1, T2, T3, TResult)(Expression(Of Func(Of T1, T2, T3, TResult)), CodeExpression, CodeExpression, CodeExpression)
- uid: NMF.CodeGen.CodeDomHelper.ApplyExpression``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  commentId: M:NMF.CodeGen.CodeDomHelper.ApplyExpression``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  id: ApplyExpression``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ApplyExpression<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>, CodeExpression, CodeExpression, CodeExpression, CodeExpression)
  nameWithType: CodeDomHelper.ApplyExpression<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>, CodeExpression, CodeExpression, CodeExpression, CodeExpression)
  fullName: NMF.CodeGen.CodeDomHelper.ApplyExpression<T1, T2, T3, T4, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>>, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ApplyExpression
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 889
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Applies the given expression to the given code expressions as input
  example: []
  syntax:
    content: public static CodeExpression ApplyExpression<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>> expression, CodeExpression argument1, CodeExpression argument2, CodeExpression argument3, CodeExpression argument4)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{TResult}}}
      description: The expression to be converted to CodeDOM
    - id: argument1
      type: System.CodeDom.CodeExpression
      description: The first argument
    - id: argument2
      type: System.CodeDom.CodeExpression
      description: The second argument
    - id: argument3
      type: System.CodeDom.CodeExpression
      description: The third argument
    - id: argument4
      type: System.CodeDom.CodeExpression
      description: The fourth argument
    typeParameters:
    - id: T1
      description: The type of the first argument
    - id: T2
      description: The type of the second argument
    - id: T3
      description: The type of the third argument
    - id: T4
      description: The type of the fourth argument
    - id: TResult
      description: The type of the result
    return:
      type: System.CodeDom.CodeExpression
      description: The CodeDOM expression that contains the equivalent code
    content.vb: Public Shared Function ApplyExpression(Of T1, T2, T3, T4, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, TResult)), argument1 As CodeExpression, argument2 As CodeExpression, argument3 As CodeExpression, argument4 As CodeExpression) As CodeExpression
  overload: NMF.CodeGen.CodeDomHelper.ApplyExpression*
  nameWithType.vb: CodeDomHelper.ApplyExpression(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of T1, T2, T3, T4, TResult)), CodeExpression, CodeExpression, CodeExpression, CodeExpression)
  fullName.vb: NMF.CodeGen.CodeDomHelper.ApplyExpression(Of T1, T2, T3, T4, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, TResult)), System.CodeDom.CodeExpression, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression, System.CodeDom.CodeExpression)
  name.vb: ApplyExpression(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of T1, T2, T3, T4, TResult)), CodeExpression, CodeExpression, CodeExpression, CodeExpression)
- uid: NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor(System.CodeDom.CodeTypeDeclaration,System.Func{System.CodeDom.CodeConstructor})
  commentId: M:NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor(System.CodeDom.CodeTypeDeclaration,System.Func{System.CodeDom.CodeConstructor})
  id: GetOrCreateDefaultConstructor(System.CodeDom.CodeTypeDeclaration,System.Func{System.CodeDom.CodeConstructor})
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetOrCreateDefaultConstructor(CodeTypeDeclaration, Func<CodeConstructor>)
  nameWithType: CodeDomHelper.GetOrCreateDefaultConstructor(CodeTypeDeclaration, Func<CodeConstructor>)
  fullName: NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor(System.CodeDom.CodeTypeDeclaration, System.Func<System.CodeDom.CodeConstructor>)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetOrCreateDefaultConstructor
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 1016
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Gets or creates the default constructor for the given code type declaration
  example: []
  syntax:
    content: public static CodeConstructor GetOrCreateDefaultConstructor(this CodeTypeDeclaration generatedType, Func<CodeConstructor> constructorCreator = null)
    parameters:
    - id: generatedType
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated type declaration
    - id: constructorCreator
      type: System.Func{System.CodeDom.CodeConstructor}
      description: A function creating the default constructor if necessary
    return:
      type: System.CodeDom.CodeConstructor
      description: The types default constructor
    content.vb: Public Shared Function GetOrCreateDefaultConstructor(generatedType As CodeTypeDeclaration, constructorCreator As Func(Of CodeConstructor) = Nothing) As CodeConstructor
  overload: NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor*
  nameWithType.vb: CodeDomHelper.GetOrCreateDefaultConstructor(CodeTypeDeclaration, Func(Of CodeConstructor))
  fullName.vb: NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor(System.CodeDom.CodeTypeDeclaration, System.Func(Of System.CodeDom.CodeConstructor))
  name.vb: GetOrCreateDefaultConstructor(CodeTypeDeclaration, Func(Of CodeConstructor))
- uid: NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type)
  commentId: M:NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type)
  id: ToTypeReference(System.Type)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ToTypeReference(Type)
  nameWithType: CodeDomHelper.ToTypeReference(Type)
  fullName: NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToTypeReference
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 1026
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Creates a code type reference for the given type
  example: []
  syntax:
    content: public static CodeTypeReference ToTypeReference(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The given system type for which to generate a type reference
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code reference with namespace set accordingly
    content.vb: Public Shared Function ToTypeReference(type As Type) As CodeTypeReference
  overload: NMF.CodeGen.CodeDomHelper.ToTypeReference*
- uid: NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type,System.CodeDom.CodeTypeReference[])
  commentId: M:NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type,System.CodeDom.CodeTypeReference[])
  id: ToTypeReference(System.Type,System.CodeDom.CodeTypeReference[])
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ToTypeReference(Type, params CodeTypeReference[])
  nameWithType: CodeDomHelper.ToTypeReference(Type, params CodeTypeReference[])
  fullName: NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type, params System.CodeDom.CodeTypeReference[])
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToTypeReference
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 1047
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Creates a code type reference for the given type
  example: []
  syntax:
    content: public static CodeTypeReference ToTypeReference(this Type type, params CodeTypeReference[] parameters)
    parameters:
    - id: type
      type: System.Type
      description: The given system type for which to generate a type reference
    - id: parameters
      type: System.CodeDom.CodeTypeReference[]
      description: The type arguments
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code reference with namespace set accordingly
    content.vb: Public Shared Function ToTypeReference(type As Type, ParamArray parameters As CodeTypeReference()) As CodeTypeReference
  overload: NMF.CodeGen.CodeDomHelper.ToTypeReference*
  nameWithType.vb: CodeDomHelper.ToTypeReference(Type, ParamArray CodeTypeReference())
  fullName.vb: NMF.CodeGen.CodeDomHelper.ToTypeReference(System.Type, ParamArray System.CodeDom.CodeTypeReference())
  name.vb: ToTypeReference(Type, ParamArray CodeTypeReference())
- uid: NMF.CodeGen.CodeDomHelper.SetMerge(System.CodeDom.CodeTypeMember,System.Func{System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember})
  commentId: M:NMF.CodeGen.CodeDomHelper.SetMerge(System.CodeDom.CodeTypeMember,System.Func{System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember})
  id: SetMerge(System.CodeDom.CodeTypeMember,System.Func{System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember})
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: SetMerge(CodeTypeMember, Func<CodeTypeMember, CodeTypeMember>)
  nameWithType: CodeDomHelper.SetMerge(CodeTypeMember, Func<CodeTypeMember, CodeTypeMember>)
  fullName: NMF.CodeGen.CodeDomHelper.SetMerge(System.CodeDom.CodeTypeMember, System.Func<System.CodeDom.CodeTypeMember, System.CodeDom.CodeTypeMember>)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetMerge
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 1059
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Defines the action that should be executed when the given member needs to be nerged with another member with the same name
  example: []
  syntax:
    content: public static void SetMerge(this CodeTypeMember member, Func<CodeTypeMember, CodeTypeMember> mergeAction)
    parameters:
    - id: member
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: mergeAction
      type: System.Func{System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember}
      description: The action that should be performed in that case
    content.vb: Public Shared Sub SetMerge(member As CodeTypeMember, mergeAction As Func(Of CodeTypeMember, CodeTypeMember))
  overload: NMF.CodeGen.CodeDomHelper.SetMerge*
  nameWithType.vb: CodeDomHelper.SetMerge(CodeTypeMember, Func(Of CodeTypeMember, CodeTypeMember))
  fullName.vb: NMF.CodeGen.CodeDomHelper.SetMerge(System.CodeDom.CodeTypeMember, System.Func(Of System.CodeDom.CodeTypeMember, System.CodeDom.CodeTypeMember))
  name.vb: SetMerge(CodeTypeMember, Func(Of CodeTypeMember, CodeTypeMember))
- uid: NMF.CodeGen.CodeDomHelper.Merge(System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember)
  commentId: M:NMF.CodeGen.CodeDomHelper.Merge(System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember)
  id: Merge(System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: Merge(CodeTypeMember, CodeTypeMember)
  nameWithType: CodeDomHelper.Merge(CodeTypeMember, CodeTypeMember)
  fullName: NMF.CodeGen.CodeDomHelper.Merge(System.CodeDom.CodeTypeMember, System.CodeDom.CodeTypeMember)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Merge
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 1071
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: Merges the given members
  example: []
  syntax:
    content: public static CodeTypeMember Merge(this CodeTypeMember member, CodeTypeMember other)
    parameters:
    - id: member
      type: System.CodeDom.CodeTypeMember
      description: The first code member
    - id: other
      type: System.CodeDom.CodeTypeMember
      description: The second code member
    return:
      type: System.CodeDom.CodeTypeMember
      description: A merged member
    content.vb: Public Shared Function Merge(member As CodeTypeMember, other As CodeTypeMember) As CodeTypeMember
  overload: NMF.CodeGen.CodeDomHelper.Merge*
references:
- uid: NMF.CodeGen
  commentId: N:NMF.CodeGen
  href: NMF.html
  name: NMF.CodeGen
  nameWithType: NMF.CodeGen
  fullName: NMF.CodeGen
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.CodeGen
    name: CodeGen
    href: NMF.CodeGen.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.CodeGen
    name: CodeGen
    href: NMF.CodeGen.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.CodeGen.CodeDomHelper.Namespace*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.Namespace
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_Namespace_System_CodeDom_CodeTypeReference_
  name: Namespace
  nameWithType: CodeDomHelper.Namespace
  fullName: NMF.CodeGen.CodeDomHelper.Namespace
- uid: System.CodeDom.CodeTypeReference
  commentId: T:System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypereference
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom
- uid: NMF.CodeGen.CodeDomHelper.SetNamespace*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.SetNamespace
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_SetNamespace_System_CodeDom_CodeTypeReference_System_String_
  name: SetNamespace
  nameWithType: CodeDomHelper.SetNamespace
  fullName: NMF.CodeGen.CodeDomHelper.SetNamespace
- uid: NMF.CodeGen.CodeDomHelper.DependentTypes*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.DependentTypes
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_DependentTypes_System_CodeDom_CodeTypeMember_System_Boolean_
  name: DependentTypes
  nameWithType: CodeDomHelper.DependentTypes
  fullName: NMF.CodeGen.CodeDomHelper.DependentTypes
- uid: System.CodeDom.CodeTypeMember
  commentId: T:System.CodeDom.CodeTypeMember
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypemember
  name: CodeTypeMember
  nameWithType: CodeTypeMember
  fullName: System.CodeDom.CodeTypeMember
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeDeclaration}
  commentId: T:System.Collections.Generic.ICollection{System.CodeDom.CodeTypeDeclaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<CodeTypeDeclaration>
  nameWithType: ICollection<CodeTypeDeclaration>
  fullName: System.Collections.Generic.ICollection<System.CodeDom.CodeTypeDeclaration>
  nameWithType.vb: ICollection(Of CodeTypeDeclaration)
  fullName.vb: System.Collections.Generic.ICollection(Of System.CodeDom.CodeTypeDeclaration)
  name.vb: ICollection(Of CodeTypeDeclaration)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypedeclaration
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypedeclaration
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NMF.CodeGen.CodeDomHelper.DependentMembers*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.DependentMembers
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_DependentMembers_System_CodeDom_CodeTypeMember_System_Boolean_
  name: DependentMembers
  nameWithType: CodeDomHelper.DependentMembers
  fullName: NMF.CodeGen.CodeDomHelper.DependentMembers
- uid: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
  commentId: T:System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<CodeTypeMember>
  nameWithType: ICollection<CodeTypeMember>
  fullName: System.Collections.Generic.ICollection<System.CodeDom.CodeTypeMember>
  nameWithType.vb: ICollection(Of CodeTypeMember)
  fullName.vb: System.Collections.Generic.ICollection(Of System.CodeDom.CodeTypeMember)
  name.vb: ICollection(Of CodeTypeMember)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypemember
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypemember
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ImpliedConstructorStatements_System_CodeDom_CodeTypeMember_System_Boolean_
  name: ImpliedConstructorStatements
  nameWithType: CodeDomHelper.ImpliedConstructorStatements
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements
- uid: System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
  commentId: T:System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<CodeStatement>
  nameWithType: ICollection<CodeStatement>
  fullName: System.Collections.Generic.ICollection<System.CodeDom.CodeStatement>
  nameWithType.vb: ICollection(Of CodeStatement)
  fullName.vb: System.Collections.Generic.ICollection(Of System.CodeDom.CodeStatement)
  name.vb: ICollection(Of CodeStatement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ImpliedConstructorStatementsInternal_System_CodeDom_CodeTypeMember_System_Boolean_
  name: ImpliedConstructorStatementsInternal
  nameWithType: CodeDomHelper.ImpliedConstructorStatementsInternal
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal
- uid: NMF.CodeGen.CodeDomHelper.Shadows*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.Shadows
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_Shadows_System_CodeDom_CodeTypeMember_System_Boolean_
  name: Shadows
  nameWithType: CodeDomHelper.Shadows
  fullName: NMF.CodeGen.CodeDomHelper.Shadows
- uid: NMF.CodeGen.CodeDomHelper.GetReferenceForType*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetReferenceForType
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_GetReferenceForType_System_CodeDom_CodeTypeDeclaration_
  name: GetReferenceForType
  nameWithType: CodeDomHelper.GetReferenceForType
  fullName: NMF.CodeGen.CodeDomHelper.GetReferenceForType
- uid: System.CodeDom.CodeTypeDeclaration
  commentId: T:System.CodeDom.CodeTypeDeclaration
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypedeclaration
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
- uid: NMF.CodeGen.CodeDomHelper.GetTypeForReference*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetTypeForReference
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_GetTypeForReference_System_CodeDom_CodeTypeReference_
  name: GetTypeForReference
  nameWithType: CodeDomHelper.GetTypeForReference
  fullName: NMF.CodeGen.CodeDomHelper.GetTypeForReference
- uid: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_CreateTypeDeclarationWithReference_System_String_System_Boolean_
  name: CreateTypeDeclarationWithReference
  nameWithType: CodeDomHelper.CreateTypeDeclarationWithReference
  fullName: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference
- uid: NMF.CodeGen.CodeDomHelper.GetUserCollection*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetUserCollection
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_GetUserCollection__1_System_CodeDom_CodeObject_System_Object_System_Boolean_
  name: GetUserCollection
  nameWithType: CodeDomHelper.GetUserCollection
  fullName: NMF.CodeGen.CodeDomHelper.GetUserCollection
- uid: System.CodeDom.CodeObject
  commentId: T:System.CodeDom.CodeObject
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codeobject
  name: CodeObject
  nameWithType: CodeObject
  fullName: System.CodeDom.CodeObject
- uid: System.Collections.Generic.List{{TValue}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<TValue>
  nameWithType: List<TValue>
  fullName: System.Collections.Generic.List<TValue>
  nameWithType.vb: List(Of TValue)
  fullName.vb: System.Collections.Generic.List(Of TValue)
  name.vb: List(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_GetOrCreateUserItem__1_System_CodeDom_CodeObject_System_Object_System_Func___0__
  name: GetOrCreateUserItem
  nameWithType: CodeDomHelper.GetOrCreateUserItem
  fullName: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem
- uid: System.Func{{TValue}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TValue>
  nameWithType: Func<TValue>
  fullName: System.Func<TValue>
  nameWithType.vb: Func(Of TValue)
  fullName.vb: System.Func(Of TValue)
  name.vb: Func(Of TValue)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: NMF.CodeGen.CodeDomHelper.SetUserItem*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.SetUserItem
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_SetUserItem_System_CodeDom_CodeObject_System_Object_System_Object_
  name: SetUserItem
  nameWithType: CodeDomHelper.SetUserItem
  fullName: NMF.CodeGen.CodeDomHelper.SetUserItem
- uid: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreateRaiseMethod
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_CreateRaiseMethod_System_CodeDom_CodeMemberEvent_System_CodeDom_CodeTypeReference_
  name: CreateRaiseMethod
  nameWithType: CodeDomHelper.CreateRaiseMethod
  fullName: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod
- uid: System.CodeDom.CodeMemberEvent
  commentId: T:System.CodeDom.CodeMemberEvent
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codememberevent
  name: CodeMemberEvent
  nameWithType: CodeMemberEvent
  fullName: System.CodeDom.CodeMemberEvent
- uid: System.CodeDom.CodeMemberMethod
  commentId: T:System.CodeDom.CodeMemberMethod
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codemembermethod
  name: CodeMemberMethod
  nameWithType: CodeMemberMethod
  fullName: System.CodeDom.CodeMemberMethod
- uid: NMF.CodeGen.CodeDomHelper.ThrowException*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ThrowException
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ThrowException__1_System_CodeDom_CodeMemberMethod_System_Object___
  name: ThrowException
  nameWithType: CodeDomHelper.ThrowException
  fullName: NMF.CodeGen.CodeDomHelper.ThrowException
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.AddAttribute*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.AddAttribute
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_AddAttribute_System_CodeDom_CodeTypeMember_System_Type_System_Object___
  name: AddAttribute
  nameWithType: CodeDomHelper.AddAttribute
  fullName: NMF.CodeGen.CodeDomHelper.AddAttribute
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_CreatePrimitiveExpression_System_String_System_CodeDom_CodeTypeReference_System_Boolean_
  name: CreatePrimitiveExpression
  nameWithType: CodeDomHelper.CreatePrimitiveExpression
  fullName: NMF.CodeGen.CodeDomHelper.CreatePrimitiveExpression
- uid: System.CodeDom.CodeExpression
  commentId: T:System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codeexpression
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: NMF.CodeGen.CodeDomHelper.ValidateArgument*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ValidateArgument
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ValidateArgument_System_CodeDom_CodeMemberMethod_System_String_
  name: ValidateArgument
  nameWithType: CodeDomHelper.ValidateArgument
  fullName: NMF.CodeGen.CodeDomHelper.ValidateArgument
- uid: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_CreateOnChangedEventPattern_System_CodeDom_CodeMemberProperty_
  name: CreateOnChangedEventPattern
  nameWithType: CodeDomHelper.CreateOnChangedEventPattern
  fullName: NMF.CodeGen.CodeDomHelper.CreateOnChangedEventPattern
- uid: System.CodeDom.CodeMemberProperty
  commentId: T:System.CodeDom.CodeMemberProperty
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codememberproperty
  name: CodeMemberProperty
  nameWithType: CodeMemberProperty
  fullName: System.CodeDom.CodeMemberProperty
- uid: System.CodeDom.CodeStatement
  commentId: T:System.CodeDom.CodeStatement
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  name: CodeStatement
  nameWithType: CodeStatement
  fullName: System.CodeDom.CodeStatement
- uid: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_CreateOnChangingEventPattern_System_CodeDom_CodeMemberProperty_
  name: CreateOnChangingEventPattern
  nameWithType: CodeDomHelper.CreateOnChangingEventPattern
  fullName: NMF.CodeGen.CodeDomHelper.CreateOnChangingEventPattern
- uid: NMF.CodeGen.CodeDomHelper.CreateBackingField*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreateBackingField
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_CreateBackingField_System_CodeDom_CodeMemberProperty_
  name: CreateBackingField
  nameWithType: CodeDomHelper.CreateBackingField
  fullName: NMF.CodeGen.CodeDomHelper.CreateBackingField
- uid: System.CodeDom.CodeFieldReferenceExpression
  commentId: T:System.CodeDom.CodeFieldReferenceExpression
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codefieldreferenceexpression
  name: CodeFieldReferenceExpression
  nameWithType: CodeFieldReferenceExpression
  fullName: System.CodeDom.CodeFieldReferenceExpression
- uid: NMF.CodeGen.CodeDomHelper.GetBackingField*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetBackingField
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_GetBackingField_System_CodeDom_CodeMemberProperty_
  name: GetBackingField
  nameWithType: CodeDomHelper.GetBackingField
  fullName: NMF.CodeGen.CodeDomHelper.GetBackingField
- uid: NMF.CodeGen.CodeDomHelper.MarkCollectionProperty*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.MarkCollectionProperty
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_MarkCollectionProperty_System_CodeDom_CodeMemberProperty_
  name: MarkCollectionProperty
  nameWithType: CodeDomHelper.MarkCollectionProperty
  fullName: NMF.CodeGen.CodeDomHelper.MarkCollectionProperty
- uid: NMF.CodeGen.CodeDomHelper.ImplementGetter*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ImplementGetter
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ImplementGetter_System_CodeDom_CodeMemberProperty_System_CodeDom_CodeFieldReferenceExpression_
  name: ImplementGetter
  nameWithType: CodeDomHelper.ImplementGetter
  fullName: NMF.CodeGen.CodeDomHelper.ImplementGetter
- uid: NMF.CodeGen.CodeDomHelper.ImplementSetter*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ImplementSetter
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ImplementSetter_System_CodeDom_CodeMemberProperty_System_CodeDom_CodeFieldReferenceExpression_System_CodeDom_CodeStatement___
  name: ImplementSetter
  nameWithType: CodeDomHelper.ImplementSetter
  fullName: NMF.CodeGen.CodeDomHelper.ImplementSetter
- uid: System.CodeDom.CodeStatement[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  name: CodeStatement[]
  nameWithType: CodeStatement[]
  fullName: System.CodeDom.CodeStatement[]
  nameWithType.vb: CodeStatement()
  fullName.vb: System.CodeDom.CodeStatement()
  name.vb: CodeStatement()
  spec.csharp:
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement}
  commentId: T:System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<CodeStatement>
  nameWithType: IEnumerable<CodeStatement>
  fullName: System.Collections.Generic.IEnumerable<System.CodeDom.CodeStatement>
  nameWithType.vb: IEnumerable(Of CodeStatement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeStatement)
  name.vb: IEnumerable(Of CodeStatement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codestatement
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.ValidateArguments*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ValidateArguments
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ValidateArguments_System_CodeDom_CodeMemberMethod_
  name: ValidateArguments
  nameWithType: CodeDomHelper.ValidateArguments
  fullName: NMF.CodeGen.CodeDomHelper.ValidateArguments
- uid: NMF.CodeGen.CodeDomHelper.SplitCompileUnit*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.SplitCompileUnit
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_SplitCompileUnit_System_CodeDom_CodeCompileUnit_
  name: SplitCompileUnit
  nameWithType: CodeDomHelper.SplitCompileUnit
  fullName: NMF.CodeGen.CodeDomHelper.SplitCompileUnit
- uid: System.CodeDom.CodeCompileUnit
  commentId: T:System.CodeDom.CodeCompileUnit
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codecompileunit
  name: CodeCompileUnit
  nameWithType: CodeCompileUnit
  fullName: System.CodeDom.CodeCompileUnit
- uid: System.Collections.Generic.IDictionary{System.String,System.CodeDom.CodeCompileUnit}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.CodeDom.CodeCompileUnit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<string, CodeCompileUnit>
  nameWithType: IDictionary<string, CodeCompileUnit>
  fullName: System.Collections.Generic.IDictionary<string, System.CodeDom.CodeCompileUnit>
  nameWithType.vb: IDictionary(Of String, CodeCompileUnit)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, System.CodeDom.CodeCompileUnit)
  name.vb: IDictionary(Of String, CodeCompileUnit)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeCompileUnit
    name: CodeCompileUnit
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codecompileunit
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeCompileUnit
    name: CodeCompileUnit
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codecompileunit
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.WriteDocumentation*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.WriteDocumentation
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_WriteDocumentation_System_CodeDom_CodeTypeMember_System_String_System_String_
  name: WriteDocumentation
  nameWithType: CodeDomHelper.WriteDocumentation
  fullName: NMF.CodeGen.CodeDomHelper.WriteDocumentation
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<string, string>
  nameWithType: IDictionary<string, string>
  fullName: System.Collections.Generic.IDictionary<string, string>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.ApplyExpression*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ApplyExpression
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ApplyExpression__2_System_Linq_Expressions_Expression_System_Func___0___1___System_CodeDom_CodeExpression_
  name: ApplyExpression
  nameWithType: CodeDomHelper.ApplyExpression
  fullName: NMF.CodeGen.CodeDomHelper.ApplyExpression
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, TResult>>
  nameWithType: Expression<Func<T1, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult))
  name.vb: Expression(Of Func(Of T1, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, TResult>>
  nameWithType: Expression<Func<T1, T2, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult))
  name.vb: Expression(Of Func(Of T1, T2, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_GetOrCreateDefaultConstructor_System_CodeDom_CodeTypeDeclaration_System_Func_System_CodeDom_CodeConstructor__
  name: GetOrCreateDefaultConstructor
  nameWithType: CodeDomHelper.GetOrCreateDefaultConstructor
  fullName: NMF.CodeGen.CodeDomHelper.GetOrCreateDefaultConstructor
- uid: System.Func{System.CodeDom.CodeConstructor}
  commentId: T:System.Func{System.CodeDom.CodeConstructor}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<CodeConstructor>
  nameWithType: Func<CodeConstructor>
  fullName: System.Func<System.CodeDom.CodeConstructor>
  nameWithType.vb: Func(Of CodeConstructor)
  fullName.vb: System.Func(Of System.CodeDom.CodeConstructor)
  name.vb: Func(Of CodeConstructor)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.CodeDom.CodeConstructor
    name: CodeConstructor
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codeconstructor
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeConstructor
    name: CodeConstructor
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codeconstructor
  - name: )
- uid: System.CodeDom.CodeConstructor
  commentId: T:System.CodeDom.CodeConstructor
  parent: System.CodeDom
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codeconstructor
  name: CodeConstructor
  nameWithType: CodeConstructor
  fullName: System.CodeDom.CodeConstructor
- uid: NMF.CodeGen.CodeDomHelper.ToTypeReference*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ToTypeReference
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_ToTypeReference_System_Type_
  name: ToTypeReference
  nameWithType: CodeDomHelper.ToTypeReference
  fullName: NMF.CodeGen.CodeDomHelper.ToTypeReference
- uid: System.CodeDom.CodeTypeReference[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypereference
  name: CodeTypeReference[]
  nameWithType: CodeTypeReference[]
  fullName: System.CodeDom.CodeTypeReference[]
  nameWithType.vb: CodeTypeReference()
  fullName.vb: System.CodeDom.CodeTypeReference()
  name.vb: CodeTypeReference()
  spec.csharp:
  - uid: System.CodeDom.CodeTypeReference
    name: CodeTypeReference
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypereference
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.CodeDom.CodeTypeReference
    name: CodeTypeReference
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypereference
  - name: (
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.SetMerge*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.SetMerge
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_SetMerge_System_CodeDom_CodeTypeMember_System_Func_System_CodeDom_CodeTypeMember_System_CodeDom_CodeTypeMember__
  name: SetMerge
  nameWithType: CodeDomHelper.SetMerge
  fullName: NMF.CodeGen.CodeDomHelper.SetMerge
- uid: System.Func{System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember}
  commentId: T:System.Func{System.CodeDom.CodeTypeMember,System.CodeDom.CodeTypeMember}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<CodeTypeMember, CodeTypeMember>
  nameWithType: Func<CodeTypeMember, CodeTypeMember>
  fullName: System.Func<System.CodeDom.CodeTypeMember, System.CodeDom.CodeTypeMember>
  nameWithType.vb: Func(Of CodeTypeMember, CodeTypeMember)
  fullName.vb: System.Func(Of System.CodeDom.CodeTypeMember, System.CodeDom.CodeTypeMember)
  name.vb: Func(Of CodeTypeMember, CodeTypeMember)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypemember
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypemember
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypemember
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.codedom.codetypemember
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.CodeGen.CodeDomHelper.Merge*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.Merge
  href: NMF.CodeGen.CodeDomHelper.html#NMF_CodeGen_CodeDomHelper_Merge_System_CodeDom_CodeTypeMember_System_CodeDom_CodeTypeMember_
  name: Merge
  nameWithType: CodeDomHelper.Merge
  fullName: NMF.CodeGen.CodeDomHelper.Merge
