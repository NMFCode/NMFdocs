### YamlMime:ManagedReference
items:
- uid: NMF.CodeGen.CodeDomHelper
  commentId: T:NMF.CodeGen.CodeDomHelper
  id: CodeDomHelper
  parent: NMF.CodeGen
  children:
  - NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  - NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(System.String,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  - NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  - NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  - NMF.CodeGen.CodeDomHelper.GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  - NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  - NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  - NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  - NMF.CodeGen.CodeDomHelper.ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  langs:
  - csharp
  - vb
  name: CodeDomHelper
  nameWithType: CodeDomHelper
  fullName: NMF.CodeGen.CodeDomHelper
  type: Class
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CodeDomHelper
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 15
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nA helper class to generate code using CodeDOM\n"
  example: []
  syntax:
    content: public static class CodeDomHelper
    content.vb: Public Module CodeDomHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  id: Namespace(System.CodeDom.CodeTypeReference)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: Namespace(CodeTypeReference)
  nameWithType: CodeDomHelper.Namespace(CodeTypeReference)
  fullName: NMF.CodeGen.CodeDomHelper.Namespace(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Namespace
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 36
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the namespace associated with the given type reference\n"
  example: []
  syntax:
    content: public static string Namespace(this CodeTypeReference typeReference)
    parameters:
    - id: typeReference
      type: System.CodeDom.CodeTypeReference
      description: The type reference
    return:
      type: System.String
      description: The namespace associated with the type reference if any
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Namespace(typeReference As CodeTypeReference) As String
  overload: NMF.CodeGen.CodeDomHelper.Namespace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  commentId: M:NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  id: SetNamespace(System.CodeDom.CodeTypeReference,System.String)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: SetNamespace(CodeTypeReference, String)
  nameWithType: CodeDomHelper.SetNamespace(CodeTypeReference, String)
  fullName: NMF.CodeGen.CodeDomHelper.SetNamespace(System.CodeDom.CodeTypeReference, System.String)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetNamespace
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 46
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nAssociates the given type reference with the given namespace\n"
  example: []
  syntax:
    content: public static void SetNamespace(this CodeTypeReference typeReference, string necessaryNamespace)
    parameters:
    - id: typeReference
      type: System.CodeDom.CodeTypeReference
      description: The type reference
    - id: necessaryNamespace
      type: System.String
      description: The namespace to be associated with the given type reference
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetNamespace(typeReference As CodeTypeReference, necessaryNamespace As String)
  overload: NMF.CodeGen.CodeDomHelper.SetNamespace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  id: DependentTypes(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: DependentTypes(CodeTypeMember, Boolean)
  nameWithType: CodeDomHelper.DependentTypes(CodeTypeMember, Boolean)
  fullName: NMF.CodeGen.CodeDomHelper.DependentTypes(System.CodeDom.CodeTypeMember, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DependentTypes
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 57
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the dependent types of a code member\n"
  example: []
  syntax:
    content: public static ICollection<CodeTypeDeclaration> DependentTypes(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of dependent types should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeDeclaration}
      description: The collection of dependent types or null
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DependentTypes(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeTypeDeclaration)
  overload: NMF.CodeGen.CodeDomHelper.DependentTypes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  id: DependentMembers(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: DependentMembers(CodeTypeMember, Boolean)
  nameWithType: CodeDomHelper.DependentMembers(CodeTypeMember, Boolean)
  fullName: NMF.CodeGen.CodeDomHelper.DependentMembers(System.CodeDom.CodeTypeMember, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DependentMembers
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 68
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the dependent members of a code member\n"
  example: []
  syntax:
    content: public static ICollection<CodeTypeMember> DependentMembers(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of dependent members should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
      description: The collection of dependent members
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DependentMembers(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeTypeMember)
  overload: NMF.CodeGen.CodeDomHelper.DependentMembers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  id: ImpliedConstructorStatements(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ImpliedConstructorStatements(CodeTypeMember, Boolean)
  nameWithType: CodeDomHelper.ImpliedConstructorStatements(CodeTypeMember, Boolean)
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements(System.CodeDom.CodeTypeMember, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImpliedConstructorStatements
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 79
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the implied constructor statements of the given code member\n"
  example: []
  syntax:
    content: public static ICollection<CodeStatement> ImpliedConstructorStatements(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of implied statements should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
      description: The collection of implied constructor statements
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ImpliedConstructorStatements(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeStatement)
  overload: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  id: ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember,System.Boolean)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ImpliedConstructorStatementsInternal(CodeTypeMember, Boolean)
  nameWithType: CodeDomHelper.ImpliedConstructorStatementsInternal(CodeTypeMember, Boolean)
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal(System.CodeDom.CodeTypeMember, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImpliedConstructorStatementsInternal
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 90
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the implied default constructor statements of the given code member\n"
  example: []
  syntax:
    content: public static ICollection<CodeStatement> ImpliedConstructorStatementsInternal(CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection of implied constructor statements should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
      description: The collection of implied constructor statements
    content.vb: Public Shared Function ImpliedConstructorStatementsInternal(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeStatement)
  overload: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  id: Shadows(System.CodeDom.CodeTypeMember,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: Shadows(CodeTypeMember, Boolean)
  nameWithType: CodeDomHelper.Shadows(CodeTypeMember, Boolean)
  fullName: NMF.CodeGen.CodeDomHelper.Shadows(System.CodeDom.CodeTypeMember, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Shadows
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 101
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets a collection of members that are being shadowed by the given code member\n"
  example: []
  syntax:
    content: public static ICollection<CodeTypeMember> Shadows(this CodeTypeMember item, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeTypeMember
      description: The code member
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection should be created if not yet existing
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
      description: The collection of shadowed members or null
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Shadows(item As CodeTypeMember, createIfNecessary As Boolean) As ICollection(Of CodeTypeMember)
  overload: NMF.CodeGen.CodeDomHelper.Shadows*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  commentId: M:NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  id: GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetReferenceForType(CodeTypeDeclaration)
  nameWithType: CodeDomHelper.GetReferenceForType(CodeTypeDeclaration)
  fullName: NMF.CodeGen.CodeDomHelper.GetReferenceForType(System.CodeDom.CodeTypeDeclaration)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetReferenceForType
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 111
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the type reference associated with the given code type declaration\n"
  example: []
  syntax:
    content: public static CodeTypeReference GetReferenceForType(this CodeTypeDeclaration typeDeclaration)
    parameters:
    - id: typeDeclaration
      type: System.CodeDom.CodeTypeDeclaration
      description: The code type declaration
    return:
      type: System.CodeDom.CodeTypeReference
      description: The type reference associated with the given type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetReferenceForType(typeDeclaration As CodeTypeDeclaration) As CodeTypeReference
  overload: NMF.CodeGen.CodeDomHelper.GetReferenceForType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  id: GetTypeForReference(System.CodeDom.CodeTypeReference)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetTypeForReference(CodeTypeReference)
  nameWithType: CodeDomHelper.GetTypeForReference(CodeTypeReference)
  fullName: NMF.CodeGen.CodeDomHelper.GetTypeForReference(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetTypeForReference
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 121
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the type declaration associated with the given code type reference\n"
  example: []
  syntax:
    content: public static CodeTypeDeclaration GetTypeForReference(this CodeTypeReference typeReference)
    parameters:
    - id: typeReference
      type: System.CodeDom.CodeTypeReference
      description: The code type reference
    return:
      type: System.CodeDom.CodeTypeDeclaration
      description: The code type declaration associated with the given code type reference
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTypeForReference(typeReference As CodeTypeReference) As CodeTypeDeclaration
  overload: NMF.CodeGen.CodeDomHelper.GetTypeForReference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(System.String,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(System.String,System.Boolean)
  id: CreateTypeDeclarationWithReference(System.String,System.Boolean)
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateTypeDeclarationWithReference(String, Boolean)
  nameWithType: CodeDomHelper.CreateTypeDeclarationWithReference(String, Boolean)
  fullName: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateTypeDeclarationWithReference
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 132
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nCreates a type declaration with a reference attached to it\n"
  example: []
  syntax:
    content: public static CodeTypeDeclaration CreateTypeDeclarationWithReference(string name, bool autoAssignNamespace)
    parameters:
    - id: name
      type: System.String
      description: The initial name of the type declaration
    - id: autoAssignNamespace
      type: System.Boolean
      description: If true, the namespace is set in the user data such that the code generation helper can automatically deduct when the namespace can be omitted.
    return:
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated type declaration
    content.vb: Public Shared Function CreateTypeDeclarationWithReference(name As String, autoAssignNamespace As Boolean) As CodeTypeDeclaration
  overload: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  commentId: M:NMF.CodeGen.CodeDomHelper.GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  id: GetUserCollection``1(System.CodeDom.CodeObject,System.Object,System.Boolean)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetUserCollection<TValue>(CodeObject, Object, Boolean)
  nameWithType: CodeDomHelper.GetUserCollection<TValue>(CodeObject, Object, Boolean)
  fullName: NMF.CodeGen.CodeDomHelper.GetUserCollection<TValue>(System.CodeDom.CodeObject, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetUserCollection
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 157
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets the user collection associated with the given code object\n"
  example: []
  syntax:
    content: public static List<TValue> GetUserCollection<TValue>(this CodeObject item, object key, bool createIfNecessary)
    parameters:
    - id: item
      type: System.CodeDom.CodeObject
      description: The code object
    - id: key
      type: System.Object
      description: The user key for retrieving the collection
    - id: createIfNecessary
      type: System.Boolean
      description: True, if the collection should be created if not yet existing
    typeParameters:
    - id: TValue
      description: The type of the collection elements
    return:
      type: System.Collections.Generic.List{{TValue}}
      description: The user collection or null
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetUserCollection(Of TValue)(item As CodeObject, key As Object, createIfNecessary As Boolean) As List(Of TValue)
  overload: NMF.CodeGen.CodeDomHelper.GetUserCollection*
  nameWithType.vb: CodeDomHelper.GetUserCollection(Of TValue)(CodeObject, Object, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.CodeGen.CodeDomHelper.GetUserCollection(Of TValue)(System.CodeDom.CodeObject, System.Object, System.Boolean)
  name.vb: GetUserCollection(Of TValue)(CodeObject, Object, Boolean)
- uid: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  commentId: M:NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  id: GetOrCreateUserItem``1(System.CodeDom.CodeObject,System.Object,System.Func{``0})
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: GetOrCreateUserItem<TValue>(CodeObject, Object, Func<TValue>)
  nameWithType: CodeDomHelper.GetOrCreateUserItem<TValue>(CodeObject, Object, Func<TValue>)
  fullName: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem<TValue>(System.CodeDom.CodeObject, System.Object, System.Func<TValue>)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetOrCreateUserItem
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 172
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nGets or creates the user item with the specified key\n"
  example: []
  syntax:
    content: >-
      public static TValue GetOrCreateUserItem<TValue>(this CodeObject item, object key, Func<TValue> valueCreator = null)
          where TValue : class
    parameters:
    - id: item
      type: System.CodeDom.CodeObject
      description: The code object
    - id: key
      type: System.Object
      description: The key for the user item
    - id: valueCreator
      type: System.Func{{TValue}}
      description: A method that creates the default value if the user item does not yet exist or null, if no user item should be created
    typeParameters:
    - id: TValue
      description: The type of the user item
    return:
      type: '{TValue}'
      description: The user item with the specified key
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrCreateUserItem(Of TValue As Class)(item As CodeObject, key As Object, valueCreator As Func(Of TValue) = Nothing) As TValue
  overload: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem*
  nameWithType.vb: CodeDomHelper.GetOrCreateUserItem(Of TValue)(CodeObject, Object, Func(Of TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem(Of TValue)(System.CodeDom.CodeObject, System.Object, System.Func(Of TValue))
  name.vb: GetOrCreateUserItem(Of TValue)(CodeObject, Object, Func(Of TValue))
- uid: NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  commentId: M:NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  id: SetUserItem(System.CodeDom.CodeObject,System.Object,System.Object)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: SetUserItem(CodeObject, Object, Object)
  nameWithType: CodeDomHelper.SetUserItem(CodeObject, Object, Object)
  fullName: NMF.CodeGen.CodeDomHelper.SetUserItem(System.CodeDom.CodeObject, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetUserItem
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 202
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nOverrides the user item with the given key\n"
  example: []
  syntax:
    content: public static void SetUserItem(this CodeObject item, object key, object value)
    parameters:
    - id: item
      type: System.CodeDom.CodeObject
      description: The code object
    - id: key
      type: System.Object
      description: The user item key
    - id: value
      type: System.Object
      description: The value to set
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetUserItem(item As CodeObject, key As Object, value As Object)
  overload: NMF.CodeGen.CodeDomHelper.SetUserItem*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  commentId: M:NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  id: CreateRaiseMethod(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeReference)
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: CreateRaiseMethod(CodeMemberEvent, CodeTypeReference)
  nameWithType: CodeDomHelper.CreateRaiseMethod(CodeMemberEvent, CodeTypeReference)
  fullName: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod(System.CodeDom.CodeMemberEvent, System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateRaiseMethod
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 222
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nCreates a method that raises the given event\n"
  example: []
  syntax:
    content: public static CodeMemberMethod CreateRaiseMethod(this CodeMemberEvent memberEvent, CodeTypeReference eventDataType)
    parameters:
    - id: memberEvent
      type: System.CodeDom.CodeMemberEvent
      description: The event that is to be raised
    - id: eventDataType
      type: System.CodeDom.CodeTypeReference
      description: The event arguments type
    return:
      type: System.CodeDom.CodeMemberMethod
      description: A code method that raises the event
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateRaiseMethod(memberEvent As CodeMemberEvent, eventDataType As CodeTypeReference) As CodeMemberMethod
  overload: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.CodeGen.CodeDomHelper.ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  commentId: M:NMF.CodeGen.CodeDomHelper.ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  id: ThrowException``1(System.CodeDom.CodeMemberMethod,System.Object[])
  isExtensionMethod: true
  parent: NMF.CodeGen.CodeDomHelper
  langs:
  - csharp
  - vb
  name: ThrowException<TException>(CodeMemberMethod, Object[])
  nameWithType: CodeDomHelper.ThrowException<TException>(CodeMemberMethod, Object[])
  fullName: NMF.CodeGen.CodeDomHelper.ThrowException<TException>(System.CodeDom.CodeMemberMethod, System.Object[])
  type: Method
  source:
    remote:
      path: Transformations/CodeGen/CodeDomHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThrowException
    path: src/Transformations/CodeGen/CodeDomHelper.cs
    startLine: 260
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nAdds a statement to throw an exception of the given type\n"
  example: []
  syntax:
    content: public static void ThrowException<TException>(this CodeMemberMethod method, params object[] arguments)
    parameters:
    - id: method
      type: System.CodeDom.CodeMemberMethod
      description: The method that should throw the exception
    - id: arguments
      type: System.Object[]
      description: The arguments that should be passed to the constructor of the exception
    typeParameters:
    - id: TException
      description: The type of the exception
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ThrowException(Of TException)(method As CodeMemberMethod, ParamArray arguments As Object())
  overload: NMF.CodeGen.CodeDomHelper.ThrowException*
  nameWithType.vb: CodeDomHelper.ThrowException(Of TException)(CodeMemberMethod, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.CodeGen.CodeDomHelper.ThrowException(Of TException)(System.CodeDom.CodeMemberMethod, System.Object())
  name.vb: ThrowException(Of TException)(CodeMemberMethod, Object())
references:
- uid: NMF.CodeGen
  commentId: N:NMF.CodeGen
  name: NMF.CodeGen
  nameWithType: NMF.CodeGen
  fullName: NMF.CodeGen
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.CodeGen.CodeDomHelper.Namespace*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.Namespace
  name: Namespace
  nameWithType: CodeDomHelper.Namespace
  fullName: NMF.CodeGen.CodeDomHelper.Namespace
- uid: System.CodeDom.CodeTypeReference
  commentId: T:System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
- uid: NMF.CodeGen.CodeDomHelper.SetNamespace*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.SetNamespace
  name: SetNamespace
  nameWithType: CodeDomHelper.SetNamespace
  fullName: NMF.CodeGen.CodeDomHelper.SetNamespace
- uid: NMF.CodeGen.CodeDomHelper.DependentTypes*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.DependentTypes
  name: DependentTypes
  nameWithType: CodeDomHelper.DependentTypes
  fullName: NMF.CodeGen.CodeDomHelper.DependentTypes
- uid: System.CodeDom.CodeTypeMember
  commentId: T:System.CodeDom.CodeTypeMember
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeMember
  nameWithType: CodeTypeMember
  fullName: System.CodeDom.CodeTypeMember
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeDeclaration}
  commentId: T:System.Collections.Generic.ICollection{System.CodeDom.CodeTypeDeclaration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<CodeTypeDeclaration>
  nameWithType: ICollection<CodeTypeDeclaration>
  fullName: System.Collections.Generic.ICollection<System.CodeDom.CodeTypeDeclaration>
  nameWithType.vb: ICollection(Of CodeTypeDeclaration)
  fullName.vb: System.Collections.Generic.ICollection(Of System.CodeDom.CodeTypeDeclaration)
  name.vb: ICollection(Of CodeTypeDeclaration)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    nameWithType: CodeTypeDeclaration
    fullName: System.CodeDom.CodeTypeDeclaration
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    nameWithType: CodeTypeDeclaration
    fullName: System.CodeDom.CodeTypeDeclaration
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.CodeGen.CodeDomHelper.DependentMembers*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.DependentMembers
  name: DependentMembers
  nameWithType: CodeDomHelper.DependentMembers
  fullName: NMF.CodeGen.CodeDomHelper.DependentMembers
- uid: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
  commentId: T:System.Collections.Generic.ICollection{System.CodeDom.CodeTypeMember}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<CodeTypeMember>
  nameWithType: ICollection<CodeTypeMember>
  fullName: System.Collections.Generic.ICollection<System.CodeDom.CodeTypeMember>
  nameWithType.vb: ICollection(Of CodeTypeMember)
  fullName.vb: System.Collections.Generic.ICollection(Of System.CodeDom.CodeTypeMember)
  name.vb: ICollection(Of CodeTypeMember)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    nameWithType: CodeTypeMember
    fullName: System.CodeDom.CodeTypeMember
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeTypeMember
    name: CodeTypeMember
    nameWithType: CodeTypeMember
    fullName: System.CodeDom.CodeTypeMember
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements
  name: ImpliedConstructorStatements
  nameWithType: CodeDomHelper.ImpliedConstructorStatements
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatements
- uid: System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
  commentId: T:System.Collections.Generic.ICollection{System.CodeDom.CodeStatement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<CodeStatement>
  nameWithType: ICollection<CodeStatement>
  fullName: System.Collections.Generic.ICollection<System.CodeDom.CodeStatement>
  nameWithType.vb: ICollection(Of CodeStatement)
  fullName.vb: System.Collections.Generic.ICollection(Of System.CodeDom.CodeStatement)
  name.vb: ICollection(Of CodeStatement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    nameWithType: CodeStatement
    fullName: System.CodeDom.CodeStatement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.CodeDom.CodeStatement
    name: CodeStatement
    nameWithType: CodeStatement
    fullName: System.CodeDom.CodeStatement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal
  name: ImpliedConstructorStatementsInternal
  nameWithType: CodeDomHelper.ImpliedConstructorStatementsInternal
  fullName: NMF.CodeGen.CodeDomHelper.ImpliedConstructorStatementsInternal
- uid: NMF.CodeGen.CodeDomHelper.Shadows*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.Shadows
  name: Shadows
  nameWithType: CodeDomHelper.Shadows
  fullName: NMF.CodeGen.CodeDomHelper.Shadows
- uid: NMF.CodeGen.CodeDomHelper.GetReferenceForType*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetReferenceForType
  name: GetReferenceForType
  nameWithType: CodeDomHelper.GetReferenceForType
  fullName: NMF.CodeGen.CodeDomHelper.GetReferenceForType
- uid: System.CodeDom.CodeTypeDeclaration
  commentId: T:System.CodeDom.CodeTypeDeclaration
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
- uid: NMF.CodeGen.CodeDomHelper.GetTypeForReference*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetTypeForReference
  name: GetTypeForReference
  nameWithType: CodeDomHelper.GetTypeForReference
  fullName: NMF.CodeGen.CodeDomHelper.GetTypeForReference
- uid: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference
  name: CreateTypeDeclarationWithReference
  nameWithType: CodeDomHelper.CreateTypeDeclarationWithReference
  fullName: NMF.CodeGen.CodeDomHelper.CreateTypeDeclarationWithReference
- uid: NMF.CodeGen.CodeDomHelper.GetUserCollection*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetUserCollection
  name: GetUserCollection
  nameWithType: CodeDomHelper.GetUserCollection
  fullName: NMF.CodeGen.CodeDomHelper.GetUserCollection
- uid: System.CodeDom.CodeObject
  commentId: T:System.CodeDom.CodeObject
  parent: System.CodeDom
  isExternal: true
  name: CodeObject
  nameWithType: CodeObject
  fullName: System.CodeDom.CodeObject
- uid: System.Collections.Generic.List{{TValue}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TValue>
  nameWithType: List<TValue>
  fullName: System.Collections.Generic.List<TValue>
  nameWithType.vb: List(Of TValue)
  fullName.vb: System.Collections.Generic.List(Of TValue)
  name.vb: List(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem
  name: GetOrCreateUserItem
  nameWithType: CodeDomHelper.GetOrCreateUserItem
  fullName: NMF.CodeGen.CodeDomHelper.GetOrCreateUserItem
- uid: System.Func{{TValue}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TValue>
  nameWithType: Func<TValue>
  fullName: System.Func<TValue>
  nameWithType.vb: Func(Of TValue)
  fullName.vb: System.Func(Of TValue)
  name.vb: Func(Of TValue)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: NMF.CodeGen.CodeDomHelper.SetUserItem*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.SetUserItem
  name: SetUserItem
  nameWithType: CodeDomHelper.SetUserItem
  fullName: NMF.CodeGen.CodeDomHelper.SetUserItem
- uid: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.CreateRaiseMethod
  name: CreateRaiseMethod
  nameWithType: CodeDomHelper.CreateRaiseMethod
  fullName: NMF.CodeGen.CodeDomHelper.CreateRaiseMethod
- uid: System.CodeDom.CodeMemberEvent
  commentId: T:System.CodeDom.CodeMemberEvent
  parent: System.CodeDom
  isExternal: true
  name: CodeMemberEvent
  nameWithType: CodeMemberEvent
  fullName: System.CodeDom.CodeMemberEvent
- uid: System.CodeDom.CodeMemberMethod
  commentId: T:System.CodeDom.CodeMemberMethod
  parent: System.CodeDom
  isExternal: true
  name: CodeMemberMethod
  nameWithType: CodeMemberMethod
  fullName: System.CodeDom.CodeMemberMethod
- uid: NMF.CodeGen.CodeDomHelper.ThrowException*
  commentId: Overload:NMF.CodeGen.CodeDomHelper.ThrowException
  name: ThrowException
  nameWithType: CodeDomHelper.ThrowException
  fullName: NMF.CodeGen.CodeDomHelper.ThrowException
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
