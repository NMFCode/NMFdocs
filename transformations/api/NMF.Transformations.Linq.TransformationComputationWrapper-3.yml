### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
  commentId: T:NMF.Transformations.Linq.TransformationComputationWrapper`3
  id: TransformationComputationWrapper`3
  parent: NMF.Transformations.Linq
  children:
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.#ctor(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.Computation
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals(System.Object)
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.GetHashCode
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.Input1
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.Input2
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.Output
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Equality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  - NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Inequality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  langs:
  - csharp
  - vb
  name: TransformationComputationWrapper<TIn1, TIn2, TOut>
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>
  type: Struct
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationComputationWrapper
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 133
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Wraps computations from the type TIn to the type TOut
  example: []
  syntax:
    content: 'public struct TransformationComputationWrapper<TIn1, TIn2, TOut> : IEquatable<TransformationComputationWrapper<TIn1, TIn2, TOut>> where TIn1 : class where TIn2 : class where TOut : class'
    typeParameters:
    - id: TIn1
      description: The first input type for the wrapped computation
    - id: TIn2
      description: The second input type for the wrapped computation
    - id: TOut
      description: The output type for the wrapped computations
    content.vb: Public Structure TransformationComputationWrapper(Of TIn1 As Class, TIn2 As Class, TOut As Class) Implements IEquatable(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  implements:
  - System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  name.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut)
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.#ctor(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Linq.TransformationComputationWrapper`3.#ctor(NMF.Transformations.Core.Computation)
  id: '#ctor(NMF.Transformations.Core.Computation)'
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: TransformationComputationWrapper(Computation)
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.TransformationComputationWrapper(Computation)
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.TransformationComputationWrapper(NMF.Transformations.Core.Computation)
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 144
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Wraps the given computation into a typed wrapping structure
  example: []
  syntax:
    content: public TransformationComputationWrapper(Computation inner)
    parameters:
    - id: inner
      type: NMF.Transformations.Core.Computation
      description: The computation that is to be wrapped
    content.vb: Public Sub New(inner As Computation)
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.#ctor*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).New(Computation)
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).New(NMF.Transformations.Core.Computation)
  name.vb: New(Computation)
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Input1
  commentId: P:NMF.Transformations.Linq.TransformationComputationWrapper`3.Input1
  id: Input1
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: Input1
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Input1
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Input1
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Input1
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 152
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets the first input of the represented computation
  example: []
  syntax:
    content: public TIn1 Input1 { get; }
    parameters: []
    return:
      type: '{TIn1}'
    content.vb: Public ReadOnly Property Input1 As TIn1
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.Input1*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input1
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input1
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Input2
  commentId: P:NMF.Transformations.Linq.TransformationComputationWrapper`3.Input2
  id: Input2
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: Input2
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Input2
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Input2
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Input2
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 170
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets the second input of the represented computation
  example: []
  syntax:
    content: public TIn2 Input2 { get; }
    parameters: []
    return:
      type: '{TIn2}'
    content.vb: Public ReadOnly Property Input2 As TIn2
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.Input2*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input2
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input2
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Output
  commentId: P:NMF.Transformations.Linq.TransformationComputationWrapper`3.Output
  id: Output
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: Output
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Output
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Output
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Output
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 188
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets the output of the represented computation
  example: []
  syntax:
    content: public TOut Output { get; }
    parameters: []
    return:
      type: '{TOut}'
    content.vb: Public ReadOnly Property Output As TOut
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.Output*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Output
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Output
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Computation
  commentId: P:NMF.Transformations.Linq.TransformationComputationWrapper`3.Computation
  id: Computation
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: Computation
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Computation
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Computation
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Computation
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 206
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets the underlying computation
  example: []
  syntax:
    content: public Computation Computation { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.Computation
    content.vb: Public ReadOnly Property Computation As Computation
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.Computation*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Computation
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Computation
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  commentId: M:NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  id: Equals(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: Equals(TransformationComputationWrapper<TIn1, TIn2, TOut>)
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Equals(TransformationComputationWrapper<TIn1, TIn2, TOut>)
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Equals(NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 216
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets a value indicating whether the current transformation computation wrapper and the provided instance should be treated as equal
  example: []
  syntax:
    content: public bool Equals(TransformationComputationWrapper<TIn1, TIn2, TOut> other)
    parameters:
    - id: other
      type: NMF.Transformations.Linq.TransformationComputationWrapper`3
      description: The other instance
    return:
      type: System.Boolean
      description: True, if the current object represents the same value as the given parameter, otherwise false
    content.vb: Public Function Equals(other As TransformationComputationWrapper(Of TIn1, TIn2, TOut)) As Boolean
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals*
  implements:
  - System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}})
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Equals(TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Equals(NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  name.vb: Equals(TransformationComputationWrapper(Of TIn1, TIn2, TOut))
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals(System.Object)
  commentId: M:NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals(System.Object)
  id: Equals(System.Object)
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Equals(object)
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Equals(object)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 226
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets a value indicating whether the current transformation computation wrapper and the provided instance should be treated as equal
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The other instance
    return:
      type: System.Boolean
      description: True, if the current object represents the same value as the given parameter, otherwise false
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Equals(Object)
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Equals(Object)
  name.vb: Equals(Object)
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.GetHashCode
  commentId: M:NMF.Transformations.Linq.TransformationComputationWrapper`3.GetHashCode
  id: GetHashCode
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.GetHashCode()
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.GetHashCode()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetHashCode
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 237
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets a hash code representation of the current value
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code representation of the value represented by the current instance
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.GetHashCode*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).GetHashCode()
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).GetHashCode()
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Equality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  commentId: M:NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Equality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  id: op_Equality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: operator ==(TransformationComputationWrapper<TIn1, TIn2, TOut>, TransformationComputationWrapper<TIn1, TIn2, TOut>)
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.operator ==(TransformationComputationWrapper<TIn1, TIn2, TOut>, TransformationComputationWrapper<TIn1, TIn2, TOut>)
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.operator ==(NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>, NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>)
  type: Operator
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: op_Equality
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 248
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets a value indicating whether the two instances of the transformationwrapper should be as equal
  example: []
  syntax:
    content: public static bool operator ==(TransformationComputationWrapper<TIn1, TIn2, TOut> left, TransformationComputationWrapper<TIn1, TIn2, TOut> right)
    parameters:
    - id: left
      type: NMF.Transformations.Linq.TransformationComputationWrapper`3
      description: The first computation wrapper
    - id: right
      type: NMF.Transformations.Linq.TransformationComputationWrapper`3
      description: The second computation wrapper
    return:
      type: System.Boolean
      description: True, if both wrappers represent the same computation, otherwise false
    content.vb: Public Shared Operator =(left As TransformationComputationWrapper(Of TIn1, TIn2, TOut), right As TransformationComputationWrapper(Of TIn1, TIn2, TOut)) As Boolean
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Equality*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).=(TransformationComputationWrapper(Of TIn1, TIn2, TOut), TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).=(NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut), NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  name.vb: =(TransformationComputationWrapper(Of TIn1, TIn2, TOut), TransformationComputationWrapper(Of TIn1, TIn2, TOut))
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Inequality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  commentId: M:NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Inequality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  id: op_Inequality(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2},NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  parent: NMF.Transformations.Linq.TransformationComputationWrapper`3
  langs:
  - csharp
  - vb
  name: operator !=(TransformationComputationWrapper<TIn1, TIn2, TOut>, TransformationComputationWrapper<TIn1, TIn2, TOut>)
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.operator !=(TransformationComputationWrapper<TIn1, TIn2, TOut>, TransformationComputationWrapper<TIn1, TIn2, TOut>)
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.operator !=(NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>, NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>)
  type: Operator
  source:
    remote:
      path: Transformations/Transformations/Linq/ComputationWrapper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: op_Inequality
    path: src/Transformations/Transformations/Linq/ComputationWrapper.cs
    startLine: 259
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets a value indicating whether the two instances of the transformationwrapper should be as not equal
  example: []
  syntax:
    content: public static bool operator !=(TransformationComputationWrapper<TIn1, TIn2, TOut> left, TransformationComputationWrapper<TIn1, TIn2, TOut> right)
    parameters:
    - id: left
      type: NMF.Transformations.Linq.TransformationComputationWrapper`3
      description: The first computation wrapper
    - id: right
      type: NMF.Transformations.Linq.TransformationComputationWrapper`3
      description: The second computation wrapper
    return:
      type: System.Boolean
      description: False, if both wrappers represent the same computation, otherwise true
    content.vb: Public Shared Operator <>(left As TransformationComputationWrapper(Of TIn1, TIn2, TOut), right As TransformationComputationWrapper(Of TIn1, TIn2, TOut)) As Boolean
  overload: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Inequality*
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).<>(TransformationComputationWrapper(Of TIn1, TIn2, TOut), TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).<>(NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut), NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  name.vb: <>(TransformationComputationWrapper(Of TIn1, TIn2, TOut), TransformationComputationWrapper(Of TIn1, TIn2, TOut))
references:
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  href: NMF.html
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
    href: NMF.Transformations.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
    href: NMF.Transformations.Linq.html
- uid: System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}
  commentId: T:System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<TransformationComputationWrapper<TIn1, TIn2, TOut>>
  nameWithType: IEquatable<TransformationComputationWrapper<TIn1, TIn2, TOut>>
  fullName: System.IEquatable<NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>>
  nameWithType.vb: IEquatable(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  fullName.vb: System.IEquatable(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  name.vb: IEquatable(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.#ctor*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.#ctor
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3__ctor_NMF_Transformations_Core_Computation_
  name: TransformationComputationWrapper
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.TransformationComputationWrapper
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.TransformationComputationWrapper
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).New
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).New
  name.vb: New
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.Computation.html
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  href: NMF.html
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Input1*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.Input1
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_Input1
  name: Input1
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Input1
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Input1
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input1
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input1
- uid: '{TIn1}'
  commentId: '!:TIn1'
  definition: TIn1
  name: TIn1
  nameWithType: TIn1
  fullName: TIn1
- uid: TIn1
  name: TIn1
  nameWithType: TIn1
  fullName: TIn1
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Input2*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.Input2
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_Input2
  name: Input2
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Input2
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Input2
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input2
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Input2
- uid: '{TIn2}'
  commentId: '!:TIn2'
  definition: TIn2
  name: TIn2
  nameWithType: TIn2
  fullName: TIn2
- uid: TIn2
  name: TIn2
  nameWithType: TIn2
  fullName: TIn2
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Output*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.Output
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_Output
  name: Output
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Output
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Output
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Output
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Output
- uid: '{TOut}'
  commentId: '!:TOut'
  definition: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Computation*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.Computation
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_Computation
  name: Computation
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Computation
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Computation
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Computation
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Computation
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.Equals
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_Equals_NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__
  name: Equals
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.Equals
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.Equals
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).Equals
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).Equals
- uid: System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}})
  commentId: M:System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
  parent: System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(TransformationComputationWrapper<TIn1, TIn2, TOut>)
  nameWithType: IEquatable<TransformationComputationWrapper<TIn1, TIn2, TOut>>.Equals(TransformationComputationWrapper<TIn1, TIn2, TOut>)
  fullName: System.IEquatable<NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>>.Equals(NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>)
  nameWithType.vb: IEquatable(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut)).Equals(TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  fullName.vb: System.IEquatable(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut)).Equals(NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  name.vb: Equals(TransformationComputationWrapper(Of TIn1, TIn2, TOut))
  spec.csharp:
  - uid: System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.IEquatable{NMF.Transformations.Linq.TransformationComputationWrapper`3}.Equals(NMF.Transformations.Linq.TransformationComputationWrapper{`0,`1,`2})
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: )
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
  commentId: T:NMF.Transformations.Linq.TransformationComputationWrapper`3
  parent: NMF.Transformations.Linq
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  name: TransformationComputationWrapper<TIn1, TIn2, TOut>
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  name.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.GetHashCode*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.GetHashCode
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_GetHashCode
  name: GetHashCode
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.GetHashCode
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.GetHashCode
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).GetHashCode
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Equality*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Equality
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_op_Equality_NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__
  name: operator ==
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.operator ==
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.operator ==
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).=
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Equality*
    name: ==
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_op_Equality_NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Inequality*
  commentId: Overload:NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Inequality
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_op_Inequality_NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__
  name: operator !=
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>.operator !=
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>.operator !=
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut).<>
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut).<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3.op_Inequality*
    name: '!='
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html#NMF_Transformations_Linq_TransformationComputationWrapper_3_op_Inequality_NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__NMF_Transformations_Linq_TransformationComputationWrapper__0__1__2__
