### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Core.ITransformationRuleDependency
  commentId: T:NMF.Transformations.Core.ITransformationRuleDependency
  id: ITransformationRuleDependency
  parent: NMF.Transformations.Core
  children:
  - NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  - NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  langs:
  - csharp
  - vb
  name: ITransformationRuleDependency
  nameWithType: ITransformationRuleDependency
  fullName: NMF.Transformations.Core.ITransformationRuleDependency
  type: Interface
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ITransformationRuleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ITransformationRuleDependency
    path: src/Transformations/Transformations.Core/Core/ITransformationRuleDependency.cs
    startLine: 10
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nRepresents an interface for dependencies for transformation rules\n"
  example: []
  syntax:
    content: public interface ITransformationRuleDependency
    content.vb: Public Interface ITransformationRuleDependency
- uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  id: HandleDependency(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.ITransformationRuleDependency
  langs:
  - csharp
  - vb
  name: HandleDependency(Computation)
  nameWithType: ITransformationRuleDependency.HandleDependency(Computation)
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ITransformationRuleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HandleDependency
    path: src/Transformations/Transformations.Core/Core/ITransformationRuleDependency.cs
    startLine: 16
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nCalls the transformation dependency for the given computation\n"
  example: []
  syntax:
    content: void HandleDependency(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation that this dependency is to be called
    content.vb: Sub HandleDependency(computation As Computation)
  overload: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency*
- uid: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  commentId: P:NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  id: ExecuteBefore
  parent: NMF.Transformations.Core.ITransformationRuleDependency
  langs:
  - csharp
  - vb
  name: ExecuteBefore
  nameWithType: ITransformationRuleDependency.ExecuteBefore
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ITransformationRuleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecuteBefore
    path: src/Transformations/Transformations.Core/Core/ITransformationRuleDependency.cs
    startLine: 21
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets a value indicating whether the dependency should be executed before or after the computation is added to the computation order\n"
  example: []
  syntax:
    content: bool ExecuteBefore { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ExecuteBefore As Boolean
  overload: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore*
references:
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency*
  commentId: Overload:NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency
  name: HandleDependency
  nameWithType: ITransformationRuleDependency.HandleDependency
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore*
  commentId: Overload:NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  name: ExecuteBefore
  nameWithType: ITransformationRuleDependency.ExecuteBefore
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
