### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.ReflectiveTransformation
  commentId: T:NMF.Transformations.ReflectiveTransformation
  id: ReflectiveTransformation
  parent: NMF.Transformations
  children:
  - NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  - NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  - NMF.Transformations.ReflectiveTransformation.CreateRules
  - NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  - NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  - NMF.Transformations.ReflectiveTransformation.RegisterRules
  - NMF.Transformations.ReflectiveTransformation.Rule``1
  langs:
  - csharp
  - vb
  name: ReflectiveTransformation
  nameWithType: ReflectiveTransformation
  fullName: NMF.Transformations.ReflectiveTransformation
  type: Class
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReflectiveTransformation
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 14
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nThis is a base class of a transformation that just creates an instance of each nested class, if it is not abstract and is a transformation rule\n"
  example: []
  syntax:
    content: 'public abstract class ReflectiveTransformation : Transformation'
    content.vb: Public MustInherit Class ReflectiveTransformation Inherits Transformation
  inheritance:
  - System.Object
  - NMF.Transformations.Core.Transformation
  derivedClasses:
  - NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation
  - NMF.Models.Meta.Meta2ClassesTransformation
  - NMF.Transformations.ModelCheckTransformation
  inheritedMembers:
  - NMF.Transformations.Core.Transformation.Patterns
  - NMF.Transformations.Core.Transformation.IsInitialized
  - NMF.Transformations.Core.Transformation.IsRulesRegistered
  - NMF.Transformations.Core.Transformation.CreateRulesInternal
  - NMF.Transformations.Core.Transformation.CreateContext
  - NMF.Transformations.Core.Transformation.Initialize
  - NMF.Transformations.Core.Transformation.MaxOutputDelay
  - NMF.Transformations.Core.Transformation.MaxTransformationDelay
  - NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  - NMF.Transformations.Core.Transformation.Rules
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Transformations.ReflectiveTransformation.CreateRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateRules
  id: CreateRules
  parent: NMF.Transformations.ReflectiveTransformation
  langs:
  - csharp
  - vb
  name: CreateRules()
  nameWithType: ReflectiveTransformation.CreateRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateRules()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateRules
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 23
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates all transformation rules of this transformation\n"
  remarks: This method is called during Initialization. The output IEnumerable-collection is saved into a list.
  example: []
  syntax:
    content: protected override sealed IEnumerable<GeneralTransformationRule> CreateRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of transformation rules
    content.vb: Protected NotOverridable Overrides Function CreateRules() As IEnumerable(Of GeneralTransformationRule)
  overridden: NMF.Transformations.Core.Transformation.CreateRules
  overload: NMF.Transformations.ReflectiveTransformation.CreateRules*
- uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  commentId: M:NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  id: GetRuleForRuleType(System.Type)
  parent: NMF.Transformations.ReflectiveTransformation
  langs:
  - csharp
  - vb
  name: GetRuleForRuleType(Type)
  nameWithType: ReflectiveTransformation.GetRuleForRuleType(Type)
  fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRuleForRuleType
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 47
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets the rule with the specified type (exact match)\n"
  remarks: This method assumes there is only one transformation rule per type
  example: []
  syntax:
    content: public override GeneralTransformationRule GetRuleForRuleType(Type transformationRule)
    parameters:
    - id: transformationRule
      type: System.Type
      description: The type of the transformation rule
    return:
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule with this type or null, if there is none
    content.vb: Public Overrides Function GetRuleForRuleType(transformationRule As Type) As GeneralTransformationRule
  overridden: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  overload: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType*
- uid: NMF.Transformations.ReflectiveTransformation.Rule``1
  commentId: M:NMF.Transformations.ReflectiveTransformation.Rule``1
  id: Rule``1
  parent: NMF.Transformations.ReflectiveTransformation
  langs:
  - csharp
  - vb
  name: Rule<TRule>()
  nameWithType: ReflectiveTransformation.Rule<TRule>()
  fullName: NMF.Transformations.ReflectiveTransformation.Rule<TRule>()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Rule
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 66
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets the transformation rule instance of the given rule type within the given transformation\n"
  example: []
  syntax:
    content: 'public TRule Rule<TRule>() where TRule : GeneralTransformationRule'
    typeParameters:
    - id: TRule
      description: The type of the desired transformation rule
    return:
      type: '{TRule}'
      description: The transformation rule
    content.vb: Public Function Rule(Of TRule As GeneralTransformationRule)() As TRule
  overload: NMF.Transformations.ReflectiveTransformation.Rule*
  nameWithType.vb: ReflectiveTransformation.Rule(Of TRule)()
  fullName.vb: NMF.Transformations.ReflectiveTransformation.Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
- uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  commentId: M:NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  id: GetRulesForRuleType(System.Type)
  parent: NMF.Transformations.ReflectiveTransformation
  langs:
  - csharp
  - vb
  name: GetRulesForRuleType(Type)
  nameWithType: ReflectiveTransformation.GetRulesForRuleType(Type)
  fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRulesForRuleType
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 78
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets all rules with the specified type (exact match)\n"
  remarks: This method assumes there is only one transformation rule per type
  example: []
  syntax:
    content: public override IEnumerable<GeneralTransformationRule> GetRulesForRuleType(Type transformationRule)
    parameters:
    - id: transformationRule
      type: System.Type
      description: The type of the transformation rules
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of all rules with this type
    content.vb: Public Overrides Function GetRulesForRuleType(transformationRule As Type) As IEnumerable(Of GeneralTransformationRule)
  overridden: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  overload: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType*
- uid: NMF.Transformations.ReflectiveTransformation.RegisterRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.RegisterRules
  id: RegisterRules
  parent: NMF.Transformations.ReflectiveTransformation
  langs:
  - csharp
  - vb
  name: RegisterRules()
  nameWithType: ReflectiveTransformation.RegisterRules()
  fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterRules
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 87
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRegisters the rules of this transformation\n"
  example: []
  syntax:
    content: public override void RegisterRules()
    content.vb: Public Overrides Sub RegisterRules()
  overridden: NMF.Transformations.Core.Transformation.RegisterRules
  overload: NMF.Transformations.ReflectiveTransformation.RegisterRules*
- uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  id: CreateCustomRules
  parent: NMF.Transformations.ReflectiveTransformation
  langs:
  - csharp
  - vb
  name: CreateCustomRules()
  nameWithType: ReflectiveTransformation.CreateCustomRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateCustomRules
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 105
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates the transformation rules that are no public nested classes (cannot be overridenn by reflected rules)\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<GeneralTransformationRule> CreateCustomRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of transformation rules
    content.vb: Protected Overridable Function CreateCustomRules() As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.ReflectiveTransformation.CreateCustomRules*
- uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  id: CreateDefaultRules
  parent: NMF.Transformations.ReflectiveTransformation
  langs:
  - csharp
  - vb
  name: CreateDefaultRules()
  nameWithType: ReflectiveTransformation.CreateDefaultRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/ReflectiveTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateDefaultRules
    path: src/Transformations/Transformations/NTL/ReflectiveTransformation.cs
    startLine: 114
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates the default transformation rules (can be overridden by reflected rules)\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<GeneralTransformationRule> CreateDefaultRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of transformation rules
    content.vb: Protected Overridable Function CreateDefaultRules() As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules*
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  parent: NMF.Transformations.Core
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
- uid: NMF.Transformations.Core.Transformation.Patterns
  commentId: P:NMF.Transformations.Core.Transformation.Patterns
  parent: NMF.Transformations.Core.Transformation
  name: Patterns
  nameWithType: Transformation.Patterns
  fullName: NMF.Transformations.Core.Transformation.Patterns
- uid: NMF.Transformations.Core.Transformation.IsInitialized
  commentId: P:NMF.Transformations.Core.Transformation.IsInitialized
  parent: NMF.Transformations.Core.Transformation
  name: IsInitialized
  nameWithType: Transformation.IsInitialized
  fullName: NMF.Transformations.Core.Transformation.IsInitialized
- uid: NMF.Transformations.Core.Transformation.IsRulesRegistered
  commentId: P:NMF.Transformations.Core.Transformation.IsRulesRegistered
  parent: NMF.Transformations.Core.Transformation
  name: IsRulesRegistered
  nameWithType: Transformation.IsRulesRegistered
  fullName: NMF.Transformations.Core.Transformation.IsRulesRegistered
- uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
  commentId: M:NMF.Transformations.Core.Transformation.CreateRulesInternal
  parent: NMF.Transformations.Core.Transformation
  name: CreateRulesInternal()
  nameWithType: Transformation.CreateRulesInternal()
  fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
  - name: (
  - name: )
- uid: NMF.Transformations.Core.Transformation.CreateContext
  commentId: M:NMF.Transformations.Core.Transformation.CreateContext
  parent: NMF.Transformations.Core.Transformation
  name: CreateContext()
  nameWithType: Transformation.CreateContext()
  fullName: NMF.Transformations.Core.Transformation.CreateContext()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
  - name: (
  - name: )
- uid: NMF.Transformations.Core.Transformation.Initialize
  commentId: M:NMF.Transformations.Core.Transformation.Initialize
  parent: NMF.Transformations.Core.Transformation
  name: Initialize()
  nameWithType: Transformation.Initialize()
  fullName: NMF.Transformations.Core.Transformation.Initialize()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
  - name: (
  - name: )
- uid: NMF.Transformations.Core.Transformation.MaxOutputDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxOutputDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxOutputDelay
  nameWithType: Transformation.MaxOutputDelay
  fullName: NMF.Transformations.Core.Transformation.MaxOutputDelay
- uid: NMF.Transformations.Core.Transformation.MaxTransformationDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxTransformationDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxTransformationDelay
  nameWithType: Transformation.MaxTransformationDelay
  fullName: NMF.Transformations.Core.Transformation.MaxTransformationDelay
- uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.Transformation
  name: ComputeInstantiatingTransformationRulePath(Computation)
  nameWithType: Transformation.ComputeInstantiatingTransformationRulePath(Computation)
  fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type)
  name.vb: GetRulesForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesExact(Type[], Type)
  nameWithType: Transformation.GetRulesExact(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesExact(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type(), System.Type)
  name.vb: GetRulesExact(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRuleForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRuleForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRuleForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type(), System.Type)
  name.vb: GetRuleForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForInputTypes(params Type[])
  nameWithType: Transformation.GetRulesForInputTypes(params Type[])
  fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(params System.Type[])
  nameWithType.vb: Transformation.GetRulesForInputTypes(ParamArray Type())
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(ParamArray System.Type())
  name.vb: GetRulesForInputTypes(ParamArray Type())
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
  - name: (
  - name: params
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
  - name: (
  - name: ParamArray
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: NMF.Transformations.Core.Transformation.Rules
  commentId: P:NMF.Transformations.Core.Transformation.Rules
  parent: NMF.Transformations.Core.Transformation
  name: Rules
  nameWithType: Transformation.Rules
  fullName: NMF.Transformations.Core.Transformation.Rules
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type, bool)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type, bool)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type, bool)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type, Boolean)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type, Boolean)
  name.vb: GetRulesForTypeSignature(Type(), Type, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.Core.Transformation.CreateRules
  commentId: M:NMF.Transformations.Core.Transformation.CreateRules
  parent: NMF.Transformations.Core.Transformation
  name: CreateRules()
  nameWithType: Transformation.CreateRules()
  fullName: NMF.Transformations.Core.Transformation.CreateRules()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateRules
    name: CreateRules
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateRules
    name: CreateRules
  - name: (
  - name: )
- uid: NMF.Transformations.ReflectiveTransformation.CreateRules*
  commentId: Overload:NMF.Transformations.ReflectiveTransformation.CreateRules
  name: CreateRules
  nameWithType: ReflectiveTransformation.CreateRules
  fullName: NMF.Transformations.ReflectiveTransformation.CreateRules
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<GeneralTransformationRule>
  nameWithType: IEnumerable<GeneralTransformationRule>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Core.GeneralTransformationRule>
  nameWithType.vb: IEnumerable(Of GeneralTransformationRule)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: IEnumerable(Of GeneralTransformationRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRuleForRuleType(Type)
  nameWithType: Transformation.GetRuleForRuleType(Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType*
  commentId: Overload:NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType
  name: GetRuleForRuleType
  nameWithType: ReflectiveTransformation.GetRuleForRuleType
  fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.ReflectiveTransformation.Rule*
  commentId: Overload:NMF.Transformations.ReflectiveTransformation.Rule
  name: Rule
  nameWithType: ReflectiveTransformation.Rule
  fullName: NMF.Transformations.ReflectiveTransformation.Rule
- uid: '{TRule}'
  commentId: '!:TRule'
  definition: TRule
  name: TRule
  nameWithType: TRule
  fullName: TRule
- uid: TRule
  name: TRule
  nameWithType: TRule
  fullName: TRule
- uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForRuleType(Type)
  nameWithType: Transformation.GetRulesForRuleType(Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType*
  commentId: Overload:NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType
  name: GetRulesForRuleType
  nameWithType: ReflectiveTransformation.GetRulesForRuleType
  fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType
- uid: NMF.Transformations.Core.Transformation.RegisterRules
  commentId: M:NMF.Transformations.Core.Transformation.RegisterRules
  parent: NMF.Transformations.Core.Transformation
  name: RegisterRules()
  nameWithType: Transformation.RegisterRules()
  fullName: NMF.Transformations.Core.Transformation.RegisterRules()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.RegisterRules
    name: RegisterRules
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.RegisterRules
    name: RegisterRules
  - name: (
  - name: )
- uid: NMF.Transformations.ReflectiveTransformation.RegisterRules*
  commentId: Overload:NMF.Transformations.ReflectiveTransformation.RegisterRules
  name: RegisterRules
  nameWithType: ReflectiveTransformation.RegisterRules
  fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules
- uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules*
  commentId: Overload:NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  name: CreateCustomRules
  nameWithType: ReflectiveTransformation.CreateCustomRules
  fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
- uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules*
  commentId: Overload:NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  name: CreateDefaultRules
  nameWithType: ReflectiveTransformation.CreateDefaultRules
  fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
