### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.ITransformationRulePattern`2
  commentId: T:NMF.Transformations.ITransformationRulePattern`2
  id: ITransformationRulePattern`2
  parent: NMF.Transformations
  children:
  - NMF.Transformations.ITransformationRulePattern`2.TargetRule
  langs:
  - csharp
  - vb
  name: ITransformationRulePattern<TIn1, TIn2>
  nameWithType: ITransformationRulePattern<TIn1, TIn2>
  fullName: NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>
  type: Interface
  source:
    remote:
      path: Transformations/Transformations/NTL/ITransformationRulePattern.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ITransformationRulePattern
    path: src/Transformations/Transformations/NTL/ITransformationRulePattern.cs
    startLine: 26
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRepresents a transformation pattern that can be tied to a transformation rule\n"
  example: []
  syntax:
    content: 'public interface ITransformationRulePattern<TIn1, TIn2> : ITransformationRulePattern, ITransformationPattern'
    typeParameters:
    - id: TIn1
      description: The type of the first input parameter of the target transformation rule
    - id: TIn2
      description: The type of the second input parameter of the target transformation rule
    content.vb: Public Interface ITransformationRulePattern(Of TIn1, TIn2) Inherits ITransformationRulePattern, ITransformationPattern
  inheritedMembers:
  - NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: ITransformationRulePattern(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2)
  name.vb: ITransformationRulePattern(Of TIn1, TIn2)
- uid: NMF.Transformations.ITransformationRulePattern`2.TargetRule
  commentId: P:NMF.Transformations.ITransformationRulePattern`2.TargetRule
  id: TargetRule
  parent: NMF.Transformations.ITransformationRulePattern`2
  langs:
  - csharp
  - vb
  name: TargetRule
  nameWithType: ITransformationRulePattern<TIn1, TIn2>.TargetRule
  fullName: NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>.TargetRule
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/ITransformationRulePattern.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TargetRule
    path: src/Transformations/Transformations/NTL/ITransformationRulePattern.cs
    startLine: 31
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets or sets the transformation rule that is the target for the current transformation rule pattern\n"
  example: []
  syntax:
    content: GeneralTransformationRule<TIn1, TIn2> TargetRule { get; set; }
    parameters: []
    return:
      type: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
    content.vb: Property TargetRule As GeneralTransformationRule(Of TIn1, TIn2)
  overload: NMF.Transformations.ITransformationRulePattern`2.TargetRule*
  nameWithType.vb: ITransformationRulePattern(Of TIn1, TIn2).TargetRule
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2).TargetRule
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.Core.ITransformationPattern
  name: CreatePattern(ITransformationContext)
  nameWithType: ITransformationPattern.CreatePattern(ITransformationContext)
  fullName: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
    name: CreatePattern
  - name: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
    name: CreatePattern
  - name: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.Core.ITransformationPattern
  commentId: T:NMF.Transformations.Core.ITransformationPattern
  parent: NMF.Transformations.Core
  name: ITransformationPattern
  nameWithType: ITransformationPattern
  fullName: NMF.Transformations.Core.ITransformationPattern
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.ITransformationRulePattern`2.TargetRule*
  commentId: Overload:NMF.Transformations.ITransformationRulePattern`2.TargetRule
  name: TargetRule
  nameWithType: ITransformationRulePattern<TIn1, TIn2>.TargetRule
  fullName: NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>.TargetRule
  nameWithType.vb: ITransformationRulePattern(Of TIn1, TIn2).TargetRule
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2).TargetRule
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`2
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2
  commentId: T:NMF.Transformations.GeneralTransformationRule`2
  parent: NMF.Transformations
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
