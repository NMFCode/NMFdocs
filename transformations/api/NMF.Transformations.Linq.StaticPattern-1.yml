### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Linq.StaticPattern`1
  commentId: T:NMF.Transformations.Linq.StaticPattern`1
  id: StaticPattern`1
  parent: NMF.Transformations.Linq
  children:
  - NMF.Transformations.Linq.StaticPattern`1.#ctor(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.Linq.StaticPattern`1.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.Linq.StaticPattern`1.Selector
  - NMF.Transformations.Linq.StaticPattern`1.TargetRule
  langs:
  - csharp
  - vb
  name: StaticPattern<T>
  nameWithType: StaticPattern<T>
  fullName: NMF.Transformations.Linq.StaticPattern<T>
  type: Class
  source:
    remote:
      path: Transformations/Transformations/Linq/StaticPattern.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: StaticPattern
    path: src/Transformations/Transformations/Linq/StaticPattern.cs
    startLine: 12
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nDenotes a static pattern used as input for a transformation rule\n"
  example: []
  syntax:
    content: 'public class StaticPattern<T> : ITransformationRulePattern<T>, ITransformationRulePattern, ITransformationPattern'
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Class StaticPattern(Of T) Implements ITransformationRulePattern(Of T), ITransformationRulePattern, ITransformationPattern
  inheritance:
  - System.Object
  implements:
  - NMF.Transformations.ITransformationRulePattern{{T}}
  - NMF.Transformations.Core.ITransformationRulePattern
  - NMF.Transformations.Core.ITransformationPattern
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: StaticPattern(Of T)
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T)
  name.vb: StaticPattern(Of T)
- uid: NMF.Transformations.Linq.StaticPattern`1.TargetRule
  commentId: P:NMF.Transformations.Linq.StaticPattern`1.TargetRule
  id: TargetRule
  parent: NMF.Transformations.Linq.StaticPattern`1
  langs:
  - csharp
  - vb
  name: TargetRule
  nameWithType: StaticPattern<T>.TargetRule
  fullName: NMF.Transformations.Linq.StaticPattern<T>.TargetRule
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/StaticPattern.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TargetRule
    path: src/Transformations/Transformations/Linq/StaticPattern.cs
    startLine: 15
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets or sets the transformation rule that is the target for the current transformation rule pattern\n"
  example: []
  syntax:
    content: public GeneralTransformationRule<T> TargetRule { get; set; }
    parameters: []
    return:
      type: NMF.Transformations.GeneralTransformationRule{{T}}
    content.vb: Public Property TargetRule As GeneralTransformationRule(Of T)
  overload: NMF.Transformations.Linq.StaticPattern`1.TargetRule*
  implements:
  - NMF.Transformations.ITransformationRulePattern{{T}}.TargetRule
  nameWithType.vb: StaticPattern(Of T).TargetRule
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).TargetRule
- uid: NMF.Transformations.Linq.StaticPattern`1.Selector
  commentId: P:NMF.Transformations.Linq.StaticPattern`1.Selector
  id: Selector
  parent: NMF.Transformations.Linq.StaticPattern`1
  langs:
  - csharp
  - vb
  name: Selector
  nameWithType: StaticPattern<T>.Selector
  fullName: NMF.Transformations.Linq.StaticPattern<T>.Selector
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/StaticPattern.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Selector
    path: src/Transformations/Transformations/Linq/StaticPattern.cs
    startLine: 20
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets the function to select inputs for the target rule\n"
  example: []
  syntax:
    content: public Func<ITransformationContext, IEnumerable<T>> Selector { get; set; }
    parameters: []
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{T}}}
    content.vb: Public Property Selector As Func(Of ITransformationContext, IEnumerable(Of T))
  overload: NMF.Transformations.Linq.StaticPattern`1.Selector*
  nameWithType.vb: StaticPattern(Of T).Selector
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).Selector
- uid: NMF.Transformations.Linq.StaticPattern`1.#ctor(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.Linq.StaticPattern`1.#ctor(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  id: '#ctor(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})'
  parent: NMF.Transformations.Linq.StaticPattern`1
  langs:
  - csharp
  - vb
  name: StaticPattern(Func<ITransformationContext, IEnumerable<T>>)
  nameWithType: StaticPattern<T>.StaticPattern(Func<ITransformationContext, IEnumerable<T>>)
  fullName: NMF.Transformations.Linq.StaticPattern<T>.StaticPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<T>>)
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations/Linq/StaticPattern.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations/Linq/StaticPattern.cs
    startLine: 26
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nCreates a new static pattern to fire transformation rule executions\n"
  example: []
  syntax:
    content: public StaticPattern(Func<ITransformationContext, IEnumerable<T>> selector)
    parameters:
    - id: selector
      type: System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{T}}}
      description: A function that selects the inputs for the transformation rule
    content.vb: Public Sub New(selector As Func(Of ITransformationContext, IEnumerable(Of T)))
  overload: NMF.Transformations.Linq.StaticPattern`1.#ctor*
  nameWithType.vb: StaticPattern(Of T).New(Func(Of ITransformationContext, IEnumerable(Of T)))
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).New(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: New(Func(Of ITransformationContext, IEnumerable(Of T)))
- uid: NMF.Transformations.Linq.StaticPattern`1.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.StaticPattern`1.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  id: CreatePattern(NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.Linq.StaticPattern`1
  langs:
  - csharp
  - vb
  name: CreatePattern(ITransformationContext)
  nameWithType: StaticPattern<T>.CreatePattern(ITransformationContext)
  fullName: NMF.Transformations.Linq.StaticPattern<T>.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/StaticPattern.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreatePattern
    path: src/Transformations/Transformations/Linq/StaticPattern.cs
    startLine: 44
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nApplies the current pattern to the given transformation context\n"
  example: []
  syntax:
    content: public ITransformationPatternContext CreatePattern(ITransformationContext context)
    parameters:
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context in which the pattern should be applied
    return:
      type: NMF.Transformations.Core.ITransformationPatternContext
      description: A transformation pattern context object that represents the pattern within the given transformation context
    content.vb: Public Function CreatePattern(context As ITransformationContext) As ITransformationPatternContext
  overload: NMF.Transformations.Linq.StaticPattern`1.CreatePattern*
  implements:
  - NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: StaticPattern(Of T).CreatePattern(ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).CreatePattern(NMF.Transformations.Core.ITransformationContext)
references:
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.ITransformationRulePattern{{T}}
  commentId: T:NMF.Transformations.ITransformationRulePattern{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.ITransformationRulePattern`1
  name: ITransformationRulePattern<T>
  nameWithType: ITransformationRulePattern<T>
  fullName: NMF.Transformations.ITransformationRulePattern<T>
  nameWithType.vb: ITransformationRulePattern(Of T)
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of T)
  name.vb: ITransformationRulePattern(Of T)
  spec.csharp:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.Core.ITransformationRulePattern
  commentId: T:NMF.Transformations.Core.ITransformationRulePattern
  parent: NMF.Transformations.Core
  name: ITransformationRulePattern
  nameWithType: ITransformationRulePattern
  fullName: NMF.Transformations.Core.ITransformationRulePattern
- uid: NMF.Transformations.Core.ITransformationPattern
  commentId: T:NMF.Transformations.Core.ITransformationPattern
  parent: NMF.Transformations.Core
  name: ITransformationPattern
  nameWithType: ITransformationPattern
  fullName: NMF.Transformations.Core.ITransformationPattern
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.ITransformationRulePattern`1
  commentId: T:NMF.Transformations.ITransformationRulePattern`1
  name: ITransformationRulePattern<TIn>
  nameWithType: ITransformationRulePattern<TIn>
  fullName: NMF.Transformations.ITransformationRulePattern<TIn>
  nameWithType.vb: ITransformationRulePattern(Of TIn)
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn)
  name.vb: ITransformationRulePattern(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.Linq.StaticPattern`1.TargetRule*
  commentId: Overload:NMF.Transformations.Linq.StaticPattern`1.TargetRule
  name: TargetRule
  nameWithType: StaticPattern<T>.TargetRule
  fullName: NMF.Transformations.Linq.StaticPattern<T>.TargetRule
  nameWithType.vb: StaticPattern(Of T).TargetRule
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).TargetRule
- uid: NMF.Transformations.ITransformationRulePattern{{T}}.TargetRule
  commentId: P:NMF.Transformations.ITransformationRulePattern{`0}.TargetRule
  parent: NMF.Transformations.ITransformationRulePattern{{T}}
  definition: NMF.Transformations.ITransformationRulePattern`1.TargetRule
  name: TargetRule
  nameWithType: ITransformationRulePattern<T>.TargetRule
  fullName: NMF.Transformations.ITransformationRulePattern<T>.TargetRule
  nameWithType.vb: ITransformationRulePattern(Of T).TargetRule
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of T).TargetRule
- uid: NMF.Transformations.GeneralTransformationRule{{T}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<T>
  nameWithType: GeneralTransformationRule<T>
  fullName: NMF.Transformations.GeneralTransformationRule<T>
  nameWithType.vb: GeneralTransformationRule(Of T)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of T)
  name.vb: GeneralTransformationRule(Of T)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.ITransformationRulePattern`1.TargetRule
  commentId: P:NMF.Transformations.ITransformationRulePattern`1.TargetRule
  name: TargetRule
  nameWithType: ITransformationRulePattern<TIn>.TargetRule
  fullName: NMF.Transformations.ITransformationRulePattern<TIn>.TargetRule
  nameWithType.vb: ITransformationRulePattern(Of TIn).TargetRule
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn).TargetRule
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.Linq.StaticPattern`1.Selector*
  commentId: Overload:NMF.Transformations.Linq.StaticPattern`1.Selector
  name: Selector
  nameWithType: StaticPattern<T>.Selector
  fullName: NMF.Transformations.Linq.StaticPattern<T>.Selector
  nameWithType.vb: StaticPattern(Of T).Selector
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).Selector
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`2
  name: Func<ITransformationContext, IEnumerable<T>>
  nameWithType: Func<ITransformationContext, IEnumerable<T>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Func(Of ITransformationContext, IEnumerable(Of T))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of T))
  name.vb: Func(Of ITransformationContext, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Transformations.Linq.StaticPattern`1.#ctor*
  commentId: Overload:NMF.Transformations.Linq.StaticPattern`1.#ctor
  name: StaticPattern
  nameWithType: StaticPattern<T>.StaticPattern
  fullName: NMF.Transformations.Linq.StaticPattern<T>.StaticPattern
  nameWithType.vb: StaticPattern(Of T).New
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).New
  name.vb: New
- uid: NMF.Transformations.Linq.StaticPattern`1.CreatePattern*
  commentId: Overload:NMF.Transformations.Linq.StaticPattern`1.CreatePattern
  name: CreatePattern
  nameWithType: StaticPattern<T>.CreatePattern
  fullName: NMF.Transformations.Linq.StaticPattern<T>.CreatePattern
  nameWithType.vb: StaticPattern(Of T).CreatePattern
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T).CreatePattern
- uid: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.Core.ITransformationPattern
  name: CreatePattern(ITransformationContext)
  nameWithType: ITransformationPattern.CreatePattern(ITransformationContext)
  fullName: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
    name: CreatePattern
  - name: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationPattern.CreatePattern(NMF.Transformations.Core.ITransformationContext)
    name: CreatePattern
  - name: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: NMF.Transformations.Core.ITransformationPatternContext
  commentId: T:NMF.Transformations.Core.ITransformationPatternContext
  parent: NMF.Transformations.Core
  name: ITransformationPatternContext
  nameWithType: ITransformationPatternContext
  fullName: NMF.Transformations.Core.ITransformationPatternContext
