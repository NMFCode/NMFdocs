### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.MetaFacade
  commentId: T:NMF.Models.Meta.MetaFacade
  id: MetaFacade
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.MetaFacade.CreateCode(NMF.Models.Meta.INamespace,System.String)
  - NMF.Models.Meta.MetaFacade.GenerateCode(System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.String,System.Boolean)
  - NMF.Models.Meta.MetaFacade.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  langs:
  - csharp
  - vb
  name: MetaFacade
  nameWithType: MetaFacade
  fullName: NMF.Models.Meta.MetaFacade
  type: Class
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MetaFacade
    path: src/Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
    startLine: 16
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nDenotes a facade for the code generator\n"
  example: []
  syntax:
    content: public static class MetaFacade
    content.vb: Public Module MetaFacade
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Models.Meta.MetaFacade.CreateCode(NMF.Models.Meta.INamespace,System.String)
  commentId: M:NMF.Models.Meta.MetaFacade.CreateCode(NMF.Models.Meta.INamespace,System.String)
  id: CreateCode(NMF.Models.Meta.INamespace,System.String)
  parent: NMF.Models.Meta.MetaFacade
  langs:
  - csharp
  - vb
  name: CreateCode(INamespace, String)
  nameWithType: MetaFacade.CreateCode(INamespace, String)
  fullName: NMF.Models.Meta.MetaFacade.CreateCode(NMF.Models.Meta.INamespace, System.String)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateCode
    path: src/Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
    startLine: 30
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGenerates the code for the given namespace\n"
  example: []
  syntax:
    content: public static CodeCompileUnit CreateCode(INamespace ns, string overAllNamespace)
    parameters:
    - id: ns
      type: NMF.Models.Meta.INamespace
      description: the namespace for which code should be generated
    - id: overAllNamespace
      type: System.String
      description: The namespace that should be prepended to the generated code
    return:
      type: System.CodeDom.CodeCompileUnit
      description: A compilation unit with the generated code
    content.vb: Public Shared Function CreateCode(ns As INamespace, overAllNamespace As String) As CodeCompileUnit
  overload: NMF.Models.Meta.MetaFacade.CreateCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.MetaFacade.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  commentId: M:NMF.Models.Meta.MetaFacade.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  id: SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  parent: NMF.Models.Meta.MetaFacade
  langs:
  - csharp
  - vb
  name: SplitCompileUnit(CodeCompileUnit)
  nameWithType: MetaFacade.SplitCompileUnit(CodeCompileUnit)
  fullName: NMF.Models.Meta.MetaFacade.SplitCompileUnit(System.CodeDom.CodeCompileUnit)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SplitCompileUnit
    path: src/Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
    startLine: 41
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nSplits the provided code compile unit into chunks such that it contains one class per file\n"
  example: []
  syntax:
    content: public static IDictionary<string, CodeCompileUnit> SplitCompileUnit(CodeCompileUnit unit)
    parameters:
    - id: unit
      type: System.CodeDom.CodeCompileUnit
      description: The unit containing all the code
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.CodeDom.CodeCompileUnit}
      description: A dictionary of paths and code compile units
    content.vb: Public Shared Function SplitCompileUnit(unit As CodeCompileUnit) As IDictionary(Of String, CodeCompileUnit)
  overload: NMF.Models.Meta.MetaFacade.SplitCompileUnit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.MetaFacade.GenerateCode(System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.String,System.Boolean)
  commentId: M:NMF.Models.Meta.MetaFacade.GenerateCode(System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.String,System.Boolean)
  id: GenerateCode(System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.String,System.Boolean)
  parent: NMF.Models.Meta.MetaFacade
  langs:
  - csharp
  - vb
  name: GenerateCode(CodeCompileUnit, CodeDomProvider, String, Boolean)
  nameWithType: MetaFacade.GenerateCode(CodeCompileUnit, CodeDomProvider, String, Boolean)
  fullName: NMF.Models.Meta.MetaFacade.GenerateCode(System.CodeDom.CodeCompileUnit, System.CodeDom.Compiler.CodeDomProvider, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GenerateCode
    path: src/Transformations/Models.MetaTransformation/Meta/MetaFacade.cs
    startLine: 121
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGenerates code for the given unit with the given code provider\n"
  example: []
  syntax:
    content: public static void GenerateCode(CodeCompileUnit unit, CodeDomProvider generator, string target, bool splitToFolders)
    parameters:
    - id: unit
      type: System.CodeDom.CodeCompileUnit
      description: The code compile unit
    - id: generator
      type: System.CodeDom.Compiler.CodeDomProvider
      description: The code provider
    - id: target
      type: System.String
      description: The target path
    - id: splitToFolders
      type: System.Boolean
      description: True, if the unit should be split up in one class per file, otherwise false
    content.vb: Public Shared Sub GenerateCode(unit As CodeCompileUnit, generator As CodeDomProvider, target As String, splitToFolders As Boolean)
  overload: NMF.Models.Meta.MetaFacade.GenerateCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Meta.MetaFacade.CreateCode*
  commentId: Overload:NMF.Models.Meta.MetaFacade.CreateCode
  name: CreateCode
  nameWithType: MetaFacade.CreateCode
  fullName: NMF.Models.Meta.MetaFacade.CreateCode
- uid: NMF.Models.Meta.INamespace
  commentId: T:NMF.Models.Meta.INamespace
  parent: NMF.Models.Meta
  name: INamespace
  nameWithType: INamespace
  fullName: NMF.Models.Meta.INamespace
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.CodeDom.CodeCompileUnit
  commentId: T:System.CodeDom.CodeCompileUnit
  parent: System.CodeDom
  isExternal: true
  name: CodeCompileUnit
  nameWithType: CodeCompileUnit
  fullName: System.CodeDom.CodeCompileUnit
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
- uid: NMF.Models.Meta.MetaFacade.SplitCompileUnit*
  commentId: Overload:NMF.Models.Meta.MetaFacade.SplitCompileUnit
  name: SplitCompileUnit
  nameWithType: MetaFacade.SplitCompileUnit
  fullName: NMF.Models.Meta.MetaFacade.SplitCompileUnit
- uid: System.Collections.Generic.IDictionary{System.String,System.CodeDom.CodeCompileUnit}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.CodeDom.CodeCompileUnit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, CodeCompileUnit>
  nameWithType: IDictionary<String, CodeCompileUnit>
  fullName: System.Collections.Generic.IDictionary<System.String, System.CodeDom.CodeCompileUnit>
  nameWithType.vb: IDictionary(Of String, CodeCompileUnit)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.CodeDom.CodeCompileUnit)
  name.vb: IDictionary(Of String, CodeCompileUnit)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeCompileUnit
    name: CodeCompileUnit
    nameWithType: CodeCompileUnit
    fullName: System.CodeDom.CodeCompileUnit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.CodeDom.CodeCompileUnit
    name: CodeCompileUnit
    nameWithType: CodeCompileUnit
    fullName: System.CodeDom.CodeCompileUnit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Models.Meta.MetaFacade.GenerateCode*
  commentId: Overload:NMF.Models.Meta.MetaFacade.GenerateCode
  name: GenerateCode
  nameWithType: MetaFacade.GenerateCode
  fullName: NMF.Models.Meta.MetaFacade.GenerateCode
- uid: System.CodeDom.Compiler.CodeDomProvider
  commentId: T:System.CodeDom.Compiler.CodeDomProvider
  parent: System.CodeDom.Compiler
  isExternal: true
  name: CodeDomProvider
  nameWithType: CodeDomProvider
  fullName: System.CodeDom.Compiler.CodeDomProvider
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CodeDom.Compiler
  commentId: N:System.CodeDom.Compiler
  isExternal: true
  name: System.CodeDom.Compiler
  nameWithType: System.CodeDom.Compiler
  fullName: System.CodeDom.Compiler
