### YamlMime:ManagedReference
items:
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember
  commentId: T:NMF.CodeGen.EnumGenerator`1.EnumMember
  id: EnumGenerator`1.EnumMember
  parent: NMF.CodeGen
  children:
  - NMF.CodeGen.EnumGenerator`1.EnumMember.Name
  - NMF.CodeGen.EnumGenerator`1.EnumMember.Remarks
  - NMF.CodeGen.EnumGenerator`1.EnumMember.Summary
  - NMF.CodeGen.EnumGenerator`1.EnumMember.Value
  langs:
  - csharp
  - vb
  name: EnumGenerator<T>.EnumMember
  nameWithType: EnumGenerator<T>.EnumMember
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember
  type: Struct
  source:
    remote:
      path: Transformations/CodeGen/EnumGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EnumMember
    path: src/Transformations/CodeGen/EnumGenerator.cs
    startLine: 20
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nRepresents an enumeration member\n"
  example: []
  syntax:
    content: protected struct EnumMember
    content.vb: Protected Structure EnumMember
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: EnumGenerator(Of T).EnumMember
  modifiers.csharp:
  - protected
  - struct
  modifiers.vb:
  - Protected
  - Structure
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember
  name.vb: EnumGenerator(Of T).EnumMember
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Value
  commentId: P:NMF.CodeGen.EnumGenerator`1.EnumMember.Value
  id: Value
  parent: NMF.CodeGen.EnumGenerator`1.EnumMember
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: EnumGenerator<T>.EnumMember.Value
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Value
  type: Property
  source:
    remote:
      path: Transformations/CodeGen/EnumGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Transformations/CodeGen/EnumGenerator.cs
    startLine: 25
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nThe value of the enumeration literal\n"
  example: []
  syntax:
    content: public int? Value { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property Value As Integer?
  overload: NMF.CodeGen.EnumGenerator`1.EnumMember.Value*
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Value
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Name
  commentId: P:NMF.CodeGen.EnumGenerator`1.EnumMember.Name
  id: Name
  parent: NMF.CodeGen.EnumGenerator`1.EnumMember
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EnumGenerator<T>.EnumMember.Name
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Name
  type: Property
  source:
    remote:
      path: Transformations/CodeGen/EnumGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Name
    path: src/Transformations/CodeGen/EnumGenerator.cs
    startLine: 30
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nThe name of the enumeration literal\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: NMF.CodeGen.EnumGenerator`1.EnumMember.Name*
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Name
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Summary
  commentId: P:NMF.CodeGen.EnumGenerator`1.EnumMember.Summary
  id: Summary
  parent: NMF.CodeGen.EnumGenerator`1.EnumMember
  langs:
  - csharp
  - vb
  name: Summary
  nameWithType: EnumGenerator<T>.EnumMember.Summary
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Summary
  type: Property
  source:
    remote:
      path: Transformations/CodeGen/EnumGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Summary
    path: src/Transformations/CodeGen/EnumGenerator.cs
    startLine: 35
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nThe documentation summary of the literal\n"
  example: []
  syntax:
    content: public string Summary { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Summary As String
  overload: NMF.CodeGen.EnumGenerator`1.EnumMember.Summary*
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Summary
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Summary
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Remarks
  commentId: P:NMF.CodeGen.EnumGenerator`1.EnumMember.Remarks
  id: Remarks
  parent: NMF.CodeGen.EnumGenerator`1.EnumMember
  langs:
  - csharp
  - vb
  name: Remarks
  nameWithType: EnumGenerator<T>.EnumMember.Remarks
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Remarks
  type: Property
  source:
    remote:
      path: Transformations/CodeGen/EnumGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remarks
    path: src/Transformations/CodeGen/EnumGenerator.cs
    startLine: 40
  assemblies:
  - NMF.CodeGen
  namespace: NMF.CodeGen
  summary: "\nThe documentation remarks of the literal\n"
  example: []
  syntax:
    content: public string Remarks { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Remarks As String
  overload: NMF.CodeGen.EnumGenerator`1.EnumMember.Remarks*
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Remarks
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Remarks
references:
- uid: NMF.CodeGen
  commentId: N:NMF.CodeGen
  name: NMF.CodeGen
  nameWithType: NMF.CodeGen
  fullName: NMF.CodeGen
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Value*
  commentId: Overload:NMF.CodeGen.EnumGenerator`1.EnumMember.Value
  name: Value
  nameWithType: EnumGenerator<T>.EnumMember.Value
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Value
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Value
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Value
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Name*
  commentId: Overload:NMF.CodeGen.EnumGenerator`1.EnumMember.Name
  name: Name
  nameWithType: EnumGenerator<T>.EnumMember.Name
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Name
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Name
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Summary*
  commentId: Overload:NMF.CodeGen.EnumGenerator`1.EnumMember.Summary
  name: Summary
  nameWithType: EnumGenerator<T>.EnumMember.Summary
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Summary
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Summary
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Summary
- uid: NMF.CodeGen.EnumGenerator`1.EnumMember.Remarks*
  commentId: Overload:NMF.CodeGen.EnumGenerator`1.EnumMember.Remarks
  name: Remarks
  nameWithType: EnumGenerator<T>.EnumMember.Remarks
  fullName: NMF.CodeGen.EnumGenerator<T>.EnumMember.Remarks
  nameWithType.vb: EnumGenerator(Of T).EnumMember.Remarks
  fullName.vb: NMF.CodeGen.EnumGenerator(Of T).EnumMember.Remarks
