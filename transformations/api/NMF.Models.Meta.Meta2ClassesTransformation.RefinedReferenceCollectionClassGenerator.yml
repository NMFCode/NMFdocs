### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  commentId: T:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  id: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications(System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.CodeDom.CodeConstructor,System.CodeDom.CodeArgumentReferenceExpression,NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  langs:
  - csharp
  - vb
  name: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  type: Class
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RefinedReferenceCollectionClassGenerator
    path: src/Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
    startLine: 21
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nThe transformation rule that generates the collection class for a refined reference\n"
  example: []
  syntax:
    content: 'public class Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator : TransformationRule<IClass, IReference, CodeTypeDeclaration>'
    content.vb: Public Class Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator Inherits TransformationRule(Of IClass, IReference, CodeTypeDeclaration)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  inheritedMembers:
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.NeedDependenciesForOutputCreation
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.OutputType
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput2}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TKey}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeTypeDeclaration},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TKey}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Rule``1
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.InputType
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.ToString
  - NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - NMF.Transformations.Core.GeneralTransformationRule.InputType
  - NMF.Transformations.Core.GeneralTransformationRule.OutputType
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  id: CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  langs:
  - csharp
  - vb
  name: CreateOutput(IClass, IReference, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput(IClass, IReference, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOutput
    path: src/Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
    startLine: 30
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the uninitialized output type declaration\n"
  example: []
  syntax:
    content: public override CodeTypeDeclaration CreateOutput(IClass scope, IReference reference, ITransformationContext context)
    parameters:
    - id: scope
      type: NMF.Models.Meta.IClass
      description: The scope in which the reference is refined
    - id: reference
      type: NMF.Models.Meta.IReference
      description: The refined reference
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context
    return:
      type: System.CodeDom.CodeTypeDeclaration
      description: The newly created code type declaration
    content.vb: Public Overrides Function CreateOutput(scope As IClass, reference As IReference, context As ITransformationContext) As CodeTypeDeclaration
  overridden: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  id: Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  langs:
  - csharp
  - vb
  name: Transform(IClass, IReference, CodeTypeDeclaration, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform(IClass, IReference, CodeTypeDeclaration, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
    startLine: 44
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nInitializes the created type declaration\n"
  example: []
  syntax:
    content: public override void Transform(IClass scope, IReference reference, CodeTypeDeclaration generatedType, ITransformationContext context)
    parameters:
    - id: scope
      type: NMF.Models.Meta.IClass
      description: The scope in which the reference is refined
    - id: reference
      type: NMF.Models.Meta.IReference
      description: The refined reference
    - id: generatedType
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated type declaration
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context
    content.vb: Public Overrides Sub Transform(scope As IClass, reference As IReference, generatedType As CodeTypeDeclaration, context As ITransformationContext)
  overridden: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications(System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.CodeDom.CodeConstructor,System.CodeDom.CodeArgumentReferenceExpression,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications(System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.CodeDom.CodeConstructor,System.CodeDom.CodeArgumentReferenceExpression,NMF.Transformations.Core.ITransformationContext)
  id: ImplementNotifications(System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.CodeDom.CodeConstructor,System.CodeDom.CodeArgumentReferenceExpression,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  langs:
  - csharp
  - vb
  name: ImplementNotifications(CodeTypeDeclaration, List<IReference>, CodeConstructor, CodeArgumentReferenceExpression, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications(CodeTypeDeclaration, List<IReference>, CodeConstructor, CodeArgumentReferenceExpression, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications(System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.List<NMF.Models.Meta.IReference>, System.CodeDom.CodeConstructor, System.CodeDom.CodeArgumentReferenceExpression, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImplementNotifications
    path: src/Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
    startLine: 109
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nImplement notifications for the given refined reference class\n"
  example: []
  syntax:
    content: protected virtual void ImplementNotifications(CodeTypeDeclaration generatedType, List<IReference> implementingReferences, CodeConstructor constructor, CodeArgumentReferenceExpression constrParentRef, ITransformationContext context)
    parameters:
    - id: generatedType
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated type
    - id: implementingReferences
      type: System.Collections.Generic.List{NMF.Models.Meta.IReference}
      description: The implementing references
    - id: constructor
      type: System.CodeDom.CodeConstructor
      description: The constructor of the generated type
    - id: constrParentRef
      type: System.CodeDom.CodeArgumentReferenceExpression
      description: The reference to the parent element
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the request was made
    content.vb: Protected Overridable Sub ImplementNotifications(generatedType As CodeTypeDeclaration, implementingReferences As List(Of IReference), constructor As CodeConstructor, constrParentRef As CodeArgumentReferenceExpression, context As ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications*
  nameWithType.vb: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications(CodeTypeDeclaration, List(Of IReference), CodeConstructor, CodeArgumentReferenceExpression, ITransformationContext)
  fullName.vb: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications(System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.List(Of NMF.Models.Meta.IReference), System.CodeDom.CodeConstructor, System.CodeDom.CodeArgumentReferenceExpression, NMF.Transformations.Core.ITransformationContext)
  name.vb: ImplementNotifications(CodeTypeDeclaration, List(Of IReference), CodeConstructor, CodeArgumentReferenceExpression, ITransformationContext)
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  id: ImplementList(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  langs:
  - csharp
  - vb
  name: ImplementList(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List<IReference>, List<IModelElement>, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List<IReference>, List<IModelElement>, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList(System.CodeDom.CodeTypeDeclaration, System.CodeDom.CodeTypeReference, System.CodeDom.CodeExpression, NMF.Models.Meta.IReference, System.Collections.Generic.List<NMF.Models.Meta.IReference>, System.Collections.Generic.List<NMF.Models.IModelElement>, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImplementList
    path: src/Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
    startLine: 234
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nImplements the IList interface\n"
  example: []
  syntax:
    content: protected virtual void ImplementList(CodeTypeDeclaration generatedType, CodeTypeReference elementType, CodeExpression standardValuesRef, IReference original, List<IReference> implementingReferences, List<IModelElement> constraintReferences, ITransformationContext context)
    parameters:
    - id: generatedType
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated code type declaration
    - id: elementType
      type: System.CodeDom.CodeTypeReference
      description: The element tyoe reference
    - id: standardValuesRef
      type: System.CodeDom.CodeExpression
      description: A reference to the standard values field
    - id: original
      type: NMF.Models.Meta.IReference
      description: The original reference
    - id: implementingReferences
      type: System.Collections.Generic.List{NMF.Models.Meta.IReference}
      description: The attributes implementing the collection
    - id: constraintReferences
      type: System.Collections.Generic.List{NMF.Models.IModelElement}
      description: The constraints that apply to the reference
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the collection is implemented
    content.vb: Protected Overridable Sub ImplementList(generatedType As CodeTypeDeclaration, elementType As CodeTypeReference, standardValuesRef As CodeExpression, original As IReference, implementingReferences As List(Of IReference), constraintReferences As List(Of IModelElement), context As ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList*
  nameWithType.vb: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List(Of IReference), List(Of IModelElement), ITransformationContext)
  fullName.vb: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList(System.CodeDom.CodeTypeDeclaration, System.CodeDom.CodeTypeReference, System.CodeDom.CodeExpression, NMF.Models.Meta.IReference, System.Collections.Generic.List(Of NMF.Models.Meta.IReference), System.Collections.Generic.List(Of NMF.Models.IModelElement), NMF.Transformations.Core.ITransformationContext)
  name.vb: ImplementList(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List(Of IReference), List(Of IModelElement), ITransformationContext)
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  id: ImplementCollection(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,NMF.Models.Meta.IReference,System.Collections.Generic.List{NMF.Models.Meta.IReference},System.Collections.Generic.List{NMF.Models.IModelElement},NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  langs:
  - csharp
  - vb
  name: ImplementCollection(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List<IReference>, List<IModelElement>, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List<IReference>, List<IModelElement>, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection(System.CodeDom.CodeTypeDeclaration, System.CodeDom.CodeTypeReference, System.CodeDom.CodeExpression, NMF.Models.Meta.IReference, System.Collections.Generic.List<NMF.Models.Meta.IReference>, System.Collections.Generic.List<NMF.Models.IModelElement>, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImplementCollection
    path: src/Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
    startLine: 254
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nImplements the ICollection interface\n"
  example: []
  syntax:
    content: protected virtual void ImplementCollection(CodeTypeDeclaration generatedType, CodeTypeReference elementType, CodeExpression standardValuesRef, IReference original, List<IReference> implementingReferences, List<IModelElement> constraintReferences, ITransformationContext context)
    parameters:
    - id: generatedType
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated code type declaration
    - id: elementType
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    - id: standardValuesRef
      type: System.CodeDom.CodeExpression
      description: A reference to the standard values field
    - id: original
      type: NMF.Models.Meta.IReference
      description: The original reference
    - id: implementingReferences
      type: System.Collections.Generic.List{NMF.Models.Meta.IReference}
      description: The references implementing the collection
    - id: constraintReferences
      type: System.Collections.Generic.List{NMF.Models.IModelElement}
      description: The constraints that apply to the reference
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the collection is implemented
    content.vb: Protected Overridable Sub ImplementCollection(generatedType As CodeTypeDeclaration, elementType As CodeTypeReference, standardValuesRef As CodeExpression, original As IReference, implementingReferences As List(Of IReference), constraintReferences As List(Of IModelElement), context As ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection*
  nameWithType.vb: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List(Of IReference), List(Of IModelElement), ITransformationContext)
  fullName.vb: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection(System.CodeDom.CodeTypeDeclaration, System.CodeDom.CodeTypeReference, System.CodeDom.CodeExpression, NMF.Models.Meta.IReference, System.Collections.Generic.List(Of NMF.Models.Meta.IReference), System.Collections.Generic.List(Of NMF.Models.IModelElement), NMF.Transformations.Core.ITransformationContext)
  name.vb: ImplementCollection(CodeTypeDeclaration, CodeTypeReference, CodeExpression, IReference, List(Of IReference), List(Of IModelElement), ITransformationContext)
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference)
  id: ImplementNotifiable(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator
  langs:
  - csharp
  - vb
  name: ImplementNotifiable(CodeTypeDeclaration, CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable(CodeTypeDeclaration, CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable(System.CodeDom.CodeTypeDeclaration, System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ImplementNotifiable
    path: src/Transformations/Models.MetaTransformation/Meta/RefinedReferenceCollectionClassGenerator.cs
    startLine: 274
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nImplement the IEnumerableExpression interface\n"
  example: []
  syntax:
    content: protected virtual void ImplementNotifiable(CodeTypeDeclaration generatedType, CodeTypeReference elementType)
    parameters:
    - id: generatedType
      type: System.CodeDom.CodeTypeDeclaration
      description: The generated code type declaration
    - id: elementType
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    content.vb: Protected Overridable Sub ImplementNotifiable(generatedType As CodeTypeDeclaration, elementType As CodeTypeReference)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable*
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  commentId: T:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`2
  name: GeneralTransformationRule<IClass, IReference>
  nameWithType: GeneralTransformationRule<IClass, IReference>
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference)
  name.vb: GeneralTransformationRule(Of IClass, IReference)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  commentId: T:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration)
  name.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  commentId: T:NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRule`3
  name: TransformationRule<IClass, IReference, CodeTypeDeclaration>
  nameWithType: TransformationRule<IClass, IReference, CodeTypeDeclaration>
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>
  nameWithType.vb: TransformationRule(Of IClass, IReference, CodeTypeDeclaration)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration)
  name.vb: TransformationRule(Of IClass, IReference, CodeTypeDeclaration)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRule`3.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<IClass, IReference, CodeTypeDeclaration>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of IClass, IReference, CodeTypeDeclaration).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  name: CreateComputation(object[], IComputationContext)
  nameWithType: TransformationRule<IClass, IReference, CodeTypeDeclaration>.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of IClass, IReference, CodeTypeDeclaration).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(IClass, IReference, ITransformationContext)
  nameWithType: TransformationRule<IClass, IReference, CodeTypeDeclaration>.CreateOutput(IClass, IReference, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CreateOutput(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IClass, IReference, CodeTypeDeclaration).CreateOutput(IClass, IReference, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CreateOutput(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CreateOutput(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
  name: Transform(IClass, IReference, CodeTypeDeclaration, ITransformationContext)
  nameWithType: TransformationRule<IClass, IReference, CodeTypeDeclaration>.Transform(IClass, IReference, CodeTypeDeclaration, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.Transform(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IClass, IReference, CodeTypeDeclaration).Transform(IClass, IReference, CodeTypeDeclaration, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).Transform(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Transform(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3
    name: MarkInstantiatingFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, bool>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, bool>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, Boolean))
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: MarkInstantiatingFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.MarkInstantiatingFor``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.OutputType
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.OutputType
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).OutputType
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.RequireByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, TRequiredInput>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, TRequiredInput), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``3(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>, Action<CodeTypeDeclaration, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)), Action(Of CodeTypeDeclaration, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, bool>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, Boolean), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>, Action<CodeTypeDeclaration, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, bool>, System.Action<System.CodeDom.CodeTypeDeclaration, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, Boolean), System.Action(Of System.CodeDom.CodeTypeDeclaration, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean), Action(Of CodeTypeDeclaration, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean},System.Action{System.CodeDom.CodeTypeDeclaration,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<CodeTypeDeclaration>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeTypeDeclaration>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeTypeDeclaration)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeTypeDeclaration)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeTypeDeclaration}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput2}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput1>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput2>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput1>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput1), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput1), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``1})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``1})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput1>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput1>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, bool>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput1), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput1), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, bool>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, bool>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<TRequiredInput>>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, CodeTypeDeclaration, IEnumerable<TRequiredInput>>, Func<IClass, IReference, CodeTypeDeclaration, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, bool>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of TRequiredInput)), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, CodeTypeDeclaration, IEnumerable(Of TRequiredInput)), Func(Of IClass, IReference, CodeTypeDeclaration, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  name: TraceOutput<TKey>(Func<IClass, IReference, CodeTypeDeclaration, TKey>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.TraceOutput<TKey>(Func<IClass, IReference, CodeTypeDeclaration, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.TraceOutput<TKey>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).TraceOutput(Of TKey)(Func(Of IClass, IReference, CodeTypeDeclaration, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).TraceOutput(Of TKey)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of IClass, IReference, CodeTypeDeclaration, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeTypeDeclaration},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeTypeDeclaration},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}
  definition: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, CodeTypeDeclaration>, Func<IClass, IReference, CodeTypeDeclaration, TKey>)
  nameWithType: TransformationRuleBase<IClass, IReference, CodeTypeDeclaration>.TraceOutput<TKey>(TraceEntryGroup<TKey, CodeTypeDeclaration>, Func<IClass, IReference, CodeTypeDeclaration, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, System.CodeDom.CodeTypeDeclaration>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IClass, IReference, CodeTypeDeclaration).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeTypeDeclaration), Func(Of IClass, IReference, CodeTypeDeclaration, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, System.CodeDom.CodeTypeDeclaration), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.CodeDom.CodeTypeDeclaration, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeTypeDeclaration), Func(Of IClass, IReference, CodeTypeDeclaration, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeTypeDeclaration},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeTypeDeclaration},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.CodeDom.CodeTypeDeclaration,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeTypeDeclaration
    name: CodeTypeDeclaration
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  name: MarkInstantiatingFor(GeneralTransformationRule, Func<IClass, IReference, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.MarkInstantiatingFor(GeneralTransformationRule, Func<IClass, IReference, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).MarkInstantiatingFor(GeneralTransformationRule, Func(Of IClass, IReference, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, Boolean))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Func(Of IClass, IReference, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Rule``1
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<IClass, IReference>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.InputType
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<IClass, IReference>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.InputType
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).InputType
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  name: WithPattern(ITransformationRulePattern<IClass, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.WithPattern(ITransformationRulePattern<IClass, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.WithPattern(NMF.Transformations.ITransformationRulePattern<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).WithPattern(ITransformationRulePattern(Of IClass, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).WithPattern(NMF.Transformations.ITransformationRulePattern(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))
  name.vb: WithPattern(ITransformationRulePattern(Of IClass, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: WithPattern(Func<ITransformationContext, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.WithPattern(Func<ITransformationContext, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  name: RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  name: RequireByType<TRequiredInput>(Func<IClass, IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireByType<TRequiredInput>(Func<IClass, IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireByType<TRequiredInput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireByType(Of TRequiredInput)(Func(Of IClass, IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of IClass, IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: Require(GeneralTransformationRule<IClass, IReference>, Func<IClass, IReference, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Require(GeneralTransformationRule<IClass, IReference>, Func<IClass, IReference, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Require(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Require(GeneralTransformationRule(Of IClass, IReference), Func(Of IClass, IReference, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Require(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, Boolean))
  name.vb: Require(GeneralTransformationRule(Of IClass, IReference), Func(Of IClass, IReference, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: Require
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: Require
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  name: Require(GeneralTransformationRule, Func<IClass, IReference, object[]>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Require(GeneralTransformationRule, Func<IClass, IReference, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Require(GeneralTransformationRule, Func(Of IClass, IReference, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of IClass, IReference, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: RequireManyByType<TRequiredInput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireManyByType<TRequiredInput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireManyByType(Of TRequiredInput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  name: CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  name: CallByType<TRequiredInput>(Func<IClass, IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallByType<TRequiredInput>(Func<IClass, IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallByType<TRequiredInput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallByType(Of TRequiredInput)(Func(Of IClass, IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of IClass, IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput1}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, TRequiredInput1>, Func<IClass, IReference, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput1), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, TRequiredInput1), Func(Of IClass, IReference, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: Call(GeneralTransformationRule<IClass, IReference>, Func<IClass, IReference, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Call(GeneralTransformationRule<IClass, IReference>, Func<IClass, IReference, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Call(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Call(GeneralTransformationRule(Of IClass, IReference), Func(Of IClass, IReference, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Call(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, Boolean))
  name.vb: Call(GeneralTransformationRule(Of IClass, IReference), Func(Of IClass, IReference, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: Call
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Boolean})
    name: Call
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``2(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyByType<TRequiredInput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallManyByType<TRequiredInput>(Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallManyByType(Of TRequiredInput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallManyByType``1(System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IClass, IReference, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IClass, IReference, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IClass, IReference, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IClass, IReference, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IClass>, Func<TRequiredInput1, TRequiredInput2, IReference>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IClass), Func(Of TRequiredInput1, TRequiredInput2, IReference), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput>(Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IClass>, Func<TRequiredInput, IReference>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IClass), Func(Of TRequiredInput, IReference), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IClass},System.Func{``0,NMF.Models.Meta.IReference},System.Func{``0,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IClass), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IReference), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IClass},System.Func{``0,``1,``2,NMF.Models.Meta.IReference},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IClass},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IReference},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IClass>, Func<TRequiredInput, TRequiredOutput, IReference>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IClass), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IReference), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IClass), Func(Of TRequiredInput, TRequiredOutput, IReference), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IClass},System.Func{``0,``1,NMF.Models.Meta.IReference},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<IClass, IReference>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of IClass, IReference))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<IClass, IReference>>, bool)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<IClass, IReference>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of IClass, IReference)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference)), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of IClass, IReference)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<IClass, IReference>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<IClass, IReference>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of IClass, IReference)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of IClass, IReference)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<IClass, IReference>>>, bool)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<IClass, IReference>>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of IClass, IReference))), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of IClass, IReference))), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<IClass, IReference>>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<IClass, IReference>>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of IClass, IReference))), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference))), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of IClass, IReference))), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: RequireMany(GeneralTransformationRule, Func<IClass, IReference, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.RequireMany(GeneralTransformationRule, Func<IClass, IReference, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).RequireMany(GeneralTransformationRule, Func(Of IClass, IReference, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of IClass, IReference, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  name: Call(GeneralTransformationRule, Func<IClass, IReference, object[]>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.Call(GeneralTransformationRule, Func<IClass, IReference, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).Call(GeneralTransformationRule, Func(Of IClass, IReference, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of IClass, IReference, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: CallMany(GeneralTransformationRule, Func<IClass, IReference, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<IClass, IReference>.CallMany(GeneralTransformationRule, Func<IClass, IReference, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).CallMany(GeneralTransformationRule, Func(Of IClass, IReference, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of IClass, IReference, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.ToString
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}
  definition: NMF.Transformations.GeneralTransformationRule`2.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<IClass, IReference>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IClass, NMF.Models.Meta.IReference>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of IClass, IReference).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IClass, NMF.Models.Meta.IReference).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IClass,NMF.Models.Meta.IReference}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.InputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.InputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: InputType
  nameWithType: GeneralTransformationRule.InputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.InputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.GeneralTransformationRule`2
  commentId: T:NMF.Transformations.GeneralTransformationRule`2
  parent: NMF.Transformations
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRule`3
  commentId: T:NMF.Transformations.TransformationRule`3
  name: TransformationRule<TIn1, TIn2, TOut>
  nameWithType: TransformationRule<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut)
  name.vb: TransformationRule(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRule`3.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule`3.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  isExternal: true
  name: CreateComputation(object[], IComputationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(TIn1, TIn2, ITransformationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
  name: Transform(TIn1, TIn2, TOut, ITransformationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.Transform(TIn1, TIn2, TOut, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.Transform(TIn1, TIn2, TOut, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).Transform(TIn1, TIn2, TOut, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).Transform(TIn1, TIn2, TOut, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  commentId: M:NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
    name: MarkInstantiatingFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, bool>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, Boolean))
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase`3.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, bool>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, bool>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>, System.Func<TIn1, TIn2, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput), System.Func(Of TIn1, TIn2, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<TIn1, TIn2, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of TIn1, TIn2, TOut, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<TIn1, TIn2, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of TIn1, TIn2, TOut, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  isExternal: true
  name: TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(System.Func<TIn1, TIn2, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  isExternal: true
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TOut>, System.Func<TIn1, TIn2, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TOut), System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, Boolean))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`2.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).InputType
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  name: WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  name: RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  isExternal: true
  name: RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, Boolean))
  name.vb: Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  isExternal: true
  name: Require(GeneralTransformationRule, Func<TIn1, TIn2, object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule, Func<TIn1, TIn2, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  name: CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  isExternal: true
  name: CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, Boolean))
  name.vb: Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, Boolean))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, bool)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, bool)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  isExternal: true
  name: Call(GeneralTransformationRule, Func<TIn1, TIn2, object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule, Func<TIn1, TIn2, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput
  name: CreateOutput
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.CreateOutput
- uid: NMF.Models.Meta.IClass
  commentId: T:NMF.Models.Meta.IClass
  parent: NMF.Models.Meta
  name: IClass
  nameWithType: IClass
  fullName: NMF.Models.Meta.IClass
- uid: NMF.Models.Meta.IReference
  commentId: T:NMF.Models.Meta.IReference
  parent: NMF.Models.Meta
  name: IReference
  nameWithType: IReference
  fullName: NMF.Models.Meta.IReference
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: System.CodeDom.CodeTypeDeclaration
  commentId: T:System.CodeDom.CodeTypeDeclaration
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform
  name: Transform
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.Transform
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications
  name: ImplementNotifications
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifications
- uid: System.Collections.Generic.List{NMF.Models.Meta.IReference}
  commentId: T:System.Collections.Generic.List{NMF.Models.Meta.IReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IReference>
  nameWithType: List<IReference>
  fullName: System.Collections.Generic.List<NMF.Models.Meta.IReference>
  nameWithType.vb: List(Of IReference)
  fullName.vb: System.Collections.Generic.List(Of NMF.Models.Meta.IReference)
  name.vb: List(Of IReference)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.CodeDom.CodeConstructor
  commentId: T:System.CodeDom.CodeConstructor
  parent: System.CodeDom
  isExternal: true
  name: CodeConstructor
  nameWithType: CodeConstructor
  fullName: System.CodeDom.CodeConstructor
- uid: System.CodeDom.CodeArgumentReferenceExpression
  commentId: T:System.CodeDom.CodeArgumentReferenceExpression
  parent: System.CodeDom
  isExternal: true
  name: CodeArgumentReferenceExpression
  nameWithType: CodeArgumentReferenceExpression
  fullName: System.CodeDom.CodeArgumentReferenceExpression
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList
  name: ImplementList
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementList
- uid: System.CodeDom.CodeTypeReference
  commentId: T:System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.CodeDom.CodeExpression
  commentId: T:System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: true
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Collections.Generic.List{NMF.Models.IModelElement}
  commentId: T:System.Collections.Generic.List{NMF.Models.IModelElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IModelElement>
  nameWithType: List<IModelElement>
  fullName: System.Collections.Generic.List<NMF.Models.IModelElement>
  nameWithType.vb: List(Of IModelElement)
  fullName.vb: System.Collections.Generic.List(Of NMF.Models.IModelElement)
  name.vb: List(Of IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection
  name: ImplementCollection
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementCollection
- uid: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable
  name: ImplementNotifiable
  nameWithType: Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.RefinedReferenceCollectionClassGenerator.ImplementNotifiable
