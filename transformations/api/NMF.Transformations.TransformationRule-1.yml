### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.TransformationRule`1
  commentId: T:NMF.Transformations.TransformationRule`1
  id: TransformationRule`1
  parent: NMF.Transformations
  children:
  - NMF.Transformations.TransformationRule`1.#ctor
  - NMF.Transformations.TransformationRule`1.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.TransformationRule`1.CreateOutput(System.Object[],NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRule`1.NeedDependenciesForOutputCreation
  - NMF.Transformations.TransformationRule`1.Transform(System.Object[],`0,NMF.Transformations.Core.ITransformationContext)
  langs:
  - csharp
  - vb
  name: TransformationRule<T>
  nameWithType: TransformationRule<T>
  fullName: NMF.Transformations.TransformationRule<T>
  type: Class
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleTN.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationRule
    path: src/Transformations/Transformations/NTL/TransformationRuleTN.cs
    startLine: 17
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nDefines a simple transformation rule of a transformation that has one input argument and an output\n"
  remarks: Simple means that the transformation rule does not require a custom computation class
  example: []
  syntax:
    content: 'public abstract class TransformationRule<T> : TransformationRuleBase<T> where T : class'
    typeParameters:
    - id: T
      description: The type of the output
    content.vb: >-
      Public MustInherit Class TransformationRule(Of T As Class)
          Inherits TransformationRuleBase(Of T)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.TransformationRuleBase{{T}}
  inheritedMembers:
  - NMF.Transformations.TransformationRuleBase{{T}}.OutputType
  - NMF.Transformations.TransformationRuleBase{{T}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  - NMF.Transformations.TransformationRuleBase{{T}}.GetRule(System.Type)
  - NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - NMF.Transformations.Core.GeneralTransformationRule.InputType
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: TransformationRule(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Transformations.TransformationRule(Of T)
  name.vb: TransformationRule(Of T)
- uid: NMF.Transformations.TransformationRule`1.#ctor
  commentId: M:NMF.Transformations.TransformationRule`1.#ctor
  id: '#ctor'
  parent: NMF.Transformations.TransformationRule`1
  langs:
  - csharp
  - vb
  name: TransformationRule()
  nameWithType: TransformationRule<T>.TransformationRule()
  fullName: NMF.Transformations.TransformationRule<T>.TransformationRule()
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleTN.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations/NTL/TransformationRuleTN.cs
    startLine: 27
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates a new transformation rule\n"
  example: []
  syntax:
    content: public TransformationRule()
    content.vb: Public Sub New
  overload: NMF.Transformations.TransformationRule`1.#ctor*
  nameWithType.vb: TransformationRule(Of T).TransformationRule()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRule(Of T).TransformationRule()
- uid: NMF.Transformations.TransformationRule`1.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule`1.NeedDependenciesForOutputCreation
  id: NeedDependenciesForOutputCreation
  parent: NMF.Transformations.TransformationRule`1
  langs:
  - csharp
  - vb
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<T>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<T>.NeedDependenciesForOutputCreation
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleTN.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NeedDependenciesForOutputCreation
    path: src/Transformations/Transformations/NTL/TransformationRuleTN.cs
    startLine: 36
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets a value indicating whether the output for all dependencies must have been created before this rule creates the output\n"
  example: []
  syntax:
    content: public override bool NeedDependenciesForOutputCreation { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property NeedDependenciesForOutputCreation As Boolean
  overridden: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  overload: NMF.Transformations.TransformationRule`1.NeedDependenciesForOutputCreation*
  nameWithType.vb: TransformationRule(Of T).NeedDependenciesForOutputCreation
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: NMF.Transformations.TransformationRule(Of T).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule`1.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule`1.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  id: CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.TransformationRule`1
  langs:
  - csharp
  - vb
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: TransformationRule<T>.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<T>.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleTN.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateComputation
    path: src/Transformations/Transformations/NTL/TransformationRuleTN.cs
    startLine: 78
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates a new Computation instance for this transformation rule or the given input \n"
  example: []
  syntax:
    content: public override sealed Computation CreateComputation(object[] input, IComputationContext context)
    parameters:
    - id: input
      type: System.Object[]
      description: The input arguments for this computation
    - id: context
      type: NMF.Transformations.Core.IComputationContext
      description: The context for this computation
    return:
      type: NMF.Transformations.Core.Computation
      description: A computation object
    content.vb: Public NotOverridable Overrides Function CreateComputation(input As Object(), context As IComputationContext) As Computation
  overridden: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  overload: NMF.Transformations.TransformationRule`1.CreateComputation*
  nameWithType.vb: TransformationRule(Of T).CreateComputation(Object(), IComputationContext)
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  fullName.vb: NMF.Transformations.TransformationRule(Of T).CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
- uid: NMF.Transformations.TransformationRule`1.Transform(System.Object[],`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`1.Transform(System.Object[],`0,NMF.Transformations.Core.ITransformationContext)
  id: Transform(System.Object[],`0,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule`1
  langs:
  - csharp
  - vb
  name: Transform(Object[], T, ITransformationContext)
  nameWithType: TransformationRule<T>.Transform(Object[], T, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<T>.Transform(System.Object[], T, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleTN.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationRuleTN.cs
    startLine: 93
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates the output of this transformation rule\n"
  remarks: At this point, not all of the computations have created their output and thus, the trace is not complete. Use the OutputDelayLevel-feature to have the trace contain all elements created in earlier levels
  example: []
  syntax:
    content: public virtual void Transform(object[] input, T output, ITransformationContext context)
    parameters:
    - id: input
      type: System.Object[]
      description: The input of the transformation rule
    - id: output
      type: '{T}'
      description: The output of the transformation created previously
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context (and trace!) object
    content.vb: Public Overridable Sub Transform(input As Object(), output As T, context As ITransformationContext)
  overload: NMF.Transformations.TransformationRule`1.Transform*
  nameWithType.vb: TransformationRule(Of T).Transform(Object(), T, ITransformationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Transformations.TransformationRule(Of T).Transform(System.Object(), T, NMF.Transformations.Core.ITransformationContext)
  name.vb: Transform(Object(), T, ITransformationContext)
- uid: NMF.Transformations.TransformationRule`1.CreateOutput(System.Object[],NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`1.CreateOutput(System.Object[],NMF.Transformations.Core.ITransformationContext)
  id: CreateOutput(System.Object[],NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule`1
  langs:
  - csharp
  - vb
  name: CreateOutput(Object[], ITransformationContext)
  nameWithType: TransformationRule<T>.CreateOutput(Object[], ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<T>.CreateOutput(System.Object[], NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleTN.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOutput
    path: src/Transformations/Transformations/NTL/TransformationRuleTN.cs
    startLine: 102
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nInitializes the transformation output\n"
  remarks: At this point, all the transformation outputs are created (also the delayed ones), thus, the trace is fully reliable
  example: []
  syntax:
    content: public virtual T CreateOutput(object[] input, ITransformationContext context)
    parameters:
    - id: input
      type: System.Object[]
      description: The input of the transformation rule
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context (and trace!) object
    return:
      type: '{T}'
    content.vb: Public Overridable Function CreateOutput(input As Object(), context As ITransformationContext) As T
  overload: NMF.Transformations.TransformationRule`1.CreateOutput*
  nameWithType.vb: TransformationRule(Of T).CreateOutput(Object(), ITransformationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Transformations.TransformationRule(Of T).CreateOutput(System.Object(), NMF.Transformations.Core.ITransformationContext)
  name.vb: CreateOutput(Object(), ITransformationContext)
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.TransformationRuleBase{{T}}
  commentId: T:NMF.Transformations.TransformationRuleBase{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`1
  name: TransformationRuleBase<T>
  nameWithType: TransformationRuleBase<T>
  fullName: NMF.Transformations.TransformationRuleBase<T>
  nameWithType.vb: TransformationRuleBase(Of T)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T)
  name.vb: TransformationRuleBase(Of T)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{T}}.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase{`0}.OutputType
  parent: NMF.Transformations.TransformationRuleBase{{T}}
  definition: NMF.Transformations.TransformationRuleBase`1.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<T>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<T>.OutputType
  nameWithType.vb: TransformationRuleBase(Of T).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T).OutputType
- uid: NMF.Transformations.TransformationRuleBase{{T}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  parent: NMF.Transformations.TransformationRuleBase{{T}}
  definition: NMF.Transformations.TransformationRuleBase`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Object[]>)
  nameWithType: TransformationRuleBase<T>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Object[]>)
  fullName: NMF.Transformations.TransformationRuleBase<T>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<System.Object[]>)
  nameWithType.vb: TransformationRuleBase(Of T).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of System.Object()))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: MarkInstantiatingFor
    nameWithType: TransformationRuleBase<T>.MarkInstantiatingFor
    fullName: NMF.Transformations.TransformationRuleBase<T>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: MarkInstantiatingFor
    nameWithType: TransformationRuleBase(Of T).MarkInstantiatingFor
    fullName: NMF.Transformations.TransformationRuleBase(Of T).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{T}}.GetRule(System.Type)
  commentId: M:NMF.Transformations.TransformationRuleBase{`0}.GetRule(System.Type)
  parent: NMF.Transformations.TransformationRuleBase{{T}}
  definition: NMF.Transformations.TransformationRuleBase`1.GetRule(System.Type)
  name: GetRule(Type)
  nameWithType: TransformationRuleBase<T>.GetRule(Type)
  fullName: NMF.Transformations.TransformationRuleBase<T>.GetRule(System.Type)
  nameWithType.vb: TransformationRuleBase(Of T).GetRule(Type)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T).GetRule(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`1.GetRule(System.Type)
    name: GetRule
    nameWithType: TransformationRuleBase<T>.GetRule
    fullName: NMF.Transformations.TransformationRuleBase<T>.GetRule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`1.GetRule(System.Type)
    name: GetRule
    nameWithType: TransformationRuleBase(Of T).GetRule
    fullName: NMF.Transformations.TransformationRuleBase(Of T).GetRule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.InputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.InputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: InputType
  nameWithType: GeneralTransformationRule.InputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.InputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations.TransformationRuleBase`1
  commentId: T:NMF.Transformations.TransformationRuleBase`1
  name: TransformationRuleBase<T>
  nameWithType: TransformationRuleBase<T>
  fullName: NMF.Transformations.TransformationRuleBase<T>
  nameWithType.vb: TransformationRuleBase(Of T)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T)
  name.vb: TransformationRuleBase(Of T)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`1.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase`1.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<T>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<T>.OutputType
  nameWithType.vb: TransformationRuleBase(Of T).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T).OutputType
- uid: NMF.Transformations.TransformationRuleBase`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TransformationRuleBase`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Object[]>)
  nameWithType: TransformationRuleBase<T>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Object[]>)
  fullName: NMF.Transformations.TransformationRuleBase<T>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<System.Object[]>)
  nameWithType.vb: TransformationRuleBase(Of T).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of System.Object()))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: MarkInstantiatingFor
    nameWithType: TransformationRuleBase<T>.MarkInstantiatingFor
    fullName: NMF.Transformations.TransformationRuleBase<T>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: MarkInstantiatingFor
    nameWithType: TransformationRuleBase(Of T).MarkInstantiatingFor
    fullName: NMF.Transformations.TransformationRuleBase(Of T).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`1.GetRule(System.Type)
  commentId: M:NMF.Transformations.TransformationRuleBase`1.GetRule(System.Type)
  isExternal: true
  name: GetRule(Type)
  nameWithType: TransformationRuleBase<T>.GetRule(Type)
  fullName: NMF.Transformations.TransformationRuleBase<T>.GetRule(System.Type)
  nameWithType.vb: TransformationRuleBase(Of T).GetRule(Type)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T).GetRule(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`1.GetRule(System.Type)
    name: GetRule
    nameWithType: TransformationRuleBase<T>.GetRule
    fullName: NMF.Transformations.TransformationRuleBase<T>.GetRule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`1.GetRule(System.Type)
    name: GetRule
    nameWithType: TransformationRuleBase(Of T).GetRule
    fullName: NMF.Transformations.TransformationRuleBase(Of T).GetRule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`1.#ctor*
  commentId: Overload:NMF.Transformations.TransformationRule`1.#ctor
  name: TransformationRule
  nameWithType: TransformationRule<T>.TransformationRule
  fullName: NMF.Transformations.TransformationRule<T>.TransformationRule
  nameWithType.vb: TransformationRule(Of T).TransformationRule
  fullName.vb: NMF.Transformations.TransformationRule(Of T).TransformationRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule`1.NeedDependenciesForOutputCreation*
  commentId: Overload:NMF.Transformations.TransformationRule`1.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<T>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<T>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of T).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of T).NeedDependenciesForOutputCreation
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`1.CreateComputation*
  commentId: Overload:NMF.Transformations.TransformationRule`1.CreateComputation
  name: CreateComputation
  nameWithType: TransformationRule<T>.CreateComputation
  fullName: NMF.Transformations.TransformationRule<T>.CreateComputation
  nameWithType.vb: TransformationRule(Of T).CreateComputation
  fullName.vb: NMF.Transformations.TransformationRule(Of T).CreateComputation
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NMF.Transformations.Core.IComputationContext
  commentId: T:NMF.Transformations.Core.IComputationContext
  parent: NMF.Transformations.Core
  name: IComputationContext
  nameWithType: IComputationContext
  fullName: NMF.Transformations.Core.IComputationContext
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: NMF.Transformations.TransformationRule`1.Transform*
  commentId: Overload:NMF.Transformations.TransformationRule`1.Transform
  name: Transform
  nameWithType: TransformationRule<T>.Transform
  fullName: NMF.Transformations.TransformationRule<T>.Transform
  nameWithType.vb: TransformationRule(Of T).Transform
  fullName.vb: NMF.Transformations.TransformationRule(Of T).Transform
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Transformations.TransformationRule`1.CreateOutput*
  commentId: Overload:NMF.Transformations.TransformationRule`1.CreateOutput
  name: CreateOutput
  nameWithType: TransformationRule<T>.CreateOutput
  fullName: NMF.Transformations.TransformationRule<T>.CreateOutput
  nameWithType.vb: TransformationRule(Of T).CreateOutput
  fullName.vb: NMF.Transformations.TransformationRule(Of T).CreateOutput
