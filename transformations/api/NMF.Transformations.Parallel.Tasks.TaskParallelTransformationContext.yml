### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  commentId: T:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  id: TaskParallelTransformationContext
  parent: NMF.Transformations.Parallel.Tasks
  children:
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.#ctor(NMF.Transformations.Core.Transformation)
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ComputationCompleted
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule(System.Type[],System.Type)
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules(System.Type[],System.Type)
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF#Transformations#Core#ITransformationContext#IsThreadSafe
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted(NMF.Transformations.Core.ComputationEventArgs)
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace
  - NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation
  langs:
  - csharp
  - vb
  name: TaskParallelTransformationContext
  nameWithType: TaskParallelTransformationContext
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  type: Class
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TaskParallelTransformationContext
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 18
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nDenotes a parallel transformation context using the TPL\n"
  example: []
  syntax:
    content: 'public class TaskParallelTransformationContext : ITransformationEngineContext, ITransformationContext'
    content.vb: >-
      Public Class TaskParallelTransformationContext
          Implements ITransformationEngineContext, ITransformationContext
  inheritance:
  - System.Object
  implements:
  - NMF.Transformations.Core.ITransformationEngineContext
  - NMF.Transformations.Core.ITransformationContext
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Transformations.Core.ITransformationContext.NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(System.Object,System.Func{{TValue}})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation
  id: Transformation
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Transformation
  nameWithType: TaskParallelTransformationContext.Transformation
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transformation
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 33
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets the parent transformation, that the context is based upon\n"
  example: []
  syntax:
    content: public Transformation Transformation { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.Transformation
    content.vb: Public ReadOnly Property Transformation As Transformation
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Transformation
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.#ctor(NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.#ctor(NMF.Transformations.Core.Transformation)
  id: '#ctor(NMF.Transformations.Core.Transformation)'
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: TaskParallelTransformationContext(Transformation)
  nameWithType: TaskParallelTransformationContext.TaskParallelTransformationContext(Transformation)
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.TaskParallelTransformationContext(NMF.Transformations.Core.Transformation)
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 43
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nCreates a new transformation context for the given transformation\n"
  example: []
  syntax:
    content: public TaskParallelTransformationContext(Transformation transformation)
    parameters:
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation, a context should be generated for
    content.vb: Public Sub New(transformation As Transformation)
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
  id: CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: CallTransformation(GeneralTransformationRule, Object[], IEnumerable)
  nameWithType: TaskParallelTransformationContext.CallTransformation(GeneralTransformationRule, Object[], IEnumerable)
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule, System.Object[], System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallTransformation
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 59
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nCalls the given transformation with the specified input\n"
  example: []
  syntax:
    content: public Computation CallTransformation(GeneralTransformationRule transformationRule, object[] input, IEnumerable context)
    parameters:
    - id: transformationRule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The rule that should be applied
    - id: input
      type: System.Object[]
      description: The input for the transformation rule
    - id: context
      type: System.Collections.IEnumerable
      description: The callers context
    return:
      type: NMF.Transformations.Core.Computation
      description: The computation that handles this request
    content.vb: Public Function CallTransformation(transformationRule As GeneralTransformationRule, input As Object(), context As IEnumerable) As Computation
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation*
  implements:
  - NMF.Transformations.Core.ITransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
  nameWithType.vb: TaskParallelTransformationContext.CallTransformation(GeneralTransformationRule, Object(), IEnumerable)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule, System.Object(), System.Collections.IEnumerable)
  name.vb: CallTransformation(GeneralTransformationRule, Object(), IEnumerable)
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry(NMF.Transformations.Core.Computation)
  id: AddTraceEntry(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: AddTraceEntry(Computation)
  nameWithType: TaskParallelTransformationContext.AddTraceEntry(Computation)
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry(NMF.Transformations.Core.Computation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AddTraceEntry
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 289
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nCreates a trace entry for the given computation object\n"
  remarks: Override for custom trace entries. A null-check for the argument is not required.
  example: []
  syntax:
    content: protected virtual void AddTraceEntry(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation that needs to be added to the trace
    content.vb: Protected Overridable Sub AddTraceEntry(computation As Computation)
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations
  id: ExecutePendingComputations
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: ExecutePendingComputations()
  nameWithType: TaskParallelTransformationContext.ExecutePendingComputations()
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations()
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutePendingComputations
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 421
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nExecutes all computations registered,but not already handled\n"
  example: []
  syntax:
    content: public void ExecutePendingComputations()
    content.vb: Public Sub ExecutePendingComputations
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules(System.Type[],System.Type)
  id: GetRules(System.Type[],System.Type)
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: GetRules(Type[], Type)
  nameWithType: TaskParallelTransformationContext.GetRules(Type[], Type)
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules(System.Type[], System.Type)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRules
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 510
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets all rules that apply the given signature\n"
  example: []
  syntax:
    content: public IEnumerable<GeneralTransformationRule> GetRules(Type[] input, Type output)
    parameters:
    - id: input
      type: System.Type[]
      description: The input argument type list
    - id: output
      type: System.Type
      description: The output type
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection with all the rules that have the given signature
    content.vb: Public Function GetRules(input As Type(), output As Type) As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules*
  nameWithType.vb: TaskParallelTransformationContext.GetRules(Type(), Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules(System.Type(), System.Type)
  name.vb: GetRules(Type(), Type)
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule(System.Type[],System.Type)
  id: GetRule(System.Type[],System.Type)
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: GetRule(Type[], Type)
  nameWithType: TaskParallelTransformationContext.GetRule(Type[], Type)
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule(System.Type[], System.Type)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRule
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 521
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets any rules that apply the given signature\n"
  example: []
  syntax:
    content: public GeneralTransformationRule GetRule(Type[] input, Type output)
    parameters:
    - id: input
      type: System.Type[]
      description: The input argument type list
    - id: output
      type: System.Type
      description: The output type
    return:
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: A random rule that has the given signature
    content.vb: Public Function GetRule(input As Type(), output As Type) As GeneralTransformationRule
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule*
  nameWithType.vb: TaskParallelTransformationContext.GetRule(Type(), Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule(System.Type(), System.Type)
  name.vb: GetRule(Type(), Type)
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag
  id: Bag
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Bag
  nameWithType: TaskParallelTransformationContext.Bag
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Bag
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 537
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets a Bag, where dynamic data can be added\n"
  remarks: The value of this property is an ExpandoObject, so that the bag can be easily extended with new properties
  example: []
  syntax:
    content: public dynamic Bag { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Bag As Object
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Bag
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data
  id: Data
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: TaskParallelTransformationContext.Data
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Data
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 546
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets a data dictionary, where data set during the transformation can be added\n"
  example: []
  syntax:
    content: public IDictionary<object, object> Data { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
    content.vb: Public ReadOnly Property Data As IDictionary(Of Object, Object)
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Data
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF#Transformations#Core#ITransformationContext#IsThreadSafe
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF#Transformations#Core#ITransformationContext#IsThreadSafe
  id: NMF#Transformations#Core#ITransformationContext#IsThreadSafe
  isEii: true
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: ITransformationContext.IsThreadSafe
  nameWithType: TaskParallelTransformationContext.ITransformationContext.IsThreadSafe
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF.Transformations.Core.ITransformationContext.IsThreadSafe
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Transformations.Core.ITransformationContext.IsThreadSafe
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 774
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets a value indicating whether calls to this transformation context implementation are thread-safe\n"
  example: []
  syntax:
    content: bool ITransformationContext.IsThreadSafe { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property NMF.Transformations.Core.ITransformationContext.IsThreadSafe As Boolean Implements ITransformationContext.IsThreadSafe
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF#Transformations#Core#ITransformationContext#IsThreadSafe*
  implements:
  - NMF.Transformations.Core.ITransformationContext.IsThreadSafe
  nameWithType.vb: TaskParallelTransformationContext.NMF.Transformations.Core.ITransformationContext.IsThreadSafe
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: NMF.Transformations.Core.ITransformationContext.IsThreadSafe
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending
  id: ExecutePending
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: ExecutePending()
  nameWithType: TaskParallelTransformationContext.ExecutePending()
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending()
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutePending
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 782
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nCalls the transformation context to finish any things yet undone\n"
  example: []
  syntax:
    content: public void ExecutePending()
    content.vb: Public Sub ExecutePending
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending*
  implements:
  - NMF.Transformations.Core.ITransformationEngineContext.ExecutePending
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations
  id: Computations
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Computations
  nameWithType: TaskParallelTransformationContext.Computations
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Computations
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 801
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets all computations (for custom trace purposes)\n"
  example: []
  syntax:
    content: public IEnumerable<Computation> Computations { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.Computation}
    content.vb: Public ReadOnly Property Computations As IEnumerable(Of Computation)
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Computations
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace
  id: Trace
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Trace
  nameWithType: TaskParallelTransformationContext.Trace
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Trace
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 809
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets the object responsible for trace operations for this transformation context\n"
  example: []
  syntax:
    content: public ITransformationTrace Trace { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.ITransformationTrace
    content.vb: Public ReadOnly Property Trace As ITransformationTrace
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Trace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input
  id: Input
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Input
  nameWithType: TaskParallelTransformationContext.Input
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Input
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 818
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets the input of the transformation context\n"
  remarks: If the transformation has multiple inputs, this returns the first input
  example: []
  syntax:
    content: public object[] Input { get; set; }
    parameters: []
    return:
      type: System.Object[]
    content.vb: Public Property Input As Object()
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Input
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs
  id: Inputs
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Inputs
  nameWithType: TaskParallelTransformationContext.Inputs
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Inputs
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 831
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets a collection of inputs\n"
  example: []
  syntax:
    content: public IList<object[]> Inputs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Object[]}
    content.vb: Public ReadOnly Property Inputs As IList(Of Object())
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Inputs
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output
  id: Output
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Output
  nameWithType: TaskParallelTransformationContext.Output
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Output
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 840
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets the output of the transformation context\n"
  remarks: If the transformation has multiple outputs, this property returns the first output
  example: []
  syntax:
    content: public object Output { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Output As Object
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs
  commentId: P:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs
  id: Outputs
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: Outputs
  nameWithType: TaskParallelTransformationContext.Outputs
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Outputs
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 848
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets a collection of outputs\n"
  example: []
  syntax:
    content: public IList<object> Outputs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Object}
    content.vb: Public ReadOnly Property Outputs As IList(Of Object)
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs*
  implements:
  - NMF.Transformations.Core.ITransformationContext.Outputs
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted(NMF.Transformations.Core.ComputationEventArgs)
  commentId: M:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted(NMF.Transformations.Core.ComputationEventArgs)
  id: OnComputationCompleted(NMF.Transformations.Core.ComputationEventArgs)
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: OnComputationCompleted(ComputationEventArgs)
  nameWithType: TaskParallelTransformationContext.OnComputationCompleted(ComputationEventArgs)
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted(NMF.Transformations.Core.ComputationEventArgs)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnComputationCompleted
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 857
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nFires the ComputationCompleted event with the given event data\n"
  example: []
  syntax:
    content: protected virtual void OnComputationCompleted(ComputationEventArgs e)
    parameters:
    - id: e
      type: NMF.Transformations.Core.ComputationEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnComputationCompleted(e As ComputationEventArgs)
  overload: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ComputationCompleted
  commentId: E:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ComputationCompleted
  id: ComputationCompleted
  parent: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext
  langs:
  - csharp
  - vb
  name: ComputationCompleted
  nameWithType: TaskParallelTransformationContext.ComputationCompleted
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ComputationCompleted
  type: Event
  source:
    remote:
      path: Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ComputationCompleted
    path: src/Transformations/Transformations.Parallel/Tasks/TaskParallelTransformationContext.cs
    startLine: 865
  assemblies:
  - NMF.Transformations.Parallel
  namespace: NMF.Transformations.Parallel.Tasks
  summary: "\nGets fired when a computation completes\n"
  example: []
  syntax:
    content: public event EventHandler<ComputationEventArgs> ComputationCompleted
    return:
      type: System.EventHandler{NMF.Transformations.Core.ComputationEventArgs}
    content.vb: Public Event ComputationCompleted As EventHandler(Of ComputationEventArgs)
  implements:
  - NMF.Transformations.Core.ITransformationContext.ComputationCompleted
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NMF.Transformations.Parallel.Tasks
  commentId: N:NMF.Transformations.Parallel.Tasks
  name: NMF.Transformations.Parallel.Tasks
  nameWithType: NMF.Transformations.Parallel.Tasks
  fullName: NMF.Transformations.Parallel.Tasks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.ITransformationEngineContext
  commentId: T:NMF.Transformations.Core.ITransformationEngineContext
  parent: NMF.Transformations.Core
  name: ITransformationEngineContext
  nameWithType: ITransformationEngineContext
  fullName: NMF.Transformations.Core.ITransformationEngineContext
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationContext.NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(System.Object,System.Func{{TValue}})
  commentId: M:NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(NMF.Transformations.Core.ITransformationContext,System.Object,System.Func{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(NMF.Transformations.Core.ITransformationContext,System.Object,System.Func{``0})
  name: GetOrCreateUserItem<TValue>(Object, Func<TValue>)
  nameWithType: TraceExtensions.GetOrCreateUserItem<TValue>(Object, Func<TValue>)
  fullName: NMF.Transformations.TraceExtensions.GetOrCreateUserItem<TValue>(System.Object, System.Func<TValue>)
  nameWithType.vb: TraceExtensions.GetOrCreateUserItem(Of TValue)(Object, Func(Of TValue))
  fullName.vb: NMF.Transformations.TraceExtensions.GetOrCreateUserItem(Of TValue)(System.Object, System.Func(Of TValue))
  name.vb: GetOrCreateUserItem(Of TValue)(Object, Func(Of TValue))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(System.Object,System.Func{``0})
    name: GetOrCreateUserItem<TValue>
    nameWithType: TraceExtensions.GetOrCreateUserItem<TValue>
    fullName: NMF.Transformations.TraceExtensions.GetOrCreateUserItem<TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(System.Object,System.Func{``0})
    name: GetOrCreateUserItem(Of TValue)
    nameWithType: TraceExtensions.GetOrCreateUserItem(Of TValue)
    fullName: NMF.Transformations.TraceExtensions.GetOrCreateUserItem(Of TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(NMF.Transformations.Core.ITransformationContext,System.Object,System.Func{``0})
  commentId: M:NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(NMF.Transformations.Core.ITransformationContext,System.Object,System.Func{``0})
  isExternal: true
  name: GetOrCreateUserItem<TValue>(ITransformationContext, Object, Func<TValue>)
  nameWithType: TraceExtensions.GetOrCreateUserItem<TValue>(ITransformationContext, Object, Func<TValue>)
  fullName: NMF.Transformations.TraceExtensions.GetOrCreateUserItem<TValue>(NMF.Transformations.Core.ITransformationContext, System.Object, System.Func<TValue>)
  nameWithType.vb: TraceExtensions.GetOrCreateUserItem(Of TValue)(ITransformationContext, Object, Func(Of TValue))
  fullName.vb: NMF.Transformations.TraceExtensions.GetOrCreateUserItem(Of TValue)(NMF.Transformations.Core.ITransformationContext, System.Object, System.Func(Of TValue))
  name.vb: GetOrCreateUserItem(Of TValue)(ITransformationContext, Object, Func(Of TValue))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(NMF.Transformations.Core.ITransformationContext,System.Object,System.Func{``0})
    name: GetOrCreateUserItem<TValue>
    nameWithType: TraceExtensions.GetOrCreateUserItem<TValue>
    fullName: NMF.Transformations.TraceExtensions.GetOrCreateUserItem<TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.GetOrCreateUserItem``1(NMF.Transformations.Core.ITransformationContext,System.Object,System.Func{``0})
    name: GetOrCreateUserItem(Of TValue)
    nameWithType: TraceExtensions.GetOrCreateUserItem(Of TValue)
    fullName: NMF.Transformations.TraceExtensions.GetOrCreateUserItem(Of TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions
  commentId: T:NMF.Transformations.TraceExtensions
  parent: NMF.Transformations
  name: TraceExtensions
  nameWithType: TraceExtensions
  fullName: NMF.Transformations.TraceExtensions
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation
  name: Transformation
  nameWithType: TaskParallelTransformationContext.Transformation
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Transformation
- uid: NMF.Transformations.Core.ITransformationContext.Transformation
  commentId: P:NMF.Transformations.Core.ITransformationContext.Transformation
  parent: NMF.Transformations.Core.ITransformationContext
  name: Transformation
  nameWithType: ITransformationContext.Transformation
  fullName: NMF.Transformations.Core.ITransformationContext.Transformation
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  parent: NMF.Transformations.Core
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.#ctor*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.#ctor
  name: TaskParallelTransformationContext
  nameWithType: TaskParallelTransformationContext.TaskParallelTransformationContext
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.TaskParallelTransformationContext
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation
  name: CallTransformation
  nameWithType: TaskParallelTransformationContext.CallTransformation
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.CallTransformation
- uid: NMF.Transformations.Core.ITransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
  commentId: M:NMF.Transformations.Core.ITransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
  parent: NMF.Transformations.Core.ITransformationContext
  isExternal: true
  name: CallTransformation(GeneralTransformationRule, Object[], IEnumerable)
  nameWithType: ITransformationContext.CallTransformation(GeneralTransformationRule, Object[], IEnumerable)
  fullName: NMF.Transformations.Core.ITransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule, System.Object[], System.Collections.IEnumerable)
  nameWithType.vb: ITransformationContext.CallTransformation(GeneralTransformationRule, Object(), IEnumerable)
  fullName.vb: NMF.Transformations.Core.ITransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule, System.Object(), System.Collections.IEnumerable)
  name.vb: CallTransformation(GeneralTransformationRule, Object(), IEnumerable)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
    name: CallTransformation
    nameWithType: ITransformationContext.CallTransformation
    fullName: NMF.Transformations.Core.ITransformationContext.CallTransformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationContext.CallTransformation(NMF.Transformations.Core.GeneralTransformationRule,System.Object[],System.Collections.IEnumerable)
    name: CallTransformation
    nameWithType: ITransformationContext.CallTransformation
    fullName: NMF.Transformations.Core.ITransformationContext.CallTransformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry
  name: AddTraceEntry
  nameWithType: TaskParallelTransformationContext.AddTraceEntry
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.AddTraceEntry
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations
  name: ExecutePendingComputations
  nameWithType: TaskParallelTransformationContext.ExecutePendingComputations
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePendingComputations
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules
  name: GetRules
  nameWithType: TaskParallelTransformationContext.GetRules
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRules
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<GeneralTransformationRule>
  nameWithType: IEnumerable<GeneralTransformationRule>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Core.GeneralTransformationRule>
  nameWithType.vb: IEnumerable(Of GeneralTransformationRule)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: IEnumerable(Of GeneralTransformationRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule
  name: GetRule
  nameWithType: TaskParallelTransformationContext.GetRule
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.GetRule
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag
  name: Bag
  nameWithType: TaskParallelTransformationContext.Bag
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Bag
- uid: NMF.Transformations.Core.ITransformationContext.Bag
  commentId: P:NMF.Transformations.Core.ITransformationContext.Bag
  parent: NMF.Transformations.Core.ITransformationContext
  name: Bag
  nameWithType: ITransformationContext.Bag
  fullName: NMF.Transformations.Core.ITransformationContext.Bag
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data
  name: Data
  nameWithType: TaskParallelTransformationContext.Data
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Data
- uid: NMF.Transformations.Core.ITransformationContext.Data
  commentId: P:NMF.Transformations.Core.ITransformationContext.Data
  parent: NMF.Transformations.Core.ITransformationContext
  name: Data
  nameWithType: ITransformationContext.Data
  fullName: NMF.Transformations.Core.ITransformationContext.Data
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Object, Object>
  nameWithType: IDictionary<Object, Object>
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>
  nameWithType.vb: IDictionary(Of Object, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object)
  name.vb: IDictionary(Of Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF#Transformations#Core#ITransformationContext#IsThreadSafe*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF#Transformations#Core#ITransformationContext#IsThreadSafe
  name: ITransformationContext.IsThreadSafe
  nameWithType: TaskParallelTransformationContext.ITransformationContext.IsThreadSafe
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.NMF.Transformations.Core.ITransformationContext.IsThreadSafe
  nameWithType.vb: TaskParallelTransformationContext.NMF.Transformations.Core.ITransformationContext.IsThreadSafe
  name.vb: NMF.Transformations.Core.ITransformationContext.IsThreadSafe
- uid: NMF.Transformations.Core.ITransformationContext.IsThreadSafe
  commentId: P:NMF.Transformations.Core.ITransformationContext.IsThreadSafe
  parent: NMF.Transformations.Core.ITransformationContext
  name: IsThreadSafe
  nameWithType: ITransformationContext.IsThreadSafe
  fullName: NMF.Transformations.Core.ITransformationContext.IsThreadSafe
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending
  name: ExecutePending
  nameWithType: TaskParallelTransformationContext.ExecutePending
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.ExecutePending
- uid: NMF.Transformations.Core.ITransformationEngineContext.ExecutePending
  commentId: M:NMF.Transformations.Core.ITransformationEngineContext.ExecutePending
  parent: NMF.Transformations.Core.ITransformationEngineContext
  name: ExecutePending()
  nameWithType: ITransformationEngineContext.ExecutePending()
  fullName: NMF.Transformations.Core.ITransformationEngineContext.ExecutePending()
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationEngineContext.ExecutePending
    name: ExecutePending
    nameWithType: ITransformationEngineContext.ExecutePending
    fullName: NMF.Transformations.Core.ITransformationEngineContext.ExecutePending
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationEngineContext.ExecutePending
    name: ExecutePending
    nameWithType: ITransformationEngineContext.ExecutePending
    fullName: NMF.Transformations.Core.ITransformationEngineContext.ExecutePending
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations
  name: Computations
  nameWithType: TaskParallelTransformationContext.Computations
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Computations
- uid: NMF.Transformations.Core.ITransformationContext.Computations
  commentId: P:NMF.Transformations.Core.ITransformationContext.Computations
  parent: NMF.Transformations.Core.ITransformationContext
  name: Computations
  nameWithType: ITransformationContext.Computations
  fullName: NMF.Transformations.Core.ITransformationContext.Computations
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.Computation}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Core.Computation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Computation>
  nameWithType: IEnumerable<Computation>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Core.Computation>
  nameWithType.vb: IEnumerable(Of Computation)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Core.Computation)
  name.vb: IEnumerable(Of Computation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace
  name: Trace
  nameWithType: TaskParallelTransformationContext.Trace
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Trace
- uid: NMF.Transformations.Core.ITransformationContext.Trace
  commentId: P:NMF.Transformations.Core.ITransformationContext.Trace
  parent: NMF.Transformations.Core.ITransformationContext
  name: Trace
  nameWithType: ITransformationContext.Trace
  fullName: NMF.Transformations.Core.ITransformationContext.Trace
- uid: NMF.Transformations.Core.ITransformationTrace
  commentId: T:NMF.Transformations.Core.ITransformationTrace
  parent: NMF.Transformations.Core
  name: ITransformationTrace
  nameWithType: ITransformationTrace
  fullName: NMF.Transformations.Core.ITransformationTrace
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input
  name: Input
  nameWithType: TaskParallelTransformationContext.Input
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Input
- uid: NMF.Transformations.Core.ITransformationContext.Input
  commentId: P:NMF.Transformations.Core.ITransformationContext.Input
  parent: NMF.Transformations.Core.ITransformationContext
  name: Input
  nameWithType: ITransformationContext.Input
  fullName: NMF.Transformations.Core.ITransformationContext.Input
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs
  name: Inputs
  nameWithType: TaskParallelTransformationContext.Inputs
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Inputs
- uid: NMF.Transformations.Core.ITransformationContext.Inputs
  commentId: P:NMF.Transformations.Core.ITransformationContext.Inputs
  parent: NMF.Transformations.Core.ITransformationContext
  name: Inputs
  nameWithType: ITransformationContext.Inputs
  fullName: NMF.Transformations.Core.ITransformationContext.Inputs
- uid: System.Collections.Generic.IList{System.Object[]}
  commentId: T:System.Collections.Generic.IList{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Object[]>
  nameWithType: IList<Object[]>
  fullName: System.Collections.Generic.IList<System.Object[]>
  nameWithType.vb: IList(Of Object())
  fullName.vb: System.Collections.Generic.IList(Of System.Object())
  name.vb: IList(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output
  name: Output
  nameWithType: TaskParallelTransformationContext.Output
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Output
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs
  name: Outputs
  nameWithType: TaskParallelTransformationContext.Outputs
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.Outputs
- uid: NMF.Transformations.Core.ITransformationContext.Outputs
  commentId: P:NMF.Transformations.Core.ITransformationContext.Outputs
  parent: NMF.Transformations.Core.ITransformationContext
  name: Outputs
  nameWithType: ITransformationContext.Outputs
  fullName: NMF.Transformations.Core.ITransformationContext.Outputs
- uid: System.Collections.Generic.IList{System.Object}
  commentId: T:System.Collections.Generic.IList{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Object>
  nameWithType: IList<Object>
  fullName: System.Collections.Generic.IList<System.Object>
  nameWithType.vb: IList(Of Object)
  fullName.vb: System.Collections.Generic.IList(Of System.Object)
  name.vb: IList(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted*
  commentId: Overload:NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted
  name: OnComputationCompleted
  nameWithType: TaskParallelTransformationContext.OnComputationCompleted
  fullName: NMF.Transformations.Parallel.Tasks.TaskParallelTransformationContext.OnComputationCompleted
- uid: NMF.Transformations.Core.ComputationEventArgs
  commentId: T:NMF.Transformations.Core.ComputationEventArgs
  parent: NMF.Transformations.Core
  name: ComputationEventArgs
  nameWithType: ComputationEventArgs
  fullName: NMF.Transformations.Core.ComputationEventArgs
- uid: NMF.Transformations.Core.ITransformationContext.ComputationCompleted
  commentId: E:NMF.Transformations.Core.ITransformationContext.ComputationCompleted
  parent: NMF.Transformations.Core.ITransformationContext
  name: ComputationCompleted
  nameWithType: ITransformationContext.ComputationCompleted
  fullName: NMF.Transformations.Core.ITransformationContext.ComputationCompleted
- uid: System.EventHandler{NMF.Transformations.Core.ComputationEventArgs}
  commentId: T:System.EventHandler{NMF.Transformations.Core.ComputationEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ComputationEventArgs>
  nameWithType: EventHandler<ComputationEventArgs>
  fullName: System.EventHandler<NMF.Transformations.Core.ComputationEventArgs>
  nameWithType.vb: EventHandler(Of ComputationEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Transformations.Core.ComputationEventArgs)
  name.vb: EventHandler(Of ComputationEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ComputationEventArgs
    name: ComputationEventArgs
    nameWithType: ComputationEventArgs
    fullName: NMF.Transformations.Core.ComputationEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ComputationEventArgs
    name: ComputationEventArgs
    nameWithType: ComputationEventArgs
    fullName: NMF.Transformations.Core.ComputationEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
