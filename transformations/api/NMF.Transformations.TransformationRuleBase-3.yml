### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  id: TransformationRuleBase`3
  parent: NMF.Transformations
  children:
  - NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  - NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  - NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  - NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  - NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  - NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  - NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  - NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  - NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  - NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  - NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  - NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  - NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  - NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  - NMF.Transformations.TransformationRuleBase`3.OutputType
  - NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  - NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  - NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  - NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  - NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  - NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  - NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  - NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  langs:
  - csharp
  - vb
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  type: Class
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationRuleBase
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 18
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nDefines a transformation rule of a transformation that has two input arguments and an output\n"
  example: []
  syntax:
    content: 'public abstract class TransformationRuleBase<TIn1, TIn2, TOut> : GeneralTransformationRule<TIn1, TIn2>'
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    - id: TOut
      description: The type of the output
    content.vb: >-
      Public MustInherit Class TransformationRuleBase(Of TIn1, TIn2, TOut)
          Inherits GeneralTransformationRule(Of TIn1, TIn2)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  derivedClasses:
  - NMF.Transformations.TransformationRule`3
  inheritedMembers:
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Rule``1
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.InputType
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(NMF.Transformations.ITransformationRulePattern{{TIn1},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.ToString
  - NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - NMF.Transformations.Core.GeneralTransformationRule.InputType
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
- uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  commentId: M:NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  id: MarkInstantiatingFor``3
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MarkInstantiatingFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 27
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nMarks the current transformation rule instantiating for every rule from S to T\n"
  example: []
  syntax:
    content: public void MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type
    - id: TRequiredInput2
      description: The second input argument type
    - id: TRequiredOutput
      description: The output argument type
    content.vb: Public Sub MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  overload: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
- uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  id: MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Boolean>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MarkInstantiatingFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 46
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nMarks the current transformation rule instantiating for every rule from S to T\n"
  example: []
  syntax:
    content: public void MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, bool> filter)
    parameters:
    - id: filter
      type: System.Func{{TIn1},{TIn2},System.Boolean}
      description: The filter that should be used to filter the inputs
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type
    - id: TRequiredInput2
      description: The second input argument type
    - id: TRequiredOutput
      description: The output argument type
    content.vb: Public Sub MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(filter As Func(Of TIn1, TIn2, Boolean))
  overload: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
- uid: NMF.Transformations.TransformationRuleBase`3.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase`3.OutputType
  id: OutputType
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: OutputType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OutputType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 61
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets the output type of this transformation rule\n"
  example: []
  syntax:
    content: public override sealed Type OutputType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public NotOverridable Overrides ReadOnly Property OutputType As Type
  overridden: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  overload: NMF.Transformations.TransformationRuleBase`3.OutputType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  id: RequireByType``3(System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 75
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires all transformation rules that transform items from S to T\n"
  remarks: This version Always takes the input parameter as input for the dependent transformations. Thus, this method will throw an exception, if the types do not match
  example: []
  syntax:
    content: public void RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type
    - id: TRequiredInput2
      description: The second input argument type
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.RequireByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  id: Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Require
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 102
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires the transformation rule with the given type\n"
  remarks: This version Always takes the input parameter as input for the dependent transformations. Thus, this method will throw an exception, if the types do not match
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), persistor As Action(Of TOut, TRequiredOutput)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  id: RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 123
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires all transformation rules that transform items from S to T\n"
  example: []
  syntax:
    content: public void RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1> selector1, Func<TIn1, TIn2, TRequiredInput2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector1
      type: System.Func{{TIn1},{TIn2},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn1},{TIn2},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector1 As Func(Of TIn1, TIn2, TRequiredInput1), selector2 As Func(Of TIn1, TIn2, TRequiredInput2), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.RequireByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  id: RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 141
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires all transformation rules that transform items from S to T\n"
  example: []
  syntax:
    content: public void RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput> selector, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub RequireByType(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TIn1, TIn2, TRequiredInput), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.RequireByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  id: Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Require
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 162
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires the transformation rule with the given type\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TIn1, TIn2, TRequiredInput1> selector1, Func<TIn1, TIn2, TRequiredInput2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn1},{TIn2},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn1},{TIn2},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector1 As Func(Of TIn1, TIn2, TRequiredInput1), selector2 As Func(Of TIn1, TIn2, TRequiredInput2), persistor As Action(Of TOut, TRequiredOutput)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  id: Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Require
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 179
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires the transformation rule with the given type\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TIn1, TIn2, TRequiredInput> selector, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TIn1, TIn2, TRequiredInput), persistor As Action(Of TOut, TRequiredOutput)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  id: RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireManyByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 195
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires all transformation rules that transform S to T with all of the specified objects\n"
  example: []
  syntax:
    content: public void RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  overload: NMF.Transformations.TransformationRuleBase`3.RequireManyByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  id: RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireManyByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 213
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires all transformation rules that transform S to T with all of the specified objects\n"
  example: []
  syntax:
    content: public void RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub RequireManyByType(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  overload: NMF.Transformations.TransformationRuleBase`3.RequireManyByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  id: RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireMany
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 233
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires the transformation rule with the given type with all of the specified inputs\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput))) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.RequireMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  id: RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireMany
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 249
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRequires the transformation rule with the given type with all of the specified inputs\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TIn1, TIn2, IEnumerable<TRequiredInput>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput
      description: The first input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function RequireMany(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput))) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.RequireMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  id: CallByType``3(System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 264
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls all transformation rules that transform items from S to T after the current transformation rule\n"
  remarks: This version Always takes the input parameter as input for the dependent transformations. Thus, this method will throw an exception, if the types do not match
  example: []
  syntax:
    content: public void CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  id: Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Call
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 290
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule\n"
  remarks: This version Always takes the input parameter as input for the dependent transformations. Thus, this method will throw an exception, if the types do not match
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), persistor As Action(Of TOut, TRequiredOutput)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  id: CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 312
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls all transformation rules that transform items from S to T after the current transformation rule\n"
  example: []
  syntax:
    content: public void CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1> selector1, Func<TIn1, TIn2, TRequiredInput2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector1
      type: System.Func{{TIn1},{TIn2},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn1},{TIn2},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformation
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector1 As Func(Of TIn1, TIn2, TRequiredInput1), selector2 As Func(Of TIn1, TIn2, TRequiredInput2), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  id: CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 330
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls all transformation rules that transform items from S to T after the current transformation rule\n"
  example: []
  syntax:
    content: public void CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput> selector, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub CallByType(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TIn1, TIn2, TRequiredInput), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  id: Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Call
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 351
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TIn1, TIn2, TRequiredInput1> selector1, Func<TIn1, TIn2, TRequiredInput2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn1},{TIn2},{TRequiredInput1}}
      description: A method that selects the frist input for the dependent transformation
    - id: selector2
      type: System.Func{{TIn1},{TIn2},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformation
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector1 As Func(Of TIn1, TIn2, TRequiredInput1), selector2 As Func(Of TIn1, TIn2, TRequiredInput2), persistor As Action(Of TOut, TRequiredOutput)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  id: Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Call
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 368
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TIn1, TIn2, TRequiredInput> selector, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TRequiredInput}}
      description: A method that selects the input for the dependent transformation
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Call(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TIn1, TIn2, TRequiredInput), persistor As Action(Of TOut, TRequiredOutput)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  id: CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallManyByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 384
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls all transformation rules that transform S to T with all of the specified objects after the current transformation rule\n"
  example: []
  syntax:
    content: public void CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallManyByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  id: CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallManyByType
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 402
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls all transformation rules that transform S to T with all of the specified objects after the current transformation rule\n"
  example: []
  syntax:
    content: public void CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformations
    content.vb: Public Sub CallManyByType(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallManyByType*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  id: CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallMany
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 422
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type with all of the specified inputs after the current transformation rule\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput))) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  id: CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallMany
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 438
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type with all of the specified inputs after the current transformation rule\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TIn1, TIn2, IEnumerable<TRequiredInput>> selector, Action<TOut, IEnumerable<TRequiredOutput>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    - id: persistor
      type: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
      description: A method that persists the result of the dependent transformation
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallMany(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), persistor As Action(Of TOut, IEnumerable(Of TRequiredOutput))) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  id: CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 454
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1> selector1, Func<TRequiredInput1, TRequiredInput2, TIn2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector1
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}}
      description: A method that selects the frist input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector1 As Func(Of TRequiredInput1, TRequiredInput2, TIn1), selector2 As Func(Of TRequiredInput1, TRequiredInput2, TIn2), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  id: CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 467
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1> selector1, Func<TRequiredInput, TIn2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector1
      type: System.Func{{TRequiredInput},{TIn1}}
      description: A method that selects the frist input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput, TRequiredOutput)(selector1 As Func(Of TRequiredInput, TIn1), selector2 As Func(Of TRequiredInput, TIn2), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  id: CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 482
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1> selector1, Func<TRequiredInput1, TRequiredInput2, TIn2> selector2, Func<TRequiredInput1, TRequiredInput2, bool> filter, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector1
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}}
      description: A method that selects the first input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector1 As Func(Of TRequiredInput1, TRequiredInput2, TIn1), selector2 As Func(Of TRequiredInput1, TRequiredInput2, TIn2), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  id: CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 500
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1> selector1, Func<TRequiredInput, TIn2> selector2, Func<TRequiredInput, bool> filter, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: selector1
      type: System.Func{{TRequiredInput},{TIn1}}
      description: A method that selects the first input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput, TRequiredOutput)(selector1 As Func(Of TRequiredInput, TIn1), selector2 As Func(Of TRequiredInput, TIn2), filter As Func(Of TRequiredInput, Boolean), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  id: CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 520
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, TIn1> selector1, Func<TRequiredInput1, TRequiredInput2, TIn2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}}
      description: A method that selects the frist input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector1 As Func(Of TRequiredInput1, TRequiredInput2, TIn1), selector2 As Func(Of TRequiredInput1, TRequiredInput2, TIn2), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  id: CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 535
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, TIn1> selector1, Func<TRequiredInput, TIn2> selector2, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TRequiredInput},{TIn1}}
      description: A method that selects the frist input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector1 As Func(Of TRequiredInput, TIn1), selector2 As Func(Of TRequiredInput, TIn2), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  id: CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 552
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, TIn1> selector1, Func<TRequiredInput1, TRequiredInput2, TIn2> selector2, Func<TRequiredInput1, TRequiredInput2, bool> filter, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}}
      description: A method that selects the first input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector1 As Func(Of TRequiredInput1, TRequiredInput2, TIn1), selector2 As Func(Of TRequiredInput1, TRequiredInput2, TIn2), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  id: CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallFor
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 572
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\n"
  example: []
  syntax:
    content: public void CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, TIn1> selector1, Func<TRequiredInput, TIn2> selector2, Func<TRequiredInput, bool> filter, Action<TOut, TRequiredOutput> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TRequiredInput},{TIn1}}
      description: A method that selects the first input for this transformation rule
    - id: selector2
      type: System.Func{{TRequiredInput},{TIn2}}
      description: A method that selects the second input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TOut},{TRequiredOutput}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector1 As Func(Of TRequiredInput, TIn1), selector2 As Func(Of TRequiredInput, TIn2), filter As Func(Of TRequiredInput, Boolean), persistor As Action(Of TOut, TRequiredOutput))
  overload: NMF.Transformations.TransformationRuleBase`3.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 591
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>> selector, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the inputs for this transformation rule
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the outputs of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 605
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>> selector, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the inputs for this transformation rule
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the outputs of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 620
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>> selector, Func<TRequiredInput1, TRequiredInput2, bool> filter, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 638
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>> selector, Func<TRequiredInput, bool> filter, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), filter As Func(Of TRequiredInput, Boolean), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 658
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>> selector, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the inputs for this transformation rule
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the outputs of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 674
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>> selector, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the inputs for this transformation rule
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the outputs of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 691
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>> selector, Func<TRequiredInput1, TRequiredInput2, bool> filter, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformation
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  id: CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallForEach
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 710
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreate a call dependency, i.e., let this transformation be called as soon as a transformation from S to T is made\nThis version calls this transformation rule for a whol collection of input objects\n"
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>> selector, Func<TRequiredInput, bool> filter, Action<TRequiredOutput, IEnumerable<TOut>> persistor)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},System.Boolean}
      description: A method that filters the applicable instances of S
    - id: persistor
      type: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
      description: A method that persists the output of this rule back to the source instance
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    - id: TRequiredOutput
      description: The output type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), filter As Func(Of TRequiredInput, Boolean), persistor As Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  overload: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  id: CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 728
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn1, TIn2, TOut, TRequiredInput1> selector1, Func<TIn1, TIn2, TOut, TRequiredInput2> selector2)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformation rule
    - id: selector2
      type: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument for the called transformation
    - id: TRequiredInput2
      description: The second input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector1 As Func(Of TIn1, TIn2, TOut, TRequiredInput1), selector2 As Func(Of TIn1, TIn2, TOut, TRequiredInput2)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  id: CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 744
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn1, TIn2, TOut, TRequiredInput1> selector1, Func<TIn1, TIn2, TOut, TRequiredInput2> selector2, Func<TIn1, TIn2, TOut, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformation rule
    - id: selector2
      type: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformation rule
    - id: filter
      type: System.Func{{TIn1},{TIn2},{TOut},System.Boolean}
      description: A method that filters the cases where the dependency should fire
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument for the called transformation
    - id: TRequiredInput2
      description: The second input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector1 As Func(Of TIn1, TIn2, TOut, TRequiredInput1), selector2 As Func(Of TIn1, TIn2, TOut, TRequiredInput2), filter As Func(Of TIn1, TIn2, TOut, Boolean)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  id: CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 762
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn1, TIn2, TOut, TRequiredInput> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput}}
      description: A method that selects the input for the dependent transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallOutputSensitive(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn1, TIn2, TOut, TRequiredInput)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  id: CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 776
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn1, TIn2, TOut, TRequiredInput> selector, Func<TIn1, TIn2, TOut, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput}}
      description: A method that selects the input for the dependent transformation rule
    - id: filter
      type: System.Func{{TIn1},{TIn2},{TOut},System.Boolean}
      description: A method that filters the cases where the dependency should fire
    typeParameters:
    - id: TRequiredInput
      description: The input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallOutputSensitive(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn1, TIn2, TOut, TRequiredInput), filter As Func(Of TIn1, TIn2, TOut, Boolean)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  id: CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallManyOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 793
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule for all inputs, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument for the called transformation
    - id: TRequiredInput2
      description: The second input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  id: CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallManyOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 807
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule for all inputs, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector, Func<TIn1, TIn2, TOut, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformation rule
    - id: filter
      type: System.Func{{TIn1},{TIn2},{TOut},System.Boolean}
      description: A method that filters the cases where the dependency should fire
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument for the called transformation
    - id: TRequiredInput2
      description: The second input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), filter As Func(Of TIn1, TIn2, TOut, Boolean)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  id: CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallManyOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 823
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule for all inputs, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallManyOutputSensitive(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput))) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  id: CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallManyOutputSensitive
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 836
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCalls the transformation rule with the given type after the current transformation rule for all inputs, but no earlier than it created its output\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>> selector, Func<TIn1, TIn2, TOut, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformation rule
    - id: filter
      type: System.Func{{TIn1},{TIn2},{TOut},System.Boolean}
      description: A method that filters the cases where the dependency should fire
    typeParameters:
    - id: TRequiredInput
      description: The input argument for the called transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallManyOutputSensitive(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), filter As Func(Of TIn1, TIn2, TOut, Boolean)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown whenever a null reference is passed to the rule parameter
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
- uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  id: TraceOutput``1(System.Func{`0,`1,`2,``0})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(System.Func<TIn1, TIn2, TOut, TKey>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TraceOutput
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 852
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates a trace entry for every computation with the key specified by the given selector method\n"
  example: []
  syntax:
    content: public TraceEntryGroup<TKey, TOut> TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey> traceSelector)
    parameters:
    - id: traceSelector
      type: System.Func{{TIn1},{TIn2},{TOut},{TKey}}
      description: A method that selects for an input the appropriate key that should be added to the trace
    typeParameters:
    - id: TKey
      description: The type of the trace entry key
    return:
      type: NMF.Transformations.TraceEntryGroup{{TKey},{TOut}}
      description: A transformation rule that can be used as group or for direct tracing purposes
    content.vb: Public Function TraceOutput(Of TKey)(traceSelector As Func(Of TIn1, TIn2, TOut, TKey)) As TraceEntryGroup(Of TKey, TOut)
  overload: NMF.Transformations.TransformationRuleBase`3.TraceOutput*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
- uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  id: TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  parent: NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TOut>, System.Func<TIn1, TIn2, TOut, TKey>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TraceOutput
    path: src/Transformations/Transformations/NTL/TransformationRuleBaseT2.cs
    startLine: 865
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates a trace entry for every computation with the key specified by the given selector method\n"
  example: []
  syntax:
    content: public ITransformationRuleDependency TraceOutput<TKey>(TraceEntryGroup<TKey, TOut> traceKey, Func<TIn1, TIn2, TOut, TKey> traceSelector)
    parameters:
    - id: traceKey
      type: NMF.Transformations.TraceEntryGroup{{TKey},{TOut}}
      description: The transformation rule that is used as group for direct tracing purposes
    - id: traceSelector
      type: System.Func{{TIn1},{TIn2},{TOut},{TKey}}
      description: A method that selects for an input the appropriate key that should be added to the trace
    typeParameters:
    - id: TKey
      description: The type of the trace entry key
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function TraceOutput(Of TKey)(traceKey As TraceEntryGroup(Of TKey, TOut), traceSelector As Func(Of TIn1, TIn2, TOut, TKey)) As ITransformationRuleDependency
  overload: NMF.Transformations.TransformationRuleBase`3.TraceOutput*
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TOut), System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`2
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  name: MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Rule``1
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule<TRule>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule(Of TRule)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule{`0,`1}.InputType
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).InputType
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(NMF.Transformations.ITransformationRulePattern{{TIn1},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  name: WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireByType``2
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  name: RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireByType``1(System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  name: RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  name: Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallByType``2
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  name: CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallByType``1(System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  name: CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  name: Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.ToString
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).ToString
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.InputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.InputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: InputType
  nameWithType: GeneralTransformationRule.InputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.InputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations.GeneralTransformationRule`2
  commentId: T:NMF.Transformations.GeneralTransformationRule`2
  parent: NMF.Transformations
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule<TRule>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule(Of TRule)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`2.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).InputType
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  name: WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  name: RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  isExternal: true
  name: RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  isExternal: true
  name: Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  name: CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  isExternal: true
  name: CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  isExternal: true
  name: Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).ToString
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor
  name: MarkInstantiatingFor
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor
- uid: System.Func{{TIn1},{TIn2},System.Boolean}
  commentId: T:System.Func{`0,`1,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, Boolean>
  nameWithType: Func<TIn1, TIn2, Boolean>
  fullName: System.Func<TIn1, TIn2, System.Boolean>
  nameWithType.vb: Func(Of TIn1, TIn2, Boolean)
  fullName.vb: System.Func(Of TIn1, TIn2, System.Boolean)
  name.vb: Func(Of TIn1, TIn2, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: NMF.Transformations.TransformationRuleBase`3.OutputType*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.RequireByType
  name: RequireByType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType
- uid: System.Action{{TOut},{TRequiredOutput}}
  commentId: T:System.Action{`1,``1}
  parent: System
  definition: System.Action`2
  name: Action<TOut, TRequiredOutput>
  nameWithType: Action<TOut, TRequiredOutput>
  fullName: System.Action<TOut, TRequiredOutput>
  nameWithType.vb: Action(Of TOut, TRequiredOutput)
  fullName.vb: System.Action(Of TOut, TRequiredOutput)
  name.vb: Action(Of TOut, TRequiredOutput)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: NMF.Transformations.TransformationRuleBase`3.Require*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.Require
  name: Require
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require
- uid: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
  commentId: T:NMF.Transformations.TransformationRuleBase{``0,``1,``2}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  nameWithType: TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  fullName: NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  nameWithType.vb: TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  name.vb: TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationRuleDependency
  commentId: T:NMF.Transformations.Core.ITransformationRuleDependency
  parent: NMF.Transformations.Core
  name: ITransformationRuleDependency
  nameWithType: ITransformationRuleDependency
  fullName: NMF.Transformations.Core.ITransformationRuleDependency
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TRequiredInput1}}
  commentId: T:System.Func{`0,`1,``0}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, TRequiredInput1>
  nameWithType: Func<TIn1, TIn2, TRequiredInput1>
  fullName: System.Func<TIn1, TIn2, TRequiredInput1>
  nameWithType.vb: Func(Of TIn1, TIn2, TRequiredInput1)
  fullName.vb: System.Func(Of TIn1, TIn2, TRequiredInput1)
  name.vb: Func(Of TIn1, TIn2, TRequiredInput1)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TRequiredInput2}}
  commentId: T:System.Func{`0,`1,``1}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, TRequiredInput2>
  nameWithType: Func<TIn1, TIn2, TRequiredInput2>
  fullName: System.Func<TIn1, TIn2, TRequiredInput2>
  nameWithType.vb: Func(Of TIn1, TIn2, TRequiredInput2)
  fullName.vb: System.Func(Of TIn1, TIn2, TRequiredInput2)
  name.vb: Func(Of TIn1, TIn2, TRequiredInput2)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TRequiredInput}}
  commentId: T:System.Func{`0,`1,``0}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, TRequiredInput>
  nameWithType: Func<TIn1, TIn2, TRequiredInput>
  fullName: System.Func<TIn1, TIn2, TRequiredInput>
  nameWithType.vb: Func(Of TIn1, TIn2, TRequiredInput)
  fullName.vb: System.Func(Of TIn1, TIn2, TRequiredInput)
  name.vb: Func(Of TIn1, TIn2, TRequiredInput)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
  commentId: T:NMF.Transformations.TransformationRuleBase{``0,``1}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TRequiredInput, TRequiredOutput>
  nameWithType: TransformationRuleBase<TRequiredInput, TRequiredOutput>
  fullName: NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>
  nameWithType.vb: TransformationRuleBase(Of TRequiredInput, TRequiredOutput)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput)
  name.vb: TransformationRuleBase(Of TRequiredInput, TRequiredOutput)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.RequireManyByType
  name: RequireManyByType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType
- uid: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
  commentId: T:System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>
  nameWithType: Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>
  fullName: System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>
  nameWithType.vb: Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))
  fullName.vb: System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2)))
  name.vb: Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}}
  commentId: T:System.Action{`1,System.Collections.Generic.IEnumerable{``1}}
  parent: System
  definition: System.Action`2
  name: Action<TOut, IEnumerable<TRequiredOutput>>
  nameWithType: Action<TOut, IEnumerable<TRequiredOutput>>
  fullName: System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>
  nameWithType.vb: Action(Of TOut, IEnumerable(Of TRequiredOutput))
  fullName.vb: System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput))
  name.vb: Action(Of TOut, IEnumerable(Of TRequiredOutput))
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
  commentId: T:System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, IEnumerable<TRequiredInput>>
  nameWithType: Func<TIn1, TIn2, IEnumerable<TRequiredInput>>
  fullName: System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>
  nameWithType.vb: Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput))
  fullName.vb: System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput))
  name.vb: Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireMany*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.RequireMany
  name: RequireMany
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.CallByType
  name: CallByType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType
- uid: NMF.Transformations.TransformationRuleBase`3.Call*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.Call
  name: Call
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.CallManyByType
  name: CallManyByType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType
- uid: NMF.Transformations.TransformationRuleBase`3.CallMany*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.CallMany
  name: CallMany
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.CallFor
  name: CallFor
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}}
  commentId: T:System.Func{``0,``1,`0}
  parent: System
  definition: System.Func`3
  name: Func<TRequiredInput1, TRequiredInput2, TIn1>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, TIn1>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, TIn1>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, TIn1)
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, TIn1)
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, TIn1)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}}
  commentId: T:System.Func{``0,``1,`1}
  parent: System
  definition: System.Func`3
  name: Func<TRequiredInput1, TRequiredInput2, TIn2>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, TIn2>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, TIn2>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, TIn2)
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, TIn2)
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, TIn2)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TRequiredInput},{TIn1}}
  commentId: T:System.Func{``0,`0}
  parent: System
  definition: System.Func`2
  name: Func<TRequiredInput, TIn1>
  nameWithType: Func<TRequiredInput, TIn1>
  fullName: System.Func<TRequiredInput, TIn1>
  nameWithType.vb: Func(Of TRequiredInput, TIn1)
  fullName.vb: System.Func(Of TRequiredInput, TIn1)
  name.vb: Func(Of TRequiredInput, TIn1)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TRequiredInput},{TIn2}}
  commentId: T:System.Func{``0,`1}
  parent: System
  definition: System.Func`2
  name: Func<TRequiredInput, TIn2>
  nameWithType: Func<TRequiredInput, TIn2>
  fullName: System.Func<TRequiredInput, TIn2>
  nameWithType.vb: Func(Of TRequiredInput, TIn2)
  fullName.vb: System.Func(Of TRequiredInput, TIn2)
  name.vb: Func(Of TRequiredInput, TIn2)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
  commentId: T:System.Func{``0,``1,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<TRequiredInput1, TRequiredInput2, Boolean>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, Boolean>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, Boolean)
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean)
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TRequiredInput},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TRequiredInput, Boolean>
  nameWithType: Func<TRequiredInput, Boolean>
  fullName: System.Func<TRequiredInput, System.Boolean>
  nameWithType.vb: Func(Of TRequiredInput, Boolean)
  fullName.vb: System.Func(Of TRequiredInput, System.Boolean)
  name.vb: Func(Of TRequiredInput, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.CallForEach
  name: CallForEach
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
  commentId: T:System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}}
  parent: System
  definition: System.Func`3
  name: Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2)))
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)))
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2)))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}}
  commentId: T:System.Action{``1,System.Collections.Generic.IEnumerable{`1}}
  parent: System
  definition: System.Action`2
  name: Action<TRequiredOutput, IEnumerable<TOut>>
  nameWithType: Action<TRequiredOutput, IEnumerable<TOut>>
  fullName: System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>
  nameWithType.vb: Action(Of TRequiredOutput, IEnumerable(Of TOut))
  fullName.vb: System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut))
  name.vb: Action(Of TRequiredOutput, IEnumerable(Of TOut))
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}}
  parent: System
  definition: System.Func`2
  name: Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>
  nameWithType: Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>
  fullName: System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>
  nameWithType.vb: Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2)))
  fullName.vb: System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)))
  name.vb: Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive
  name: CallOutputSensitive
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive
- uid: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{``0,``1}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`2
  name: GeneralTransformationRule<TRequiredInput1, TRequiredInput2>
  nameWithType: GeneralTransformationRule<TRequiredInput1, TRequiredInput2>
  fullName: NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>
  nameWithType.vb: GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2)
  name.vb: GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput1}}
  commentId: T:System.Func{`0,`1,`2,``0}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, TOut, TRequiredInput1>
  nameWithType: Func<TIn1, TIn2, TOut, TRequiredInput1>
  fullName: System.Func<TIn1, TIn2, TOut, TRequiredInput1>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut, TRequiredInput1)
  fullName.vb: System.Func(Of TIn1, TIn2, TOut, TRequiredInput1)
  name.vb: Func(Of TIn1, TIn2, TOut, TRequiredInput1)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput2}}
  commentId: T:System.Func{`0,`1,`2,``1}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, TOut, TRequiredInput2>
  nameWithType: Func<TIn1, TIn2, TOut, TRequiredInput2>
  fullName: System.Func<TIn1, TIn2, TOut, TRequiredInput2>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut, TRequiredInput2)
  fullName.vb: System.Func(Of TIn1, TIn2, TOut, TRequiredInput2)
  name.vb: Func(Of TIn1, TIn2, TOut, TRequiredInput2)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TOut},System.Boolean}
  commentId: T:System.Func{`0,`1,`2,System.Boolean}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, TOut, Boolean>
  nameWithType: Func<TIn1, TIn2, TOut, Boolean>
  fullName: System.Func<TIn1, TIn2, TOut, System.Boolean>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut, Boolean)
  fullName.vb: System.Func(Of TIn1, TIn2, TOut, System.Boolean)
  name.vb: Func(Of TIn1, TIn2, TOut, Boolean)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{``0}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TRequiredInput>
  nameWithType: GeneralTransformationRule<TRequiredInput>
  fullName: NMF.Transformations.GeneralTransformationRule<TRequiredInput>
  nameWithType.vb: GeneralTransformationRule(Of TRequiredInput)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TRequiredInput)
  name.vb: GeneralTransformationRule(Of TRequiredInput)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput}}
  commentId: T:System.Func{`0,`1,`2,``0}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, TOut, TRequiredInput>
  nameWithType: Func<TIn1, TIn2, TOut, TRequiredInput>
  fullName: System.Func<TIn1, TIn2, TOut, TRequiredInput>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut, TRequiredInput)
  fullName.vb: System.Func(Of TIn1, TIn2, TOut, TRequiredInput)
  name.vb: Func(Of TIn1, TIn2, TOut, TRequiredInput)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive
  name: CallManyOutputSensitive
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive
- uid: System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
  commentId: T:System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>
  nameWithType: Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>
  fullName: System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))
  fullName.vb: System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2)))
  name.vb: Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
  commentId: T:System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>
  nameWithType: Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>
  fullName: System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput))
  fullName.vb: System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput))
  name.vb: Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput))
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput*
  commentId: Overload:NMF.Transformations.TransformationRuleBase`3.TraceOutput
  name: TraceOutput
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput
- uid: System.Func{{TIn1},{TIn2},{TOut},{TKey}}
  commentId: T:System.Func{`0,`1,`2,``0}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, TOut, TKey>
  nameWithType: Func<TIn1, TIn2, TOut, TKey>
  fullName: System.Func<TIn1, TIn2, TOut, TKey>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut, TKey)
  fullName.vb: System.Func(Of TIn1, TIn2, TOut, TKey)
  name.vb: Func(Of TIn1, TIn2, TOut, TKey)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceEntryGroup{{TKey},{TOut}}
  commentId: T:NMF.Transformations.TraceEntryGroup{``0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.TraceEntryGroup`2
  name: TraceEntryGroup<TKey, TOut>
  nameWithType: TraceEntryGroup<TKey, TOut>
  fullName: NMF.Transformations.TraceEntryGroup<TKey, TOut>
  nameWithType.vb: TraceEntryGroup(Of TKey, TOut)
  fullName.vb: NMF.Transformations.TraceEntryGroup(Of TKey, TOut)
  name.vb: TraceEntryGroup(Of TKey, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceEntryGroup`2
  commentId: T:NMF.Transformations.TraceEntryGroup`2
  name: TraceEntryGroup<TKey, TOut>
  nameWithType: TraceEntryGroup<TKey, TOut>
  fullName: NMF.Transformations.TraceEntryGroup<TKey, TOut>
  nameWithType.vb: TraceEntryGroup(Of TKey, TOut)
  fullName.vb: NMF.Transformations.TraceEntryGroup(Of TKey, TOut)
  name.vb: TraceEntryGroup(Of TKey, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
