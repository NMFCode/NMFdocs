### YamlMime:ManagedReference
items:
- uid: NMF.Optimizations.RepeatAverageBenchmark`1
  commentId: T:NMF.Optimizations.RepeatAverageBenchmark`1
  id: RepeatAverageBenchmark`1
  parent: NMF.Optimizations
  children:
  - NMF.Optimizations.RepeatAverageBenchmark`1.#ctor(NMF.Optimizations.IBenchmark{`0},System.Int32)
  - NMF.Optimizations.RepeatAverageBenchmark`1.Inner
  - NMF.Optimizations.RepeatAverageBenchmark`1.MeasureConfiguration(`0)
  - NMF.Optimizations.RepeatAverageBenchmark`1.Metrics
  - NMF.Optimizations.RepeatAverageBenchmark`1.N
  langs:
  - csharp
  - vb
  name: RepeatAverageBenchmark<T>
  nameWithType: RepeatAverageBenchmark<T>
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>
  type: Class
  source:
    remote:
      path: Optimizations/Optimizations/RepeatAverageBenchmark.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RepeatAverageBenchmark
    path: src/Optimizations/Optimizations/RepeatAverageBenchmark.cs
    startLine: 11
  assemblies:
  - NMF.Optimizaions
  namespace: NMF.Optimizations
  summary: "\nDenotes a benchmark that repeats measurements a number of times and takes the average results\n"
  example: []
  syntax:
    content: 'public class RepeatAverageBenchmark<T> : IBenchmark<T>'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Class RepeatAverageBenchmark(Of T)
          Implements IBenchmark(Of T)
  inheritance:
  - System.Object
  implements:
  - NMF.Optimizations.IBenchmark{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: RepeatAverageBenchmark(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T)
  name.vb: RepeatAverageBenchmark(Of T)
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.Inner
  commentId: P:NMF.Optimizations.RepeatAverageBenchmark`1.Inner
  id: Inner
  parent: NMF.Optimizations.RepeatAverageBenchmark`1
  langs:
  - csharp
  - vb
  name: Inner
  nameWithType: RepeatAverageBenchmark<T>.Inner
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.Inner
  type: Property
  source:
    remote:
      path: Optimizations/Optimizations/RepeatAverageBenchmark.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Inner
    path: src/Optimizations/Optimizations/RepeatAverageBenchmark.cs
    startLine: 16
  assemblies:
  - NMF.Optimizaions
  namespace: NMF.Optimizations
  summary: "\nThe inner benchmark\n"
  example: []
  syntax:
    content: public IBenchmark<T> Inner { get; set; }
    parameters: []
    return:
      type: NMF.Optimizations.IBenchmark{{T}}
    content.vb: Public Property Inner As IBenchmark(Of T)
  overload: NMF.Optimizations.RepeatAverageBenchmark`1.Inner*
  nameWithType.vb: RepeatAverageBenchmark(Of T).Inner
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).Inner
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.N
  commentId: P:NMF.Optimizations.RepeatAverageBenchmark`1.N
  id: N
  parent: NMF.Optimizations.RepeatAverageBenchmark`1
  langs:
  - csharp
  - vb
  name: N
  nameWithType: RepeatAverageBenchmark<T>.N
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.N
  type: Property
  source:
    remote:
      path: Optimizations/Optimizations/RepeatAverageBenchmark.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: N
    path: src/Optimizations/Optimizations/RepeatAverageBenchmark.cs
    startLine: 21
  assemblies:
  - NMF.Optimizaions
  namespace: NMF.Optimizations
  summary: "\nGets the number of repetitions\n"
  example: []
  syntax:
    content: public int N { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property N As Integer
  overload: NMF.Optimizations.RepeatAverageBenchmark`1.N*
  nameWithType.vb: RepeatAverageBenchmark(Of T).N
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).N
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.Metrics
  commentId: P:NMF.Optimizations.RepeatAverageBenchmark`1.Metrics
  id: Metrics
  parent: NMF.Optimizations.RepeatAverageBenchmark`1
  langs:
  - csharp
  - vb
  name: Metrics
  nameWithType: RepeatAverageBenchmark<T>.Metrics
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.Metrics
  type: Property
  source:
    remote:
      path: Optimizations/Optimizations/RepeatAverageBenchmark.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Metrics
    path: src/Optimizations/Optimizations/RepeatAverageBenchmark.cs
    startLine: 24
  assemblies:
  - NMF.Optimizaions
  namespace: NMF.Optimizations
  example: []
  syntax:
    content: public IEnumerable<string> Metrics { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Metrics As IEnumerable(Of String)
  overload: NMF.Optimizations.RepeatAverageBenchmark`1.Metrics*
  implements:
  - NMF.Optimizations.IBenchmark{{T}}.Metrics
  nameWithType.vb: RepeatAverageBenchmark(Of T).Metrics
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).Metrics
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.#ctor(NMF.Optimizations.IBenchmark{`0},System.Int32)
  commentId: M:NMF.Optimizations.RepeatAverageBenchmark`1.#ctor(NMF.Optimizations.IBenchmark{`0},System.Int32)
  id: '#ctor(NMF.Optimizations.IBenchmark{`0},System.Int32)'
  parent: NMF.Optimizations.RepeatAverageBenchmark`1
  langs:
  - csharp
  - vb
  name: RepeatAverageBenchmark(IBenchmark<T>, Int32)
  nameWithType: RepeatAverageBenchmark<T>.RepeatAverageBenchmark(IBenchmark<T>, Int32)
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.RepeatAverageBenchmark(NMF.Optimizations.IBenchmark<T>, System.Int32)
  type: Constructor
  source:
    remote:
      path: Optimizations/Optimizations/RepeatAverageBenchmark.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Optimizations/Optimizations/RepeatAverageBenchmark.cs
    startLine: 37
  assemblies:
  - NMF.Optimizaions
  namespace: NMF.Optimizations
  summary: "\nCreates a new repeated benchmark\n"
  example: []
  syntax:
    content: public RepeatAverageBenchmark(IBenchmark<T> inner, int n = 5)
    parameters:
    - id: inner
      type: NMF.Optimizations.IBenchmark{{T}}
      description: The inner benchmark
    - id: n
      type: System.Int32
      description: The number of repetitions
    content.vb: Public Sub New(inner As IBenchmark(Of T), n As Integer = 5)
  overload: NMF.Optimizations.RepeatAverageBenchmark`1.#ctor*
  nameWithType.vb: RepeatAverageBenchmark(Of T).RepeatAverageBenchmark(IBenchmark(Of T), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).RepeatAverageBenchmark(NMF.Optimizations.IBenchmark(Of T), System.Int32)
  name.vb: RepeatAverageBenchmark(IBenchmark(Of T), Int32)
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.MeasureConfiguration(`0)
  commentId: M:NMF.Optimizations.RepeatAverageBenchmark`1.MeasureConfiguration(`0)
  id: MeasureConfiguration(`0)
  parent: NMF.Optimizations.RepeatAverageBenchmark`1
  langs:
  - csharp
  - vb
  name: MeasureConfiguration(T)
  nameWithType: RepeatAverageBenchmark<T>.MeasureConfiguration(T)
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.MeasureConfiguration(T)
  type: Method
  source:
    remote:
      path: Optimizations/Optimizations/RepeatAverageBenchmark.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MeasureConfiguration
    path: src/Optimizations/Optimizations/RepeatAverageBenchmark.cs
    startLine: 47
  assemblies:
  - NMF.Optimizaions
  namespace: NMF.Optimizations
  example: []
  syntax:
    content: public IDictionary<string, double> MeasureConfiguration(T configuration)
    parameters:
    - id: configuration
      type: '{T}'
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Double}
    content.vb: Public Function MeasureConfiguration(configuration As T) As IDictionary(Of String, Double)
  overload: NMF.Optimizations.RepeatAverageBenchmark`1.MeasureConfiguration*
  implements:
  - NMF.Optimizations.IBenchmark{{T}}.MeasureConfiguration({T})
  nameWithType.vb: RepeatAverageBenchmark(Of T).MeasureConfiguration(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).MeasureConfiguration(T)
references:
- uid: NMF.Optimizations
  commentId: N:NMF.Optimizations
  name: NMF.Optimizations
  nameWithType: NMF.Optimizations
  fullName: NMF.Optimizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Optimizations.IBenchmark{{T}}
  commentId: T:NMF.Optimizations.IBenchmark{`0}
  parent: NMF.Optimizations
  definition: NMF.Optimizations.IBenchmark`1
  name: IBenchmark<T>
  nameWithType: IBenchmark<T>
  fullName: NMF.Optimizations.IBenchmark<T>
  nameWithType.vb: IBenchmark(Of T)
  fullName.vb: NMF.Optimizations.IBenchmark(Of T)
  name.vb: IBenchmark(Of T)
  spec.csharp:
  - uid: NMF.Optimizations.IBenchmark`1
    name: IBenchmark
    nameWithType: IBenchmark
    fullName: NMF.Optimizations.IBenchmark
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Optimizations.IBenchmark`1
    name: IBenchmark
    nameWithType: IBenchmark
    fullName: NMF.Optimizations.IBenchmark
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Optimizations.IBenchmark`1
  commentId: T:NMF.Optimizations.IBenchmark`1
  name: IBenchmark<T>
  nameWithType: IBenchmark<T>
  fullName: NMF.Optimizations.IBenchmark<T>
  nameWithType.vb: IBenchmark(Of T)
  fullName.vb: NMF.Optimizations.IBenchmark(Of T)
  name.vb: IBenchmark(Of T)
  spec.csharp:
  - uid: NMF.Optimizations.IBenchmark`1
    name: IBenchmark
    nameWithType: IBenchmark
    fullName: NMF.Optimizations.IBenchmark
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Optimizations.IBenchmark`1
    name: IBenchmark
    nameWithType: IBenchmark
    fullName: NMF.Optimizations.IBenchmark
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.Inner*
  commentId: Overload:NMF.Optimizations.RepeatAverageBenchmark`1.Inner
  name: Inner
  nameWithType: RepeatAverageBenchmark<T>.Inner
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.Inner
  nameWithType.vb: RepeatAverageBenchmark(Of T).Inner
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).Inner
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.N*
  commentId: Overload:NMF.Optimizations.RepeatAverageBenchmark`1.N
  name: N
  nameWithType: RepeatAverageBenchmark<T>.N
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.N
  nameWithType.vb: RepeatAverageBenchmark(Of T).N
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).N
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.Metrics*
  commentId: Overload:NMF.Optimizations.RepeatAverageBenchmark`1.Metrics
  name: Metrics
  nameWithType: RepeatAverageBenchmark<T>.Metrics
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.Metrics
  nameWithType.vb: RepeatAverageBenchmark(Of T).Metrics
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).Metrics
- uid: NMF.Optimizations.IBenchmark{{T}}.Metrics
  commentId: P:NMF.Optimizations.IBenchmark{`0}.Metrics
  parent: NMF.Optimizations.IBenchmark{{T}}
  definition: NMF.Optimizations.IBenchmark`1.Metrics
  name: Metrics
  nameWithType: IBenchmark<T>.Metrics
  fullName: NMF.Optimizations.IBenchmark<T>.Metrics
  nameWithType.vb: IBenchmark(Of T).Metrics
  fullName.vb: NMF.Optimizations.IBenchmark(Of T).Metrics
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Optimizations.IBenchmark`1.Metrics
  commentId: P:NMF.Optimizations.IBenchmark`1.Metrics
  name: Metrics
  nameWithType: IBenchmark<T>.Metrics
  fullName: NMF.Optimizations.IBenchmark<T>.Metrics
  nameWithType.vb: IBenchmark(Of T).Metrics
  fullName.vb: NMF.Optimizations.IBenchmark(Of T).Metrics
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.#ctor*
  commentId: Overload:NMF.Optimizations.RepeatAverageBenchmark`1.#ctor
  name: RepeatAverageBenchmark
  nameWithType: RepeatAverageBenchmark<T>.RepeatAverageBenchmark
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.RepeatAverageBenchmark
  nameWithType.vb: RepeatAverageBenchmark(Of T).RepeatAverageBenchmark
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).RepeatAverageBenchmark
- uid: NMF.Optimizations.RepeatAverageBenchmark`1.MeasureConfiguration*
  commentId: Overload:NMF.Optimizations.RepeatAverageBenchmark`1.MeasureConfiguration
  name: MeasureConfiguration
  nameWithType: RepeatAverageBenchmark<T>.MeasureConfiguration
  fullName: NMF.Optimizations.RepeatAverageBenchmark<T>.MeasureConfiguration
  nameWithType.vb: RepeatAverageBenchmark(Of T).MeasureConfiguration
  fullName.vb: NMF.Optimizations.RepeatAverageBenchmark(Of T).MeasureConfiguration
- uid: NMF.Optimizations.IBenchmark{{T}}.MeasureConfiguration({T})
  commentId: M:NMF.Optimizations.IBenchmark{`0}.MeasureConfiguration(`0)
  parent: NMF.Optimizations.IBenchmark{{T}}
  definition: NMF.Optimizations.IBenchmark`1.MeasureConfiguration(`0)
  name: MeasureConfiguration(T)
  nameWithType: IBenchmark<T>.MeasureConfiguration(T)
  fullName: NMF.Optimizations.IBenchmark<T>.MeasureConfiguration(T)
  nameWithType.vb: IBenchmark(Of T).MeasureConfiguration(T)
  fullName.vb: NMF.Optimizations.IBenchmark(Of T).MeasureConfiguration(T)
  spec.csharp:
  - uid: NMF.Optimizations.IBenchmark`1.MeasureConfiguration(`0)
    name: MeasureConfiguration
    nameWithType: IBenchmark<T>.MeasureConfiguration
    fullName: NMF.Optimizations.IBenchmark<T>.MeasureConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Optimizations.IBenchmark`1.MeasureConfiguration(`0)
    name: MeasureConfiguration
    nameWithType: IBenchmark(Of T).MeasureConfiguration
    fullName: NMF.Optimizations.IBenchmark(Of T).MeasureConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IDictionary{System.String,System.Double}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Double>
  nameWithType: IDictionary<String, Double>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Double>
  nameWithType.vb: IDictionary(Of String, Double)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Double)
  name.vb: IDictionary(Of String, Double)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Optimizations.IBenchmark`1.MeasureConfiguration(`0)
  commentId: M:NMF.Optimizations.IBenchmark`1.MeasureConfiguration(`0)
  name: MeasureConfiguration(T)
  nameWithType: IBenchmark<T>.MeasureConfiguration(T)
  fullName: NMF.Optimizations.IBenchmark<T>.MeasureConfiguration(T)
  nameWithType.vb: IBenchmark(Of T).MeasureConfiguration(T)
  fullName.vb: NMF.Optimizations.IBenchmark(Of T).MeasureConfiguration(T)
  spec.csharp:
  - uid: NMF.Optimizations.IBenchmark`1.MeasureConfiguration(`0)
    name: MeasureConfiguration
    nameWithType: IBenchmark<T>.MeasureConfiguration
    fullName: NMF.Optimizations.IBenchmark<T>.MeasureConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Optimizations.IBenchmark`1.MeasureConfiguration(`0)
    name: MeasureConfiguration
    nameWithType: IBenchmark(Of T).MeasureConfiguration
    fullName: NMF.Optimizations.IBenchmark(Of T).MeasureConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
