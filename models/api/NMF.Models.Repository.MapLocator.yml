### YamlMime:ManagedReference
items:
- uid: NMF.Models.Repository.MapLocator
  commentId: T:NMF.Models.Repository.MapLocator
  id: MapLocator
  parent: NMF.Models.Repository
  children:
  - NMF.Models.Repository.MapLocator.#ctor
  - NMF.Models.Repository.MapLocator.#ctor(System.Collections.Generic.IDictionary{System.Uri,System.String})
  - NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  - NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  - NMF.Models.Repository.MapLocator.Mappings
  - NMF.Models.Repository.MapLocator.Open(System.Uri)
  langs:
  - csharp
  - vb
  name: MapLocator
  nameWithType: MapLocator
  fullName: NMF.Models.Repository.MapLocator
  type: Class
  source:
    remote:
      path: Models/Models/Repository/MapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MapLocator
    path: src/Models/Models/Repository/MapLocator.cs
    startLine: 11
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nDenotes an abstract locator that maps to preconfigured locations\n"
  example: []
  syntax:
    content: 'public abstract class MapLocator : IModelLocator'
    content.vb: Public MustInherit Class MapLocator Implements IModelLocator
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Models.Repository.FileMapLocator
  - NMF.Models.Repository.ResourceMapLocator
  implements:
  - NMF.Models.Repository.IModelLocator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Models.Repository.MapLocator.Mappings
  commentId: P:NMF.Models.Repository.MapLocator.Mappings
  id: Mappings
  parent: NMF.Models.Repository.MapLocator
  langs:
  - csharp
  - vb
  name: Mappings
  nameWithType: MapLocator.Mappings
  fullName: NMF.Models.Repository.MapLocator.Mappings
  type: Property
  source:
    remote:
      path: Models/Models/Repository/MapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Mappings
    path: src/Models/Models/Repository/MapLocator.cs
    startLine: 16
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nGets the preconfiured mappings\n"
  example: []
  syntax:
    content: public IDictionary<Uri, string> Mappings { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Uri,System.String}
    content.vb: Public Property Mappings As IDictionary(Of Uri, String)
  overload: NMF.Models.Repository.MapLocator.Mappings*
- uid: NMF.Models.Repository.MapLocator.#ctor
  commentId: M:NMF.Models.Repository.MapLocator.#ctor
  id: '#ctor'
  parent: NMF.Models.Repository.MapLocator
  langs:
  - csharp
  - vb
  name: MapLocator()
  nameWithType: MapLocator.MapLocator()
  fullName: NMF.Models.Repository.MapLocator.MapLocator()
  type: Constructor
  source:
    remote:
      path: Models/Models/Repository/MapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/Repository/MapLocator.cs
    startLine: 21
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nCreates a new instance\n"
  example: []
  syntax:
    content: public MapLocator()
    content.vb: Public Sub New()
  overload: NMF.Models.Repository.MapLocator.#ctor*
  nameWithType.vb: MapLocator.New()
  fullName.vb: NMF.Models.Repository.MapLocator.New()
  name.vb: New()
- uid: NMF.Models.Repository.MapLocator.#ctor(System.Collections.Generic.IDictionary{System.Uri,System.String})
  commentId: M:NMF.Models.Repository.MapLocator.#ctor(System.Collections.Generic.IDictionary{System.Uri,System.String})
  id: '#ctor(System.Collections.Generic.IDictionary{System.Uri,System.String})'
  parent: NMF.Models.Repository.MapLocator
  langs:
  - csharp
  - vb
  name: MapLocator(IDictionary<Uri, string>)
  nameWithType: MapLocator.MapLocator(IDictionary<Uri, string>)
  fullName: NMF.Models.Repository.MapLocator.MapLocator(System.Collections.Generic.IDictionary<System.Uri, string>)
  type: Constructor
  source:
    remote:
      path: Models/Models/Repository/MapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/Repository/MapLocator.cs
    startLine: 30
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nCreates a new instance\n"
  example: []
  syntax:
    content: public MapLocator(IDictionary<Uri, string> mappings)
    parameters:
    - id: mappings
      type: System.Collections.Generic.IDictionary{System.Uri,System.String}
      description: The mappings
    content.vb: Public Sub New(mappings As IDictionary(Of Uri, String))
  overload: NMF.Models.Repository.MapLocator.#ctor*
  nameWithType.vb: MapLocator.New(IDictionary(Of Uri, String))
  fullName.vb: NMF.Models.Repository.MapLocator.New(System.Collections.Generic.IDictionary(Of System.Uri, String))
  name.vb: New(IDictionary(Of Uri, String))
- uid: NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  commentId: M:NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  id: CanLocate(System.Uri)
  parent: NMF.Models.Repository.MapLocator
  langs:
  - csharp
  - vb
  name: CanLocate(Uri)
  nameWithType: MapLocator.CanLocate(Uri)
  fullName: NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanLocate
    path: src/Models/Models/Repository/MapLocator.cs
    startLine: 36
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  example: []
  syntax:
    content: public bool CanLocate(Uri uri)
    parameters:
    - id: uri
      type: System.Uri
    return:
      type: System.Boolean
    content.vb: Public Function CanLocate(uri As Uri) As Boolean
  overload: NMF.Models.Repository.MapLocator.CanLocate*
  implements:
  - NMF.Models.Repository.IModelLocator.CanLocate(System.Uri)
- uid: NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  commentId: M:NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  id: GetRepositoryUri(System.Uri)
  parent: NMF.Models.Repository.MapLocator
  langs:
  - csharp
  - vb
  name: GetRepositoryUri(Uri)
  nameWithType: MapLocator.GetRepositoryUri(Uri)
  fullName: NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRepositoryUri
    path: src/Models/Models/Repository/MapLocator.cs
    startLine: 42
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  example: []
  syntax:
    content: public Uri GetRepositoryUri(Uri uri)
    parameters:
    - id: uri
      type: System.Uri
    return:
      type: System.Uri
    content.vb: Public Function GetRepositoryUri(uri As Uri) As Uri
  overload: NMF.Models.Repository.MapLocator.GetRepositoryUri*
  implements:
  - NMF.Models.Repository.IModelLocator.GetRepositoryUri(System.Uri)
- uid: NMF.Models.Repository.MapLocator.Open(System.Uri)
  commentId: M:NMF.Models.Repository.MapLocator.Open(System.Uri)
  id: Open(System.Uri)
  parent: NMF.Models.Repository.MapLocator
  langs:
  - csharp
  - vb
  name: Open(Uri)
  nameWithType: MapLocator.Open(Uri)
  fullName: NMF.Models.Repository.MapLocator.Open(System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Open
    path: src/Models/Models/Repository/MapLocator.cs
    startLine: 53
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  example: []
  syntax:
    content: public abstract Stream Open(Uri repositoryId)
    parameters:
    - id: repositoryId
      type: System.Uri
    return:
      type: System.IO.Stream
    content.vb: Public MustOverride Function Open(repositoryId As Uri) As Stream
  overload: NMF.Models.Repository.MapLocator.Open*
  implements:
  - NMF.Models.Repository.IModelLocator.Open(System.Uri)
references:
- uid: NMF.Models.Repository
  commentId: N:NMF.Models.Repository
  name: NMF.Models.Repository
  nameWithType: NMF.Models.Repository
  fullName: NMF.Models.Repository
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Repository
    name: Repository
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Repository
    name: Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Models.Repository.IModelLocator
  commentId: T:NMF.Models.Repository.IModelLocator
  parent: NMF.Models.Repository
  name: IModelLocator
  nameWithType: IModelLocator
  fullName: NMF.Models.Repository.IModelLocator
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Repository.MapLocator.Mappings*
  commentId: Overload:NMF.Models.Repository.MapLocator.Mappings
  name: Mappings
  nameWithType: MapLocator.Mappings
  fullName: NMF.Models.Repository.MapLocator.Mappings
- uid: System.Collections.Generic.IDictionary{System.Uri,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.Uri,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Uri, string>
  nameWithType: IDictionary<Uri, string>
  fullName: System.Collections.Generic.IDictionary<System.Uri, string>
  nameWithType.vb: IDictionary(Of Uri, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, String)
  name.vb: IDictionary(Of Uri, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Models.Repository.MapLocator.#ctor*
  commentId: Overload:NMF.Models.Repository.MapLocator.#ctor
  name: MapLocator
  nameWithType: MapLocator.MapLocator
  fullName: NMF.Models.Repository.MapLocator.MapLocator
  nameWithType.vb: MapLocator.New
  fullName.vb: NMF.Models.Repository.MapLocator.New
  name.vb: New
- uid: NMF.Models.Repository.MapLocator.CanLocate*
  commentId: Overload:NMF.Models.Repository.MapLocator.CanLocate
  name: CanLocate
  nameWithType: MapLocator.CanLocate
  fullName: NMF.Models.Repository.MapLocator.CanLocate
- uid: NMF.Models.Repository.IModelLocator.CanLocate(System.Uri)
  commentId: M:NMF.Models.Repository.IModelLocator.CanLocate(System.Uri)
  parent: NMF.Models.Repository.IModelLocator
  isExternal: true
  name: CanLocate(Uri)
  nameWithType: IModelLocator.CanLocate(Uri)
  fullName: NMF.Models.Repository.IModelLocator.CanLocate(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.IModelLocator.CanLocate(System.Uri)
    name: CanLocate
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.IModelLocator.CanLocate(System.Uri)
    name: CanLocate
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Models.Repository.MapLocator.GetRepositoryUri*
  commentId: Overload:NMF.Models.Repository.MapLocator.GetRepositoryUri
  name: GetRepositoryUri
  nameWithType: MapLocator.GetRepositoryUri
  fullName: NMF.Models.Repository.MapLocator.GetRepositoryUri
- uid: NMF.Models.Repository.IModelLocator.GetRepositoryUri(System.Uri)
  commentId: M:NMF.Models.Repository.IModelLocator.GetRepositoryUri(System.Uri)
  parent: NMF.Models.Repository.IModelLocator
  isExternal: true
  name: GetRepositoryUri(Uri)
  nameWithType: IModelLocator.GetRepositoryUri(Uri)
  fullName: NMF.Models.Repository.IModelLocator.GetRepositoryUri(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.IModelLocator.GetRepositoryUri(System.Uri)
    name: GetRepositoryUri
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.IModelLocator.GetRepositoryUri(System.Uri)
    name: GetRepositoryUri
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: NMF.Models.Repository.MapLocator.Open*
  commentId: Overload:NMF.Models.Repository.MapLocator.Open
  name: Open
  nameWithType: MapLocator.Open
  fullName: NMF.Models.Repository.MapLocator.Open
- uid: NMF.Models.Repository.IModelLocator.Open(System.Uri)
  commentId: M:NMF.Models.Repository.IModelLocator.Open(System.Uri)
  parent: NMF.Models.Repository.IModelLocator
  isExternal: true
  name: Open(Uri)
  nameWithType: IModelLocator.Open(Uri)
  fullName: NMF.Models.Repository.IModelLocator.Open(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.IModelLocator.Open(System.Uri)
    name: Open
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.IModelLocator.Open(System.Uri)
    name: Open
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
