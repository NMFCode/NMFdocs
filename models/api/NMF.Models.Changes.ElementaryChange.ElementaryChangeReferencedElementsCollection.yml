### YamlMime:ManagedReference
items:
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  commentId: T:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  id: ElementaryChange.ElementaryChangeReferencedElementsCollection
  parent: NMF.Models.Changes
  children:
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.#ctor(NMF.Models.Changes.ElementaryChange)
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add(NMF.Models.IModelElement)
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains(NMF.Models.IModelElement)
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove(NMF.Models.IModelElement)
  langs:
  - csharp
  - vb
  name: ElementaryChange.ElementaryChangeReferencedElementsCollection
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  type: Class
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ElementaryChangeReferencedElementsCollection
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 331
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nThe collection class to to represent the children of the ElementaryChange class\n"
  example: []
  syntax:
    content: 'public class ElementaryChangeReferencedElementsCollection : ReferenceCollection, INotifyCollectionChanged, IDisposable, ICollectionExpression<IModelElement>, ICollection<IModelElement>, IEnumerable<IModelElement>, IEnumerable'
    content.vb: >-
      Public Class ElementaryChangeReferencedElementsCollection

          Inherits ReferenceCollection

          Implements INotifyCollectionChanged, IDisposable, ICollectionExpression(Of IModelElement), ICollection(Of IModelElement), IEnumerable(Of IModelElement), IEnumerable
  inheritance:
  - System.Object
  - NMF.Models.Collections.ReferenceCollection
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.IDisposable
  - ICollectionExpression{NMF.Models.IModelElement}
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  - System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  - System.Collections.IEnumerable
  inheritedMembers:
  - NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  - NMF.Models.Collections.ReferenceCollection.CollectionChanged
  - NMF.Models.Collections.ReferenceCollection.IsReadOnly
  - NMF.Models.Collections.ReferenceCollection.AsNotifiable
  - NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,ValueChangedEventArgs)
  - NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Models.Collections.ReferenceCollection.Dispose
  - NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.#ctor(NMF.Models.Changes.ElementaryChange)
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.#ctor(NMF.Models.Changes.ElementaryChange)
  id: '#ctor(NMF.Models.Changes.ElementaryChange)'
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: ElementaryChangeReferencedElementsCollection(ElementaryChange)
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.ElementaryChangeReferencedElementsCollection(ElementaryChange)
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.ElementaryChangeReferencedElementsCollection(NMF.Models.Changes.ElementaryChange)
  type: Constructor
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 339
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nCreates a new instance\n"
  example: []
  syntax:
    content: public ElementaryChangeReferencedElementsCollection(ElementaryChange parent)
    parameters:
    - id: parent
      type: NMF.Models.Changes.ElementaryChange
    content.vb: Public Sub New(parent As ElementaryChange)
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
  commentId: P:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
  id: Count
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
  type: Property
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 347
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nGets the amount of elements contained in this collection\n"
  example: []
  syntax:
    content: public override int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property Count As Integer
  overridden: NMF.Models.Collections.ReferenceCollection.Count
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Count
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore
  id: AttachCore
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: AttachCore()
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore()
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore()
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AttachCore
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 364
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  syntax:
    content: protected override void AttachCore()
    content.vb: Protected Overrides Sub AttachCore
  overridden: NMF.Models.Collections.ReferenceCollection.AttachCore
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore
  id: DetachCore
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: DetachCore()
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore()
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore()
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DetachCore
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 370
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  syntax:
    content: protected override void DetachCore()
    content.vb: Protected Overrides Sub DetachCore
  overridden: NMF.Models.Collections.ReferenceCollection.DetachCore
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add(NMF.Models.IModelElement)
  id: Add(NMF.Models.IModelElement)
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: Add(IModelElement)
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Add(IModelElement)
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 380
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nAdds the given element to the collection\n"
  example: []
  syntax:
    content: public override void Add(IModelElement item)
    parameters:
    - id: item
      type: NMF.Models.IModelElement
      description: The item to add
    content.vb: Public Overrides Sub Add(item As IModelElement)
  overridden: NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Add(NMF.Models.IModelElement)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear
  id: Clear
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear()
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear()
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 401
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nClears the collection and resets all references that implement it.\n"
  example: []
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear
  overridden: NMF.Models.Collections.ReferenceCollection.Clear
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Clear
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains(NMF.Models.IModelElement)
  id: Contains(NMF.Models.IModelElement)
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: Contains(IModelElement)
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains(IModelElement)
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 412
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nGets a value indicating whether the given element is contained in the collection\n"
  example: []
  syntax:
    content: public override bool Contains(IModelElement item)
    parameters:
    - id: item
      type: NMF.Models.IModelElement
      description: The item that should be looked out for
    return:
      type: System.Boolean
      description: True, if it is contained, otherwise False
    content.vb: Public Overrides Function Contains(item As IModelElement) As Boolean
  overridden: NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Contains(NMF.Models.IModelElement)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  id: CopyTo(NMF.Models.IModelElement[],System.Int32)
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: CopyTo(IModelElement[], Int32)
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(IModelElement[], Int32)
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[], System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 430
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nCopies the contents of the collection to the given array starting from the given array index\n"
  example: []
  syntax:
    content: public override void CopyTo(IModelElement[] array, int arrayIndex)
    parameters:
    - id: array
      type: NMF.Models.IModelElement[]
      description: The array in which the elements should be copied
    - id: arrayIndex
      type: System.Int32
      description: The starting index
    content.vb: Public Overrides Sub CopyTo(array As IModelElement(), arrayIndex As Integer)
  overridden: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.CopyTo(NMF.Models.IModelElement[],System.Int32)
  nameWithType.vb: ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(IModelElement(), Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement(), System.Int32)
  name.vb: CopyTo(IModelElement(), Int32)
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove(NMF.Models.IModelElement)
  id: Remove(NMF.Models.IModelElement)
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: Remove(IModelElement)
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove(IModelElement)
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 449
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nRemoves the given item from the collection\n"
  example: []
  syntax:
    content: public override bool Remove(IModelElement item)
    parameters:
    - id: item
      type: NMF.Models.IModelElement
      description: The item that should be removed
    return:
      type: System.Boolean
      description: True, if the item was removed, otherwise False
    content.vb: Public Overrides Function Remove(item As IModelElement) As Boolean
  overridden: NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Remove(NMF.Models.IModelElement)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator
  commentId: M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator
  id: GetEnumerator
  parent: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator()
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: Models/Models/Changes/ElementaryChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Models/Models/Changes/ElementaryChange.cs
    startLine: 468
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Changes
  summary: "\nGets an enumerator that enumerates the collection\n"
  example: []
  syntax:
    content: public override IEnumerator<IModelElement> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NMF.Models.IModelElement}
      description: A generic enumerator
    content.vb: Public Overrides Function GetEnumerator As IEnumerator(Of IModelElement)
  overridden: NMF.Models.Collections.ReferenceCollection.GetEnumerator
  overload: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}.GetEnumerator
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NMF.Models.Changes
  commentId: N:NMF.Models.Changes
  name: NMF.Models.Changes
  nameWithType: NMF.Models.Changes
  fullName: NMF.Models.Changes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Models.Collections.ReferenceCollection
  commentId: T:NMF.Models.Collections.ReferenceCollection
  parent: NMF.Models.Collections
  name: ReferenceCollection
  nameWithType: ReferenceCollection
  fullName: NMF.Models.Collections.ReferenceCollection
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: ICollectionExpression{NMF.Models.IModelElement}
  commentId: '!:ICollectionExpression{NMF.Models.IModelElement}'
  definition: ICollectionExpression`1
  name: ICollectionExpression<IModelElement>
  nameWithType: ICollectionExpression<IModelElement>
  fullName: ICollectionExpression<NMF.Models.IModelElement>
  nameWithType.vb: ICollectionExpression(Of IModelElement)
  fullName.vb: ICollectionExpression(Of NMF.Models.IModelElement)
  name.vb: ICollectionExpression(Of IModelElement)
  spec.csharp:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  commentId: T:System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IModelElement>
  nameWithType: ICollection<IModelElement>
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>
  nameWithType.vb: ICollection(Of IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement)
  name.vb: ICollection(Of IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IModelElement>
  nameWithType: IEnumerable<IModelElement>
  fullName: System.Collections.Generic.IEnumerable<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerable(Of IModelElement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Models.IModelElement)
  name.vb: IEnumerable(Of IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  parent: NMF.Models.Collections.ReferenceCollection
  name: IEnumerable.GetEnumerator()
  nameWithType: ReferenceCollection.IEnumerable.GetEnumerator()
  fullName: NMF.Models.Collections.ReferenceCollection.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: ReferenceCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: ReferenceCollection.IEnumerable.GetEnumerator
    fullName: NMF.Models.Collections.ReferenceCollection.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: ReferenceCollection.System.Collections.IEnumerable.GetEnumerator
    fullName: NMF.Models.Collections.ReferenceCollection.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.CollectionChanged
  commentId: E:NMF.Models.Collections.ReferenceCollection.CollectionChanged
  parent: NMF.Models.Collections.ReferenceCollection
  name: CollectionChanged
  nameWithType: ReferenceCollection.CollectionChanged
  fullName: NMF.Models.Collections.ReferenceCollection.CollectionChanged
- uid: NMF.Models.Collections.ReferenceCollection.IsReadOnly
  commentId: P:NMF.Models.Collections.ReferenceCollection.IsReadOnly
  parent: NMF.Models.Collections.ReferenceCollection
  name: IsReadOnly
  nameWithType: ReferenceCollection.IsReadOnly
  fullName: NMF.Models.Collections.ReferenceCollection.IsReadOnly
- uid: NMF.Models.Collections.ReferenceCollection.AsNotifiable
  commentId: M:NMF.Models.Collections.ReferenceCollection.AsNotifiable
  parent: NMF.Models.Collections.ReferenceCollection
  name: AsNotifiable()
  nameWithType: ReferenceCollection.AsNotifiable()
  fullName: NMF.Models.Collections.ReferenceCollection.AsNotifiable()
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.AsNotifiable
    name: AsNotifiable
    nameWithType: ReferenceCollection.AsNotifiable
    fullName: NMF.Models.Collections.ReferenceCollection.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.AsNotifiable
    name: AsNotifiable
    nameWithType: ReferenceCollection.AsNotifiable
    fullName: NMF.Models.Collections.ReferenceCollection.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Models.Collections.ReferenceCollection
  isExternal: true
  name: PropagateCollectionChanges(Object, NotifyCollectionChangedEventArgs)
  nameWithType: ReferenceCollection.PropagateCollectionChanges(Object, NotifyCollectionChangedEventArgs)
  fullName: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: PropagateCollectionChanges
    nameWithType: ReferenceCollection.PropagateCollectionChanges
    fullName: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: PropagateCollectionChanges
    nameWithType: ReferenceCollection.PropagateCollectionChanges
    fullName: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,ValueChangedEventArgs)
  commentId: M:NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,ValueChangedEventArgs)
  parent: NMF.Models.Collections.ReferenceCollection
  isExternal: true
  name: PropagateValueChanges(Object, ValueChangedEventArgs)
  nameWithType: ReferenceCollection.PropagateValueChanges(Object, ValueChangedEventArgs)
  fullName: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object, ValueChangedEventArgs)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,ValueChangedEventArgs)
    name: PropagateValueChanges
    nameWithType: ReferenceCollection.PropagateValueChanges
    fullName: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,ValueChangedEventArgs)
    name: PropagateValueChanges
    nameWithType: ReferenceCollection.PropagateValueChanges
    fullName: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Models.Collections.ReferenceCollection
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ReferenceCollection.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ReferenceCollection.OnCollectionChanged
    fullName: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ReferenceCollection.OnCollectionChanged
    fullName: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.Dispose
  commentId: M:NMF.Models.Collections.ReferenceCollection.Dispose
  parent: NMF.Models.Collections.ReferenceCollection
  name: Dispose()
  nameWithType: ReferenceCollection.Dispose()
  fullName: NMF.Models.Collections.ReferenceCollection.Dispose()
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.Dispose
    name: Dispose
    nameWithType: ReferenceCollection.Dispose
    fullName: NMF.Models.Collections.ReferenceCollection.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.Dispose
    name: Dispose
    nameWithType: ReferenceCollection.Dispose
    fullName: NMF.Models.Collections.ReferenceCollection.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  parent: NMF.Models.Collections.ReferenceCollection
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: ReferenceCollection.Dispose(Boolean)
  fullName: NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
    name: Dispose
    nameWithType: ReferenceCollection.Dispose
    fullName: NMF.Models.Collections.ReferenceCollection.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
    name: Dispose
    nameWithType: ReferenceCollection.Dispose
    fullName: NMF.Models.Collections.ReferenceCollection.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Collections
  commentId: N:NMF.Models.Collections
  name: NMF.Models.Collections
  nameWithType: NMF.Models.Collections
  fullName: NMF.Models.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: ICollectionExpression`1
  isExternal: true
  name: ICollectionExpression<>
  nameWithType: ICollectionExpression<>
  fullName: ICollectionExpression<>
  nameWithType.vb: ICollectionExpression(Of )
  fullName.vb: ICollectionExpression(Of )
  name.vb: ICollectionExpression(Of )
  spec.csharp:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.#ctor*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.#ctor
  name: ElementaryChangeReferencedElementsCollection
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.ElementaryChangeReferencedElementsCollection
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.ElementaryChangeReferencedElementsCollection
- uid: NMF.Models.Changes.ElementaryChange
  commentId: T:NMF.Models.Changes.ElementaryChange
  parent: NMF.Models.Changes
  name: ElementaryChange
  nameWithType: ElementaryChange
  fullName: NMF.Models.Changes.ElementaryChange
- uid: NMF.Models.Collections.ReferenceCollection.Count
  commentId: P:NMF.Models.Collections.ReferenceCollection.Count
  parent: NMF.Models.Collections.ReferenceCollection
  name: Count
  nameWithType: ReferenceCollection.Count
  fullName: NMF.Models.Collections.ReferenceCollection.Count
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
  name: Count
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Count
  commentId: P:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Count
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<IModelElement>.Count
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Count
  nameWithType.vb: ICollection(Of IModelElement).Count
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Models.Collections.ReferenceCollection.AttachCore
  commentId: M:NMF.Models.Collections.ReferenceCollection.AttachCore
  parent: NMF.Models.Collections.ReferenceCollection
  name: AttachCore()
  nameWithType: ReferenceCollection.AttachCore()
  fullName: NMF.Models.Collections.ReferenceCollection.AttachCore()
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.AttachCore
    name: AttachCore
    nameWithType: ReferenceCollection.AttachCore
    fullName: NMF.Models.Collections.ReferenceCollection.AttachCore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.AttachCore
    name: AttachCore
    nameWithType: ReferenceCollection.AttachCore
    fullName: NMF.Models.Collections.ReferenceCollection.AttachCore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore
  name: AttachCore
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore
- uid: NMF.Models.Collections.ReferenceCollection.DetachCore
  commentId: M:NMF.Models.Collections.ReferenceCollection.DetachCore
  parent: NMF.Models.Collections.ReferenceCollection
  name: DetachCore()
  nameWithType: ReferenceCollection.DetachCore()
  fullName: NMF.Models.Collections.ReferenceCollection.DetachCore()
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.DetachCore
    name: DetachCore
    nameWithType: ReferenceCollection.DetachCore
    fullName: NMF.Models.Collections.ReferenceCollection.DetachCore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.DetachCore
    name: DetachCore
    nameWithType: ReferenceCollection.DetachCore
    fullName: NMF.Models.Collections.ReferenceCollection.DetachCore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore
  name: DetachCore
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore
- uid: NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  parent: NMF.Models.Collections.ReferenceCollection
  name: Add(IModelElement)
  nameWithType: ReferenceCollection.Add(IModelElement)
  fullName: NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
    name: Add
    nameWithType: ReferenceCollection.Add
    fullName: NMF.Models.Collections.ReferenceCollection.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
    name: Add
    nameWithType: ReferenceCollection.Add
    fullName: NMF.Models.Collections.ReferenceCollection.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add
  name: Add
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Add
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Add(NMF.Models.IModelElement)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Add(NMF.Models.IModelElement)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(IModelElement)
  nameWithType: ICollection<IModelElement>.Add(IModelElement)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Add(NMF.Models.IModelElement)
  nameWithType.vb: ICollection(Of IModelElement).Add(IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Add(NMF.Models.IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<IModelElement>.Add
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of IModelElement).Add
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: NMF.Models.Collections.ReferenceCollection.Clear
  commentId: M:NMF.Models.Collections.ReferenceCollection.Clear
  parent: NMF.Models.Collections.ReferenceCollection
  name: Clear()
  nameWithType: ReferenceCollection.Clear()
  fullName: NMF.Models.Collections.ReferenceCollection.Clear()
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.Clear
    name: Clear
    nameWithType: ReferenceCollection.Clear
    fullName: NMF.Models.Collections.ReferenceCollection.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.Clear
    name: Clear
    nameWithType: ReferenceCollection.Clear
    fullName: NMF.Models.Collections.ReferenceCollection.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear
  name: Clear
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Clear
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Clear
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<IModelElement>.Clear()
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Clear()
  nameWithType.vb: ICollection(Of IModelElement).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<IModelElement>.Clear
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of IModelElement).Clear
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  parent: NMF.Models.Collections.ReferenceCollection
  name: Contains(IModelElement)
  nameWithType: ReferenceCollection.Contains(IModelElement)
  fullName: NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
    name: Contains
    nameWithType: ReferenceCollection.Contains
    fullName: NMF.Models.Collections.ReferenceCollection.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
    name: Contains
    nameWithType: ReferenceCollection.Contains
    fullName: NMF.Models.Collections.ReferenceCollection.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains
  name: Contains
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Contains(NMF.Models.IModelElement)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Contains(NMF.Models.IModelElement)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(IModelElement)
  nameWithType: ICollection<IModelElement>.Contains(IModelElement)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Contains(NMF.Models.IModelElement)
  nameWithType.vb: ICollection(Of IModelElement).Contains(IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Contains(NMF.Models.IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<IModelElement>.Contains
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of IModelElement).Contains
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  commentId: M:NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  parent: NMF.Models.Collections.ReferenceCollection
  isExternal: true
  name: CopyTo(IModelElement[], Int32)
  nameWithType: ReferenceCollection.CopyTo(IModelElement[], Int32)
  fullName: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[], System.Int32)
  nameWithType.vb: ReferenceCollection.CopyTo(IModelElement(), Int32)
  fullName.vb: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement(), System.Int32)
  name.vb: CopyTo(IModelElement(), Int32)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
    name: CopyTo
    nameWithType: ReferenceCollection.CopyTo
    fullName: NMF.Models.Collections.ReferenceCollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
    name: CopyTo
    nameWithType: ReferenceCollection.CopyTo
    fullName: NMF.Models.Collections.ReferenceCollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo
  name: CopyTo
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.CopyTo(NMF.Models.IModelElement[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.CopyTo(NMF.Models.IModelElement[],System.Int32)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(IModelElement[], Int32)
  nameWithType: ICollection<IModelElement>.CopyTo(IModelElement[], Int32)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.CopyTo(NMF.Models.IModelElement[], System.Int32)
  nameWithType.vb: ICollection(Of IModelElement).CopyTo(IModelElement(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).CopyTo(NMF.Models.IModelElement(), System.Int32)
  name.vb: CopyTo(IModelElement(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<IModelElement>.CopyTo
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of IModelElement).CopyTo
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement[]
  isExternal: true
  name: IModelElement[]
  nameWithType: IModelElement[]
  fullName: NMF.Models.IModelElement[]
  nameWithType.vb: IModelElement()
  fullName.vb: NMF.Models.IModelElement()
  name.vb: IModelElement()
  spec.csharp:
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  parent: NMF.Models.Collections.ReferenceCollection
  name: Remove(IModelElement)
  nameWithType: ReferenceCollection.Remove(IModelElement)
  fullName: NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
    name: Remove
    nameWithType: ReferenceCollection.Remove
    fullName: NMF.Models.Collections.ReferenceCollection.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
    name: Remove
    nameWithType: ReferenceCollection.Remove
    fullName: NMF.Models.Collections.ReferenceCollection.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove
  name: Remove
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Remove(NMF.Models.IModelElement)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Remove(NMF.Models.IModelElement)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(IModelElement)
  nameWithType: ICollection<IModelElement>.Remove(IModelElement)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Remove(NMF.Models.IModelElement)
  nameWithType.vb: ICollection(Of IModelElement).Remove(IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Remove(NMF.Models.IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<IModelElement>.Remove
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of IModelElement).Remove
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.GetEnumerator
  commentId: M:NMF.Models.Collections.ReferenceCollection.GetEnumerator
  parent: NMF.Models.Collections.ReferenceCollection
  name: GetEnumerator()
  nameWithType: ReferenceCollection.GetEnumerator()
  fullName: NMF.Models.Collections.ReferenceCollection.GetEnumerator()
  spec.csharp:
  - uid: NMF.Models.Collections.ReferenceCollection.GetEnumerator
    name: GetEnumerator
    nameWithType: ReferenceCollection.GetEnumerator
    fullName: NMF.Models.Collections.ReferenceCollection.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Collections.ReferenceCollection.GetEnumerator
    name: GetEnumerator
    nameWithType: ReferenceCollection.GetEnumerator
    fullName: NMF.Models.Collections.ReferenceCollection.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator*
  commentId: Overload:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator
  fullName: NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<IModelElement>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NMF.Models.IModelElement>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of IModelElement).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Models.IModelElement).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<IModelElement>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<NMF.Models.IModelElement>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of IModelElement).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of NMF.Models.IModelElement).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{NMF.Models.IModelElement}
  commentId: T:System.Collections.Generic.IEnumerator{NMF.Models.IModelElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<IModelElement>
  nameWithType: IEnumerator<IModelElement>
  fullName: System.Collections.Generic.IEnumerator<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerator(Of IModelElement)
  fullName.vb: System.Collections.Generic.IEnumerator(Of NMF.Models.IModelElement)
  name.vb: IEnumerator(Of IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
