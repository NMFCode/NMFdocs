### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.IClass
  commentId: T:NMF.Models.Meta.IClass
  id: IClass
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.IClass.AttributeConstraints
  - NMF.Models.Meta.IClass.BaseTypes
  - NMF.Models.Meta.IClass.Identifier
  - NMF.Models.Meta.IClass.IdentifierChanged
  - NMF.Models.Meta.IClass.IdentifierChanging
  - NMF.Models.Meta.IClass.IdentifierScope
  - NMF.Models.Meta.IClass.IdentifierScopeChanged
  - NMF.Models.Meta.IClass.IdentifierScopeChanging
  - NMF.Models.Meta.IClass.InstanceOf
  - NMF.Models.Meta.IClass.InstanceOfChanged
  - NMF.Models.Meta.IClass.InstanceOfChanging
  - NMF.Models.Meta.IClass.IsAbstract
  - NMF.Models.Meta.IClass.IsAbstractChanged
  - NMF.Models.Meta.IClass.IsAbstractChanging
  - NMF.Models.Meta.IClass.ReferenceConstraints
  langs:
  - csharp
  - vb
  name: IClass
  nameWithType: IClass
  fullName: NMF.Models.Meta.IClass
  type: Interface
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IClass
    path: src/Models/Models/Meta/IClass.cs
    startLine: 37
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nThe public interface for Class\n"
  example: []
  syntax:
    content: >-
      [DefaultImplementationType(typeof(Class))]

      [XmlDefaultImplementationType(typeof(Class))]

      [ModelRepresentationClass("http://nmf.codeplex.com/nmeta/#//Class")]

      public interface IClass : IReferenceType, IStructuredType, IType, IMetaElement, IModelElement, INotifyPropertyChanged, INotifyPropertyChanging
    content.vb: >-
      <DefaultImplementationType(GetType(Class))>

      <XmlDefaultImplementationType(GetType(Class))>

      <ModelRepresentationClass("http://nmf.codeplex.com/nmeta/#//Class")>

      Public Interface IClass Inherits IReferenceType, IStructuredType, IType, IMetaElement, IModelElement, INotifyPropertyChanged, INotifyPropertyChanging
  inheritedMembers:
  - NMF.Models.Meta.IReferenceType.Events
  - NMF.Models.Meta.IReferenceType.References
  - NMF.Models.Meta.IStructuredType.Operations
  - NMF.Models.Meta.IStructuredType.Attributes
  - NMF.Models.Meta.IType.Namespace
  - NMF.Models.Meta.IType.NamespaceChanging
  - NMF.Models.Meta.IType.NamespaceChanged
  - NMF.Models.Meta.IMetaElement.Name
  - NMF.Models.Meta.IMetaElement.Summary
  - NMF.Models.Meta.IMetaElement.Remarks
  - NMF.Models.Meta.IMetaElement.NameChanging
  - NMF.Models.Meta.IMetaElement.NameChanged
  - NMF.Models.Meta.IMetaElement.SummaryChanging
  - NMF.Models.Meta.IMetaElement.SummaryChanged
  - NMF.Models.Meta.IMetaElement.RemarksChanging
  - NMF.Models.Meta.IMetaElement.RemarksChanged
  - NMF.Models.IModelElement.Delete
  - NMF.Models.IModelElement.Deleted
  - NMF.Models.IModelElement.Deleting
  - NMF.Models.IModelElement.IsIdentified
  - NMF.Models.IModelElement.ToIdentifierString
  - NMF.Models.IModelElement.RelativeUri
  - NMF.Models.IModelElement.AbsoluteUri
  - NMF.Models.IModelElement.Resolve(System.Uri)
  - NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  - NMF.Models.IModelElement.Model
  - NMF.Models.IModelElement.Parent
  - NMF.Models.IModelElement.ParentChanged
  - NMF.Models.IModelElement.Children
  - NMF.Models.IModelElement.ReferencedElements
  - NMF.Models.IModelElement.Extensions
  - NMF.Models.IModelElement.GetExtension``1
  - NMF.Models.IModelElement.GetClass
  - NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  - NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  - NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  - NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  - NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  - NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  - NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  - NMF.Models.IModelElement.Freeze
  - NMF.Models.IModelElement.Lock
  - NMF.Models.IModelElement.Unlock
  - NMF.Models.IModelElement.TryUnlock
  - NMF.Models.IModelElement.IsFrozen
  - NMF.Models.IModelElement.IsLocked
  - NMF.Models.IModelElement.BubbledChange
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  - System.ComponentModel.INotifyPropertyChanging.PropertyChanging
  extensionMethods:
  - NMF.Models.IModelElement.NMF.Models.ModelExtensions.Ancestors
  - NMF.Models.IModelElement.NMF.Models.ModelExtensions.AncestorTree
  - NMF.Models.IModelElement.NMF.Models.ModelExtensions.Descendants
  - NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass)
  - NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IAttribute)
  - NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IReference)
  - NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.LookupAttribute(System.String)
  - NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.LookupOperation(System.String)
  - NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.LookupReference(System.String)
  - NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.RetrieveIdentifier
  - NMF.Models.Meta.IType.NMF.Models.Meta.TypeExtensions.Parse(System.String)
  - NMF.Models.Meta.IType.NMF.Models.Meta.TypeExtensions.Serialize(System.Object)
  attributes:
  - type: NMF.Utilities.DefaultImplementationTypeAttribute
    ctor: NMF.Utilities.DefaultImplementationTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: NMF.Models.Meta.Class
  - type: NMF.Serialization.XmlDefaultImplementationTypeAttribute
    ctor: NMF.Serialization.XmlDefaultImplementationTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: NMF.Models.Meta.Class
  - type: NMF.Models.ModelRepresentationClassAttribute
    ctor: NMF.Models.ModelRepresentationClassAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: http://nmf.codeplex.com/nmeta/#//Class
- uid: NMF.Models.Meta.IClass.IsAbstract
  commentId: P:NMF.Models.Meta.IClass.IsAbstract
  id: IsAbstract
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IsAbstract
  nameWithType: IClass.IsAbstract
  fullName: NMF.Models.Meta.IClass.IsAbstract
  type: Property
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsAbstract
    path: src/Models/Models/Meta/IClass.cs
    startLine: 46
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nThe IsAbstract property\n"
  example: []
  syntax:
    content: >-
      [XmlAttribute(true)]

      bool IsAbstract { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <XmlAttribute(True)>

      Property IsAbstract As Boolean
  overload: NMF.Models.Meta.IClass.IsAbstract*
  attributes:
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Models.Meta.IClass.IdentifierScope
  commentId: P:NMF.Models.Meta.IClass.IdentifierScope
  id: IdentifierScope
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IdentifierScope
  nameWithType: IClass.IdentifierScope
  fullName: NMF.Models.Meta.IClass.IdentifierScope
  type: Property
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IdentifierScope
    path: src/Models/Models/Meta/IClass.cs
    startLine: 59
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nSpecifies whether the identifier is valid only in the scope of its container or on a global scope.\n"
  remarks: This attribute is ignored when this class is not identified.
  example: []
  syntax:
    content: >-
      [XmlAttribute(true)]

      IdentifierScope IdentifierScope { get; set; }
    parameters: []
    return:
      type: NMF.Models.Meta.IdentifierScope
    content.vb: >-
      <XmlAttribute(True)>

      Property IdentifierScope As IdentifierScope
  overload: NMF.Models.Meta.IClass.IdentifierScope*
  attributes:
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Models.Meta.IClass.BaseTypes
  commentId: P:NMF.Models.Meta.IClass.BaseTypes
  id: BaseTypes
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: BaseTypes
  nameWithType: IClass.BaseTypes
  fullName: NMF.Models.Meta.IClass.BaseTypes
  type: Property
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: BaseTypes
    path: src/Models/Models/Meta/IClass.cs
    startLine: 72
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nThe BaseTypes property\n"
  example: []
  syntax:
    content: >-
      [XmlAttribute(true)]

      ICollectionExpression<IClass> BaseTypes { get; }
    parameters: []
    return:
      type: NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IClass}
    content.vb: >-
      <XmlAttribute(True)>

      ReadOnly Property BaseTypes As ICollectionExpression(Of IClass)
  overload: NMF.Models.Meta.IClass.BaseTypes*
  attributes:
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Models.Meta.IClass.InstanceOf
  commentId: P:NMF.Models.Meta.IClass.InstanceOf
  id: InstanceOf
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: InstanceOf
  nameWithType: IClass.InstanceOf
  fullName: NMF.Models.Meta.IClass.InstanceOf
  type: Property
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InstanceOf
    path: src/Models/Models/Meta/IClass.cs
    startLine: 84
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nThe InstanceOf property\n"
  example: []
  syntax:
    content: >-
      [XmlAttribute(true)]

      IClass InstanceOf { get; set; }
    parameters: []
    return:
      type: NMF.Models.Meta.IClass
    content.vb: >-
      <XmlAttribute(True)>

      Property InstanceOf As IClass
  overload: NMF.Models.Meta.IClass.InstanceOf*
  attributes:
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Models.Meta.IClass.Identifier
  commentId: P:NMF.Models.Meta.IClass.Identifier
  id: Identifier
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: Identifier
  nameWithType: IClass.Identifier
  fullName: NMF.Models.Meta.IClass.Identifier
  type: Property
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Identifier
    path: src/Models/Models/Meta/IClass.cs
    startLine: 95
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets or sets the attribute that will identify instances of this class\n"
  example: []
  syntax:
    content: >-
      [XmlAttribute(true)]

      IAttribute Identifier { get; set; }
    parameters: []
    return:
      type: NMF.Models.Meta.IAttribute
    content.vb: >-
      <XmlAttribute(True)>

      Property Identifier As IAttribute
  overload: NMF.Models.Meta.IClass.Identifier*
  attributes:
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Models.Meta.IClass.AttributeConstraints
  commentId: P:NMF.Models.Meta.IClass.AttributeConstraints
  id: AttributeConstraints
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: AttributeConstraints
  nameWithType: IClass.AttributeConstraints
  fullName: NMF.Models.Meta.IClass.AttributeConstraints
  type: Property
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AttributeConstraints
    path: src/Models/Models/Meta/IClass.cs
    startLine: 107
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nThe AttributeConstraints property\n"
  example: []
  syntax:
    content: >-
      [Browsable(false)]

      [XmlAttribute(false)]

      [Containment]

      [XmlOpposite("DeclaringType")]

      ICollectionExpression<IAttributeConstraint> AttributeConstraints { get; }
    parameters: []
    return:
      type: NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IAttributeConstraint}
    content.vb: >-
      <Browsable(False)>

      <XmlAttribute(False)>

      <Containment>

      <XmlOpposite("DeclaringType")>

      ReadOnly Property AttributeConstraints As ICollectionExpression(Of IAttributeConstraint)
  overload: NMF.Models.Meta.IClass.AttributeConstraints*
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
    ctor: System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: NMF.Models.ContainmentAttribute
    ctor: NMF.Models.ContainmentAttribute.#ctor
    arguments: []
  - type: NMF.Serialization.XmlOppositeAttribute
    ctor: NMF.Serialization.XmlOppositeAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DeclaringType
- uid: NMF.Models.Meta.IClass.ReferenceConstraints
  commentId: P:NMF.Models.Meta.IClass.ReferenceConstraints
  id: ReferenceConstraints
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: ReferenceConstraints
  nameWithType: IClass.ReferenceConstraints
  fullName: NMF.Models.Meta.IClass.ReferenceConstraints
  type: Property
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReferenceConstraints
    path: src/Models/Models/Meta/IClass.cs
    startLine: 121
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nThe ReferenceConstraints property\n"
  example: []
  syntax:
    content: >-
      [Browsable(false)]

      [XmlAttribute(false)]

      [Containment]

      [XmlOpposite("DeclaringType")]

      ICollectionExpression<IReferenceConstraint> ReferenceConstraints { get; }
    parameters: []
    return:
      type: NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IReferenceConstraint}
    content.vb: >-
      <Browsable(False)>

      <XmlAttribute(False)>

      <Containment>

      <XmlOpposite("DeclaringType")>

      ReadOnly Property ReferenceConstraints As ICollectionExpression(Of IReferenceConstraint)
  overload: NMF.Models.Meta.IClass.ReferenceConstraints*
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
    ctor: System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: NMF.Models.ContainmentAttribute
    ctor: NMF.Models.ContainmentAttribute.#ctor
    arguments: []
  - type: NMF.Serialization.XmlOppositeAttribute
    ctor: NMF.Serialization.XmlOppositeAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DeclaringType
- uid: NMF.Models.Meta.IClass.IsAbstractChanging
  commentId: E:NMF.Models.Meta.IClass.IsAbstractChanging
  id: IsAbstractChanging
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IsAbstractChanging
  nameWithType: IClass.IsAbstractChanging
  fullName: NMF.Models.Meta.IClass.IsAbstractChanging
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsAbstractChanging
    path: src/Models/Models/Meta/IClass.cs
    startLine: 135
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired before the IsAbstract property changes its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> IsAbstractChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event IsAbstractChanging As EventHandler(Of ValueChangedEventArgs)
- uid: NMF.Models.Meta.IClass.IsAbstractChanged
  commentId: E:NMF.Models.Meta.IClass.IsAbstractChanged
  id: IsAbstractChanged
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IsAbstractChanged
  nameWithType: IClass.IsAbstractChanged
  fullName: NMF.Models.Meta.IClass.IsAbstractChanged
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsAbstractChanged
    path: src/Models/Models/Meta/IClass.cs
    startLine: 140
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired when the IsAbstract property changed its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> IsAbstractChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event IsAbstractChanged As EventHandler(Of ValueChangedEventArgs)
- uid: NMF.Models.Meta.IClass.IdentifierScopeChanging
  commentId: E:NMF.Models.Meta.IClass.IdentifierScopeChanging
  id: IdentifierScopeChanging
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IdentifierScopeChanging
  nameWithType: IClass.IdentifierScopeChanging
  fullName: NMF.Models.Meta.IClass.IdentifierScopeChanging
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IdentifierScopeChanging
    path: src/Models/Models/Meta/IClass.cs
    startLine: 145
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired before the IdentifierScope property changes its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> IdentifierScopeChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event IdentifierScopeChanging As EventHandler(Of ValueChangedEventArgs)
- uid: NMF.Models.Meta.IClass.IdentifierScopeChanged
  commentId: E:NMF.Models.Meta.IClass.IdentifierScopeChanged
  id: IdentifierScopeChanged
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IdentifierScopeChanged
  nameWithType: IClass.IdentifierScopeChanged
  fullName: NMF.Models.Meta.IClass.IdentifierScopeChanged
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IdentifierScopeChanged
    path: src/Models/Models/Meta/IClass.cs
    startLine: 150
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired when the IdentifierScope property changed its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> IdentifierScopeChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event IdentifierScopeChanged As EventHandler(Of ValueChangedEventArgs)
- uid: NMF.Models.Meta.IClass.InstanceOfChanging
  commentId: E:NMF.Models.Meta.IClass.InstanceOfChanging
  id: InstanceOfChanging
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: InstanceOfChanging
  nameWithType: IClass.InstanceOfChanging
  fullName: NMF.Models.Meta.IClass.InstanceOfChanging
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InstanceOfChanging
    path: src/Models/Models/Meta/IClass.cs
    startLine: 155
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired before the InstanceOf property changes its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> InstanceOfChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event InstanceOfChanging As EventHandler(Of ValueChangedEventArgs)
- uid: NMF.Models.Meta.IClass.InstanceOfChanged
  commentId: E:NMF.Models.Meta.IClass.InstanceOfChanged
  id: InstanceOfChanged
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: InstanceOfChanged
  nameWithType: IClass.InstanceOfChanged
  fullName: NMF.Models.Meta.IClass.InstanceOfChanged
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InstanceOfChanged
    path: src/Models/Models/Meta/IClass.cs
    startLine: 160
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired when the InstanceOf property changed its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> InstanceOfChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event InstanceOfChanged As EventHandler(Of ValueChangedEventArgs)
- uid: NMF.Models.Meta.IClass.IdentifierChanging
  commentId: E:NMF.Models.Meta.IClass.IdentifierChanging
  id: IdentifierChanging
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IdentifierChanging
  nameWithType: IClass.IdentifierChanging
  fullName: NMF.Models.Meta.IClass.IdentifierChanging
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IdentifierChanging
    path: src/Models/Models/Meta/IClass.cs
    startLine: 165
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired before the Identifier property changes its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> IdentifierChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event IdentifierChanging As EventHandler(Of ValueChangedEventArgs)
- uid: NMF.Models.Meta.IClass.IdentifierChanged
  commentId: E:NMF.Models.Meta.IClass.IdentifierChanged
  id: IdentifierChanged
  parent: NMF.Models.Meta.IClass
  langs:
  - csharp
  - vb
  name: IdentifierChanged
  nameWithType: IClass.IdentifierChanged
  fullName: NMF.Models.Meta.IClass.IdentifierChanged
  type: Event
  source:
    remote:
      path: Models/Models/Meta/IClass.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IdentifierChanged
    path: src/Models/Models/Meta/IClass.cs
    startLine: 170
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: "\nGets fired when the Identifier property changed its value\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> IdentifierChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event IdentifierChanged As EventHandler(Of ValueChangedEventArgs)
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
- uid: NMF.Models.Meta.IReferenceType.Events
  commentId: P:NMF.Models.Meta.IReferenceType.Events
  parent: NMF.Models.Meta.IReferenceType
  name: Events
  nameWithType: IReferenceType.Events
  fullName: NMF.Models.Meta.IReferenceType.Events
- uid: NMF.Models.Meta.IReferenceType.References
  commentId: P:NMF.Models.Meta.IReferenceType.References
  parent: NMF.Models.Meta.IReferenceType
  name: References
  nameWithType: IReferenceType.References
  fullName: NMF.Models.Meta.IReferenceType.References
- uid: NMF.Models.Meta.IStructuredType.Operations
  commentId: P:NMF.Models.Meta.IStructuredType.Operations
  parent: NMF.Models.Meta.IStructuredType
  name: Operations
  nameWithType: IStructuredType.Operations
  fullName: NMF.Models.Meta.IStructuredType.Operations
- uid: NMF.Models.Meta.IStructuredType.Attributes
  commentId: P:NMF.Models.Meta.IStructuredType.Attributes
  parent: NMF.Models.Meta.IStructuredType
  name: Attributes
  nameWithType: IStructuredType.Attributes
  fullName: NMF.Models.Meta.IStructuredType.Attributes
- uid: NMF.Models.Meta.IType.Namespace
  commentId: P:NMF.Models.Meta.IType.Namespace
  parent: NMF.Models.Meta.IType
  name: Namespace
  nameWithType: IType.Namespace
  fullName: NMF.Models.Meta.IType.Namespace
- uid: NMF.Models.Meta.IType.NamespaceChanging
  commentId: E:NMF.Models.Meta.IType.NamespaceChanging
  parent: NMF.Models.Meta.IType
  name: NamespaceChanging
  nameWithType: IType.NamespaceChanging
  fullName: NMF.Models.Meta.IType.NamespaceChanging
- uid: NMF.Models.Meta.IType.NamespaceChanged
  commentId: E:NMF.Models.Meta.IType.NamespaceChanged
  parent: NMF.Models.Meta.IType
  name: NamespaceChanged
  nameWithType: IType.NamespaceChanged
  fullName: NMF.Models.Meta.IType.NamespaceChanged
- uid: NMF.Models.Meta.IMetaElement.Name
  commentId: P:NMF.Models.Meta.IMetaElement.Name
  parent: NMF.Models.Meta.IMetaElement
  name: Name
  nameWithType: IMetaElement.Name
  fullName: NMF.Models.Meta.IMetaElement.Name
- uid: NMF.Models.Meta.IMetaElement.Summary
  commentId: P:NMF.Models.Meta.IMetaElement.Summary
  parent: NMF.Models.Meta.IMetaElement
  name: Summary
  nameWithType: IMetaElement.Summary
  fullName: NMF.Models.Meta.IMetaElement.Summary
- uid: NMF.Models.Meta.IMetaElement.Remarks
  commentId: P:NMF.Models.Meta.IMetaElement.Remarks
  parent: NMF.Models.Meta.IMetaElement
  name: Remarks
  nameWithType: IMetaElement.Remarks
  fullName: NMF.Models.Meta.IMetaElement.Remarks
- uid: NMF.Models.Meta.IMetaElement.NameChanging
  commentId: E:NMF.Models.Meta.IMetaElement.NameChanging
  parent: NMF.Models.Meta.IMetaElement
  name: NameChanging
  nameWithType: IMetaElement.NameChanging
  fullName: NMF.Models.Meta.IMetaElement.NameChanging
- uid: NMF.Models.Meta.IMetaElement.NameChanged
  commentId: E:NMF.Models.Meta.IMetaElement.NameChanged
  parent: NMF.Models.Meta.IMetaElement
  name: NameChanged
  nameWithType: IMetaElement.NameChanged
  fullName: NMF.Models.Meta.IMetaElement.NameChanged
- uid: NMF.Models.Meta.IMetaElement.SummaryChanging
  commentId: E:NMF.Models.Meta.IMetaElement.SummaryChanging
  parent: NMF.Models.Meta.IMetaElement
  name: SummaryChanging
  nameWithType: IMetaElement.SummaryChanging
  fullName: NMF.Models.Meta.IMetaElement.SummaryChanging
- uid: NMF.Models.Meta.IMetaElement.SummaryChanged
  commentId: E:NMF.Models.Meta.IMetaElement.SummaryChanged
  parent: NMF.Models.Meta.IMetaElement
  name: SummaryChanged
  nameWithType: IMetaElement.SummaryChanged
  fullName: NMF.Models.Meta.IMetaElement.SummaryChanged
- uid: NMF.Models.Meta.IMetaElement.RemarksChanging
  commentId: E:NMF.Models.Meta.IMetaElement.RemarksChanging
  parent: NMF.Models.Meta.IMetaElement
  name: RemarksChanging
  nameWithType: IMetaElement.RemarksChanging
  fullName: NMF.Models.Meta.IMetaElement.RemarksChanging
- uid: NMF.Models.Meta.IMetaElement.RemarksChanged
  commentId: E:NMF.Models.Meta.IMetaElement.RemarksChanged
  parent: NMF.Models.Meta.IMetaElement
  name: RemarksChanged
  nameWithType: IMetaElement.RemarksChanged
  fullName: NMF.Models.Meta.IMetaElement.RemarksChanged
- uid: NMF.Models.IModelElement.Delete
  commentId: M:NMF.Models.IModelElement.Delete
  parent: NMF.Models.IModelElement
  name: Delete()
  nameWithType: IModelElement.Delete()
  fullName: NMF.Models.IModelElement.Delete()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Delete
    name: Delete
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Delete
    name: Delete
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.Deleted
  commentId: E:NMF.Models.IModelElement.Deleted
  parent: NMF.Models.IModelElement
  name: Deleted
  nameWithType: IModelElement.Deleted
  fullName: NMF.Models.IModelElement.Deleted
- uid: NMF.Models.IModelElement.Deleting
  commentId: E:NMF.Models.IModelElement.Deleting
  parent: NMF.Models.IModelElement
  name: Deleting
  nameWithType: IModelElement.Deleting
  fullName: NMF.Models.IModelElement.Deleting
- uid: NMF.Models.IModelElement.IsIdentified
  commentId: P:NMF.Models.IModelElement.IsIdentified
  parent: NMF.Models.IModelElement
  name: IsIdentified
  nameWithType: IModelElement.IsIdentified
  fullName: NMF.Models.IModelElement.IsIdentified
- uid: NMF.Models.IModelElement.ToIdentifierString
  commentId: M:NMF.Models.IModelElement.ToIdentifierString
  parent: NMF.Models.IModelElement
  name: ToIdentifierString()
  nameWithType: IModelElement.ToIdentifierString()
  fullName: NMF.Models.IModelElement.ToIdentifierString()
  spec.csharp:
  - uid: NMF.Models.IModelElement.ToIdentifierString
    name: ToIdentifierString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.ToIdentifierString
    name: ToIdentifierString
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.RelativeUri
  commentId: P:NMF.Models.IModelElement.RelativeUri
  parent: NMF.Models.IModelElement
  name: RelativeUri
  nameWithType: IModelElement.RelativeUri
  fullName: NMF.Models.IModelElement.RelativeUri
- uid: NMF.Models.IModelElement.AbsoluteUri
  commentId: P:NMF.Models.IModelElement.AbsoluteUri
  parent: NMF.Models.IModelElement
  name: AbsoluteUri
  nameWithType: IModelElement.AbsoluteUri
  fullName: NMF.Models.IModelElement.AbsoluteUri
- uid: NMF.Models.IModelElement.Resolve(System.Uri)
  commentId: M:NMF.Models.IModelElement.Resolve(System.Uri)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: Resolve(Uri)
  nameWithType: IModelElement.Resolve(Uri)
  fullName: NMF.Models.IModelElement.Resolve(System.Uri)
  spec.csharp:
  - uid: NMF.Models.IModelElement.Resolve(System.Uri)
    name: Resolve
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Resolve(System.Uri)
    name: Resolve
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  commentId: M:NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: GetContainerReference(IModelElement, out int)
  nameWithType: IModelElement.GetContainerReference(IModelElement, out int)
  fullName: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement, out int)
  nameWithType.vb: IModelElement.GetContainerReference(IModelElement, Integer)
  fullName.vb: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement, Integer)
  name.vb: GetContainerReference(IModelElement, Integer)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
    name: GetContainerReference
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
    name: GetContainerReference
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.IModelElement.Model
  commentId: P:NMF.Models.IModelElement.Model
  parent: NMF.Models.IModelElement
  name: Model
  nameWithType: IModelElement.Model
  fullName: NMF.Models.IModelElement.Model
- uid: NMF.Models.IModelElement.Parent
  commentId: P:NMF.Models.IModelElement.Parent
  parent: NMF.Models.IModelElement
  name: Parent
  nameWithType: IModelElement.Parent
  fullName: NMF.Models.IModelElement.Parent
- uid: NMF.Models.IModelElement.ParentChanged
  commentId: E:NMF.Models.IModelElement.ParentChanged
  parent: NMF.Models.IModelElement
  name: ParentChanged
  nameWithType: IModelElement.ParentChanged
  fullName: NMF.Models.IModelElement.ParentChanged
- uid: NMF.Models.IModelElement.Children
  commentId: P:NMF.Models.IModelElement.Children
  parent: NMF.Models.IModelElement
  name: Children
  nameWithType: IModelElement.Children
  fullName: NMF.Models.IModelElement.Children
- uid: NMF.Models.IModelElement.ReferencedElements
  commentId: P:NMF.Models.IModelElement.ReferencedElements
  parent: NMF.Models.IModelElement
  name: ReferencedElements
  nameWithType: IModelElement.ReferencedElements
  fullName: NMF.Models.IModelElement.ReferencedElements
- uid: NMF.Models.IModelElement.Extensions
  commentId: P:NMF.Models.IModelElement.Extensions
  parent: NMF.Models.IModelElement
  name: Extensions
  nameWithType: IModelElement.Extensions
  fullName: NMF.Models.IModelElement.Extensions
- uid: NMF.Models.IModelElement.GetExtension``1
  commentId: M:NMF.Models.IModelElement.GetExtension``1
  parent: NMF.Models.IModelElement
  name: GetExtension<T>()
  nameWithType: IModelElement.GetExtension<T>()
  fullName: NMF.Models.IModelElement.GetExtension<T>()
  nameWithType.vb: IModelElement.GetExtension(Of T)()
  fullName.vb: NMF.Models.IModelElement.GetExtension(Of T)()
  name.vb: GetExtension(Of T)()
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetExtension``1
    name: GetExtension
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetExtension``1
    name: GetExtension
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.GetClass
  commentId: M:NMF.Models.IModelElement.GetClass
  parent: NMF.Models.IModelElement
  name: GetClass()
  nameWithType: IModelElement.GetClass()
  fullName: NMF.Models.IModelElement.GetClass()
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetClass
    name: GetClass
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetClass
    name: GetClass
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  commentId: M:NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: GetAttributeValue(IAttribute, int)
  nameWithType: IModelElement.GetAttributeValue(IAttribute, int)
  fullName: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute, int)
  nameWithType.vb: IModelElement.GetAttributeValue(IAttribute, Integer)
  fullName.vb: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute, Integer)
  name.vb: GetAttributeValue(IAttribute, Integer)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
    name: GetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
    name: GetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  parent: NMF.Models.IModelElement
  name: GetAttributeValues(IAttribute)
  nameWithType: IModelElement.GetAttributeValues(IAttribute)
  fullName: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
    name: GetAttributeValues
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
    name: GetAttributeValues
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
- uid: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  commentId: M:NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  parent: NMF.Models.IModelElement
  isExternal: true
  name: CallOperation(IOperation, params object[])
  nameWithType: IModelElement.CallOperation(IOperation, params object[])
  fullName: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation, params object[])
  nameWithType.vb: IModelElement.CallOperation(IOperation, ParamArray Object())
  fullName.vb: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation, ParamArray Object())
  name.vb: CallOperation(IOperation, ParamArray Object())
  spec.csharp:
  - uid: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
    name: CallOperation
  - name: (
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
    name: CallOperation
  - name: (
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  commentId: M:NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: GetReferencedElement(IReference, int)
  nameWithType: IModelElement.GetReferencedElement(IReference, int)
  fullName: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference, int)
  nameWithType.vb: IModelElement.GetReferencedElement(IReference, Integer)
  fullName.vb: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference, Integer)
  name.vb: GetReferencedElement(IReference, Integer)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
    name: GetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
    name: GetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  commentId: M:NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  parent: NMF.Models.IModelElement
  name: SetReferencedElement(IReference, IModelElement)
  nameWithType: IModelElement.SetReferencedElement(IReference, IModelElement)
  fullName: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference, NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
    name: SetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
    name: SetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  parent: NMF.Models.IModelElement
  name: GetReferencedElements(IReference)
  nameWithType: IModelElement.GetReferencedElements(IReference)
  fullName: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
    name: GetReferencedElements
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
    name: GetReferencedElements
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  commentId: M:NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: SetAttributeValue(IAttribute, object)
  nameWithType: IModelElement.SetAttributeValue(IAttribute, object)
  fullName: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute, object)
  nameWithType.vb: IModelElement.SetAttributeValue(IAttribute, Object)
  fullName.vb: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute, Object)
  name.vb: SetAttributeValue(IAttribute, Object)
  spec.csharp:
  - uid: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
    name: SetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
    name: SetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Models.IModelElement.Freeze
  commentId: M:NMF.Models.IModelElement.Freeze
  parent: NMF.Models.IModelElement
  name: Freeze()
  nameWithType: IModelElement.Freeze()
  fullName: NMF.Models.IModelElement.Freeze()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Freeze
    name: Freeze
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Freeze
    name: Freeze
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.Lock
  commentId: M:NMF.Models.IModelElement.Lock
  parent: NMF.Models.IModelElement
  name: Lock()
  nameWithType: IModelElement.Lock()
  fullName: NMF.Models.IModelElement.Lock()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Lock
    name: Lock
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Lock
    name: Lock
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.Unlock
  commentId: M:NMF.Models.IModelElement.Unlock
  parent: NMF.Models.IModelElement
  name: Unlock()
  nameWithType: IModelElement.Unlock()
  fullName: NMF.Models.IModelElement.Unlock()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Unlock
    name: Unlock
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Unlock
    name: Unlock
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.TryUnlock
  commentId: M:NMF.Models.IModelElement.TryUnlock
  parent: NMF.Models.IModelElement
  name: TryUnlock()
  nameWithType: IModelElement.TryUnlock()
  fullName: NMF.Models.IModelElement.TryUnlock()
  spec.csharp:
  - uid: NMF.Models.IModelElement.TryUnlock
    name: TryUnlock
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.TryUnlock
    name: TryUnlock
  - name: (
  - name: )
- uid: NMF.Models.IModelElement.IsFrozen
  commentId: P:NMF.Models.IModelElement.IsFrozen
  parent: NMF.Models.IModelElement
  name: IsFrozen
  nameWithType: IModelElement.IsFrozen
  fullName: NMF.Models.IModelElement.IsFrozen
- uid: NMF.Models.IModelElement.IsLocked
  commentId: P:NMF.Models.IModelElement.IsLocked
  parent: NMF.Models.IModelElement
  name: IsLocked
  nameWithType: IModelElement.IsLocked
  fullName: NMF.Models.IModelElement.IsLocked
- uid: NMF.Models.IModelElement.BubbledChange
  commentId: E:NMF.Models.IModelElement.BubbledChange
  parent: NMF.Models.IModelElement
  name: BubbledChange
  nameWithType: IModelElement.BubbledChange
  fullName: NMF.Models.IModelElement.BubbledChange
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.INotifyPropertyChanging.PropertyChanging
  commentId: E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging
  parent: System.ComponentModel.INotifyPropertyChanging
  isExternal: true
  name: PropertyChanging
  nameWithType: INotifyPropertyChanging.PropertyChanging
  fullName: System.ComponentModel.INotifyPropertyChanging.PropertyChanging
- uid: NMF.Models.IModelElement.NMF.Models.ModelExtensions.Ancestors
  commentId: M:NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  parent: NMF.Models.ModelExtensions
  definition: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  name: Ancestors(IModelElement)
  nameWithType: ModelExtensions.Ancestors(IModelElement)
  fullName: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
    name: Ancestors
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
    name: Ancestors
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.IModelElement.NMF.Models.ModelExtensions.AncestorTree
  commentId: M:NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  parent: NMF.Models.ModelExtensions
  definition: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  name: AncestorTree(IModelElement)
  nameWithType: ModelExtensions.AncestorTree(IModelElement)
  fullName: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
    name: AncestorTree
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
    name: AncestorTree
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.IModelElement.NMF.Models.ModelExtensions.Descendants
  commentId: M:NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  parent: NMF.Models.ModelExtensions
  definition: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  name: Descendants(IModelElement)
  nameWithType: ModelExtensions.Descendants(IModelElement)
  fullName: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
    name: Descendants
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
    name: Descendants
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  parent: NMF.Models.Meta.ClassExtensions
  definition: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  name: IsAssignableFrom(IClass, IClass)
  nameWithType: ClassExtensions.IsAssignableFrom(IClass, IClass)
  fullName: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass, NMF.Models.Meta.IClass)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
    name: IsAssignableFrom
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
    name: IsAssignableFrom
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
- uid: NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  parent: NMF.Models.Meta.ClassExtensions
  definition: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  name: IsRefined(IClass, IAttribute)
  nameWithType: ClassExtensions.IsRefined(IClass, IAttribute)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IAttribute)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
- uid: NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  parent: NMF.Models.Meta.ClassExtensions
  definition: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  name: IsRefined(IClass, IReference)
  nameWithType: ClassExtensions.IsRefined(IClass, IReference)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.LookupAttribute(System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  parent: NMF.Models.Meta.ClassExtensions
  definition: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  name: LookupAttribute(IClass, string)
  nameWithType: ClassExtensions.LookupAttribute(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass, string)
  nameWithType.vb: ClassExtensions.LookupAttribute(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass, String)
  name.vb: LookupAttribute(IClass, String)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
    name: LookupAttribute
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
    name: LookupAttribute
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.LookupOperation(System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  parent: NMF.Models.Meta.ClassExtensions
  definition: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  name: LookupOperation(IClass, string)
  nameWithType: ClassExtensions.LookupOperation(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass, string)
  nameWithType.vb: ClassExtensions.LookupOperation(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass, String)
  name.vb: LookupOperation(IClass, String)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
    name: LookupOperation
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
    name: LookupOperation
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.LookupReference(System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  parent: NMF.Models.Meta.ClassExtensions
  definition: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  name: LookupReference(IClass, string)
  nameWithType: ClassExtensions.LookupReference(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass, string)
  nameWithType.vb: ClassExtensions.LookupReference(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass, String)
  name.vb: LookupReference(IClass, String)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
    name: LookupReference
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
    name: LookupReference
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.IClass.NMF.Models.Meta.ClassExtensions.RetrieveIdentifier
  commentId: M:NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  parent: NMF.Models.Meta.ClassExtensions
  definition: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  name: RetrieveIdentifier(IClass)
  nameWithType: ClassExtensions.RetrieveIdentifier(IClass)
  fullName: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
    name: RetrieveIdentifier
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
    name: RetrieveIdentifier
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
- uid: NMF.Models.Meta.IType.NMF.Models.Meta.TypeExtensions.Parse(System.String)
  commentId: M:NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
  parent: NMF.Models.Meta.TypeExtensions
  definition: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
  name: Parse(IType, string)
  nameWithType: TypeExtensions.Parse(IType, string)
  fullName: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType, string)
  nameWithType.vb: TypeExtensions.Parse(IType, String)
  fullName.vb: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType, String)
  name.vb: Parse(IType, String)
  spec.csharp:
  - uid: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
    name: Parse
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
    name: Parse
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.IType.NMF.Models.Meta.TypeExtensions.Serialize(System.Object)
  commentId: M:NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
  parent: NMF.Models.Meta.TypeExtensions
  definition: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
  name: Serialize(IType, object)
  nameWithType: TypeExtensions.Serialize(IType, object)
  fullName: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType, object)
  nameWithType.vb: TypeExtensions.Serialize(IType, Object)
  fullName.vb: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType, Object)
  name.vb: Serialize(IType, Object)
  spec.csharp:
  - uid: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
    name: Serialize
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
    name: Serialize
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.IReferenceType
  commentId: T:NMF.Models.Meta.IReferenceType
  parent: NMF.Models.Meta
  name: IReferenceType
  nameWithType: IReferenceType
  fullName: NMF.Models.Meta.IReferenceType
- uid: NMF.Models.Meta.IStructuredType
  commentId: T:NMF.Models.Meta.IStructuredType
  parent: NMF.Models.Meta
  name: IStructuredType
  nameWithType: IStructuredType
  fullName: NMF.Models.Meta.IStructuredType
- uid: NMF.Models.Meta.IType
  commentId: T:NMF.Models.Meta.IType
  parent: NMF.Models.Meta
  name: IType
  nameWithType: IType
  fullName: NMF.Models.Meta.IType
- uid: NMF.Models.Meta.IMetaElement
  commentId: T:NMF.Models.Meta.IMetaElement
  parent: NMF.Models.Meta
  name: IMetaElement
  nameWithType: IMetaElement
  fullName: NMF.Models.Meta.IMetaElement
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.ComponentModel.INotifyPropertyChanging
  commentId: T:System.ComponentModel.INotifyPropertyChanging
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanging
  nameWithType: INotifyPropertyChanging
  fullName: System.ComponentModel.INotifyPropertyChanging
- uid: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  name: Ancestors(IModelElement)
  nameWithType: ModelExtensions.Ancestors(IModelElement)
  fullName: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
    name: Ancestors
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
    name: Ancestors
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.ModelExtensions
  commentId: T:NMF.Models.ModelExtensions
  parent: NMF.Models
  name: ModelExtensions
  nameWithType: ModelExtensions
  fullName: NMF.Models.ModelExtensions
- uid: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  name: AncestorTree(IModelElement)
  nameWithType: ModelExtensions.AncestorTree(IModelElement)
  fullName: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
    name: AncestorTree
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
    name: AncestorTree
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  name: Descendants(IModelElement)
  nameWithType: ModelExtensions.Descendants(IModelElement)
  fullName: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
    name: Descendants
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
    name: Descendants
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  name: IsAssignableFrom(IClass, IClass)
  nameWithType: ClassExtensions.IsAssignableFrom(IClass, IClass)
  fullName: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass, NMF.Models.Meta.IClass)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
    name: IsAssignableFrom
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
    name: IsAssignableFrom
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
- uid: NMF.Models.Meta.ClassExtensions
  commentId: T:NMF.Models.Meta.ClassExtensions
  parent: NMF.Models.Meta
  name: ClassExtensions
  nameWithType: ClassExtensions
  fullName: NMF.Models.Meta.ClassExtensions
- uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  name: IsRefined(IClass, IAttribute)
  nameWithType: ClassExtensions.IsRefined(IClass, IAttribute)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IAttribute)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
- uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  name: IsRefined(IClass, IReference)
  nameWithType: ClassExtensions.IsRefined(IClass, IReference)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
    name: IsRefined
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  isExternal: true
  name: LookupAttribute(IClass, string)
  nameWithType: ClassExtensions.LookupAttribute(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass, string)
  nameWithType.vb: ClassExtensions.LookupAttribute(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass, String)
  name.vb: LookupAttribute(IClass, String)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
    name: LookupAttribute
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
    name: LookupAttribute
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  isExternal: true
  name: LookupOperation(IClass, string)
  nameWithType: ClassExtensions.LookupOperation(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass, string)
  nameWithType.vb: ClassExtensions.LookupOperation(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass, String)
  name.vb: LookupOperation(IClass, String)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
    name: LookupOperation
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
    name: LookupOperation
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  isExternal: true
  name: LookupReference(IClass, string)
  nameWithType: ClassExtensions.LookupReference(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass, string)
  nameWithType.vb: ClassExtensions.LookupReference(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass, String)
  name.vb: LookupReference(IClass, String)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
    name: LookupReference
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
    name: LookupReference
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  commentId: M:NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  name: RetrieveIdentifier(IClass)
  nameWithType: ClassExtensions.RetrieveIdentifier(IClass)
  fullName: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  spec.csharp:
  - uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
    name: RetrieveIdentifier
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
    name: RetrieveIdentifier
  - name: (
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
- uid: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
  commentId: M:NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
  isExternal: true
  name: Parse(IType, string)
  nameWithType: TypeExtensions.Parse(IType, string)
  fullName: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType, string)
  nameWithType.vb: TypeExtensions.Parse(IType, String)
  fullName.vb: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType, String)
  name.vb: Parse(IType, String)
  spec.csharp:
  - uid: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
    name: Parse
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)
    name: Parse
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.Meta.TypeExtensions
  commentId: T:NMF.Models.Meta.TypeExtensions
  parent: NMF.Models.Meta
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: NMF.Models.Meta.TypeExtensions
- uid: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
  commentId: M:NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
  isExternal: true
  name: Serialize(IType, object)
  nameWithType: TypeExtensions.Serialize(IType, object)
  fullName: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType, object)
  nameWithType.vb: TypeExtensions.Serialize(IType, Object)
  fullName.vb: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType, Object)
  name.vb: Serialize(IType, Object)
  spec.csharp:
  - uid: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
    name: Serialize
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)
    name: Serialize
  - name: (
  - uid: NMF.Models.Meta.IType
    name: IType
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
- uid: NMF.Models.Meta.IClass.IsAbstract*
  commentId: Overload:NMF.Models.Meta.IClass.IsAbstract
  name: IsAbstract
  nameWithType: IClass.IsAbstract
  fullName: NMF.Models.Meta.IClass.IsAbstract
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Meta.IClass.IdentifierScope*
  commentId: Overload:NMF.Models.Meta.IClass.IdentifierScope
  name: IdentifierScope
  nameWithType: IClass.IdentifierScope
  fullName: NMF.Models.Meta.IClass.IdentifierScope
- uid: NMF.Models.Meta.IdentifierScope
  commentId: T:NMF.Models.Meta.IdentifierScope
  parent: NMF.Models.Meta
  name: IdentifierScope
  nameWithType: IdentifierScope
  fullName: NMF.Models.Meta.IdentifierScope
- uid: NMF.Models.Meta.IClass.BaseTypes*
  commentId: Overload:NMF.Models.Meta.IClass.BaseTypes
  name: BaseTypes
  nameWithType: IClass.BaseTypes
  fullName: NMF.Models.Meta.IClass.BaseTypes
- uid: NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IClass}
  commentId: T:NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IClass}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<IClass>
  nameWithType: ICollectionExpression<IClass>
  fullName: NMF.Expressions.ICollectionExpression<NMF.Models.Meta.IClass>
  nameWithType.vb: ICollectionExpression(Of IClass)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of NMF.Models.Meta.IClass)
  name.vb: ICollectionExpression(Of IClass)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IClass
    name: IClass
  - name: )
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Models.Meta.IClass.InstanceOf*
  commentId: Overload:NMF.Models.Meta.IClass.InstanceOf
  name: InstanceOf
  nameWithType: IClass.InstanceOf
  fullName: NMF.Models.Meta.IClass.InstanceOf
- uid: NMF.Models.Meta.IClass
  commentId: T:NMF.Models.Meta.IClass
  parent: NMF.Models.Meta
  name: IClass
  nameWithType: IClass
  fullName: NMF.Models.Meta.IClass
- uid: NMF.Models.Meta.IClass.Identifier*
  commentId: Overload:NMF.Models.Meta.IClass.Identifier
  name: Identifier
  nameWithType: IClass.Identifier
  fullName: NMF.Models.Meta.IClass.Identifier
- uid: NMF.Models.Meta.IAttribute
  commentId: T:NMF.Models.Meta.IAttribute
  parent: NMF.Models.Meta
  name: IAttribute
  nameWithType: IAttribute
  fullName: NMF.Models.Meta.IAttribute
- uid: NMF.Models.Meta.IClass.AttributeConstraints*
  commentId: Overload:NMF.Models.Meta.IClass.AttributeConstraints
  name: AttributeConstraints
  nameWithType: IClass.AttributeConstraints
  fullName: NMF.Models.Meta.IClass.AttributeConstraints
- uid: NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IAttributeConstraint}
  commentId: T:NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IAttributeConstraint}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<IAttributeConstraint>
  nameWithType: ICollectionExpression<IAttributeConstraint>
  fullName: NMF.Expressions.ICollectionExpression<NMF.Models.Meta.IAttributeConstraint>
  nameWithType.vb: ICollectionExpression(Of IAttributeConstraint)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of NMF.Models.Meta.IAttributeConstraint)
  name.vb: ICollectionExpression(Of IAttributeConstraint)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - uid: NMF.Models.Meta.IAttributeConstraint
    name: IAttributeConstraint
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttributeConstraint
    name: IAttributeConstraint
  - name: )
- uid: NMF.Models.Meta.IClass.ReferenceConstraints*
  commentId: Overload:NMF.Models.Meta.IClass.ReferenceConstraints
  name: ReferenceConstraints
  nameWithType: IClass.ReferenceConstraints
  fullName: NMF.Models.Meta.IClass.ReferenceConstraints
- uid: NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IReferenceConstraint}
  commentId: T:NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IReferenceConstraint}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<IReferenceConstraint>
  nameWithType: ICollectionExpression<IReferenceConstraint>
  fullName: NMF.Expressions.ICollectionExpression<NMF.Models.Meta.IReferenceConstraint>
  nameWithType.vb: ICollectionExpression(Of IReferenceConstraint)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of NMF.Models.Meta.IReferenceConstraint)
  name.vb: ICollectionExpression(Of IReferenceConstraint)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - uid: NMF.Models.Meta.IReferenceConstraint
    name: IReferenceConstraint
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReferenceConstraint
    name: IReferenceConstraint
  - name: )
- uid: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  commentId: T:System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<NMF.Expressions.ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Expressions.ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: <
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: <
  - name: TEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TEventArgs
  - name: )
