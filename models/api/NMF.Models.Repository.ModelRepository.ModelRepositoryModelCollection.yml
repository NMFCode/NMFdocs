### YamlMime:ManagedReference
items:
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection
  commentId: T:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection
  id: ModelRepository.ModelRepositoryModelCollection
  parent: NMF.Models.Repository
  children:
  - NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.#ctor(NMF.Models.Repository.ModelRepository)
  - NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add(System.Uri,NMF.Models.Model)
  - NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers
  - NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers
  langs:
  - csharp
  - vb
  name: ModelRepository.ModelRepositoryModelCollection
  nameWithType: ModelRepository.ModelRepositoryModelCollection
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection
  type: Class
  source:
    remote:
      path: Models/Models/Repository/ModelRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelRepositoryModelCollection
    path: src/Models/Models/Repository/ModelRepository.cs
    startLine: 313
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: 'protected class ModelRepository.ModelRepositoryModelCollection : ModelCollection, IDictionary<Uri, Model>, ICollection<KeyValuePair<Uri, Model>>, IEnumerable<KeyValuePair<Uri, Model>>, IEnumerable'
    content.vb: Protected Class ModelRepository.ModelRepositoryModelCollection Inherits ModelCollection Implements IDictionary(Of Uri, Model), ICollection(Of KeyValuePair(Of Uri, Model)), IEnumerable(Of KeyValuePair(Of Uri, Model)), IEnumerable
  inheritance:
  - System.Object
  - NMF.Models.Repository.ModelCollection
  implements:
  - System.Collections.Generic.IDictionary{System.Uri,NMF.Models.Model}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - NMF.Models.Repository.ModelCollection.Repository
  - NMF.Models.Repository.ModelCollection.Item(System.Uri)
  - NMF.Models.Repository.ModelCollection.Count
  - NMF.Models.Repository.ModelCollection.IsReadOnly
  - NMF.Models.Repository.ModelCollection.Keys
  - NMF.Models.Repository.ModelCollection.Values
  - NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  - NMF.Models.Repository.ModelCollection.Clear
  - NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  - NMF.Models.Repository.ModelCollection.ContainsKey(System.Uri)
  - NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}[],System.Int32)
  - NMF.Models.Repository.ModelCollection.GetEnumerator
  - NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  - NMF.Models.Repository.ModelCollection.Remove(System.Uri)
  - NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri,NMF.Models.Model@)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.#ctor(NMF.Models.Repository.ModelRepository)
  commentId: M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.#ctor(NMF.Models.Repository.ModelRepository)
  id: '#ctor(NMF.Models.Repository.ModelRepository)'
  parent: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection
  langs:
  - csharp
  - vb
  name: ModelRepositoryModelCollection(ModelRepository)
  nameWithType: ModelRepository.ModelRepositoryModelCollection.ModelRepositoryModelCollection(ModelRepository)
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.ModelRepositoryModelCollection(NMF.Models.Repository.ModelRepository)
  type: Constructor
  source:
    remote:
      path: Models/Models/Repository/ModelRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/Repository/ModelRepository.cs
    startLine: 315
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public ModelRepositoryModelCollection(ModelRepository repo)
    parameters:
    - id: repo
      type: NMF.Models.Repository.ModelRepository
    content.vb: Public Sub New(repo As ModelRepository)
  overload: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.#ctor*
  nameWithType.vb: ModelRepository.ModelRepositoryModelCollection.New(ModelRepository)
  fullName.vb: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.New(NMF.Models.Repository.ModelRepository)
  name.vb: New(ModelRepository)
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add(System.Uri,NMF.Models.Model)
  commentId: M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add(System.Uri,NMF.Models.Model)
  id: Add(System.Uri,NMF.Models.Model)
  parent: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection
  langs:
  - csharp
  - vb
  name: Add(Uri, Model)
  nameWithType: ModelRepository.ModelRepositoryModelCollection.Add(Uri, Model)
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add(System.Uri, NMF.Models.Model)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/ModelRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Models/Models/Repository/ModelRepository.cs
    startLine: 317
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public override void Add(Uri key, Model value)
    parameters:
    - id: key
      type: System.Uri
    - id: value
      type: NMF.Models.Model
    content.vb: Public Overrides Sub Add(key As Uri, value As Model)
  overridden: NMF.Models.Repository.ModelCollection.Add(System.Uri,NMF.Models.Model)
  overload: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add*
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers
  commentId: M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers
  id: RegisterChangeHandlers
  parent: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection
  langs:
  - csharp
  - vb
  name: RegisterChangeHandlers()
  nameWithType: ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers()
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers()
  type: Method
  source:
    remote:
      path: Models/Models/Repository/ModelRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterChangeHandlers
    path: src/Models/Models/Repository/ModelRepository.cs
    startLine: 327
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public void RegisterChangeHandlers()
    content.vb: Public Sub RegisterChangeHandlers()
  overload: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers*
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers
  commentId: M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers
  id: UnregisterChangeHandlers
  parent: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection
  langs:
  - csharp
  - vb
  name: UnregisterChangeHandlers()
  nameWithType: ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers()
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers()
  type: Method
  source:
    remote:
      path: Models/Models/Repository/ModelRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UnregisterChangeHandlers
    path: src/Models/Models/Repository/ModelRepository.cs
    startLine: 335
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public void UnregisterChangeHandlers()
    content.vb: Public Sub UnregisterChangeHandlers()
  overload: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers*
references:
- uid: NMF.Models.Repository
  commentId: N:NMF.Models.Repository
  name: NMF.Models.Repository
  nameWithType: NMF.Models.Repository
  fullName: NMF.Models.Repository
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Repository
    name: Repository
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Repository
    name: Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Models.Repository.ModelCollection
  commentId: T:NMF.Models.Repository.ModelCollection
  parent: NMF.Models.Repository
  name: ModelCollection
  nameWithType: ModelCollection
  fullName: NMF.Models.Repository.ModelCollection
- uid: System.Collections.Generic.IDictionary{System.Uri,NMF.Models.Model}
  commentId: T:System.Collections.Generic.IDictionary{System.Uri,NMF.Models.Model}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Uri, Model>
  nameWithType: IDictionary<Uri, Model>
  fullName: System.Collections.Generic.IDictionary<System.Uri, NMF.Models.Model>
  nameWithType.vb: IDictionary(Of Uri, Model)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, NMF.Models.Model)
  name.vb: IDictionary(Of Uri, Model)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<Uri, Model>>
  nameWithType: ICollection<KeyValuePair<Uri, Model>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, NMF.Models.Model>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Model))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, NMF.Models.Model))
  name.vb: ICollection(Of KeyValuePair(Of Uri, Model))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Uri, Model>>
  nameWithType: IEnumerable<KeyValuePair<Uri, Model>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri, NMF.Models.Model>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Uri, Model))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Uri, NMF.Models.Model))
  name.vb: IEnumerable(Of KeyValuePair(Of Uri, Model))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Models.Repository.ModelCollection.Repository
  commentId: P:NMF.Models.Repository.ModelCollection.Repository
  parent: NMF.Models.Repository.ModelCollection
  name: Repository
  nameWithType: ModelCollection.Repository
  fullName: NMF.Models.Repository.ModelCollection.Repository
- uid: NMF.Models.Repository.ModelCollection.Item(System.Uri)
  commentId: P:NMF.Models.Repository.ModelCollection.Item(System.Uri)
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: this[Uri]
  nameWithType: ModelCollection.this[Uri]
  fullName: NMF.Models.Repository.ModelCollection.this[System.Uri]
  nameWithType.vb: ModelCollection.this[](Uri)
  fullName.vb: NMF.Models.Repository.ModelCollection.this[](System.Uri)
  name.vb: this[](Uri)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.Item(System.Uri)
    name: this[]
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: NMF.Models.Repository.ModelCollection.Count
  commentId: P:NMF.Models.Repository.ModelCollection.Count
  parent: NMF.Models.Repository.ModelCollection
  name: Count
  nameWithType: ModelCollection.Count
  fullName: NMF.Models.Repository.ModelCollection.Count
- uid: NMF.Models.Repository.ModelCollection.IsReadOnly
  commentId: P:NMF.Models.Repository.ModelCollection.IsReadOnly
  parent: NMF.Models.Repository.ModelCollection
  name: IsReadOnly
  nameWithType: ModelCollection.IsReadOnly
  fullName: NMF.Models.Repository.ModelCollection.IsReadOnly
- uid: NMF.Models.Repository.ModelCollection.Keys
  commentId: P:NMF.Models.Repository.ModelCollection.Keys
  parent: NMF.Models.Repository.ModelCollection
  name: Keys
  nameWithType: ModelCollection.Keys
  fullName: NMF.Models.Repository.ModelCollection.Keys
- uid: NMF.Models.Repository.ModelCollection.Values
  commentId: P:NMF.Models.Repository.ModelCollection.Values
  parent: NMF.Models.Repository.ModelCollection
  name: Values
  nameWithType: ModelCollection.Values
  fullName: NMF.Models.Repository.ModelCollection.Values
- uid: NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  commentId: M:NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: Add(KeyValuePair<Uri, Model>)
  nameWithType: ModelCollection.Add(KeyValuePair<Uri, Model>)
  fullName: NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair<System.Uri, NMF.Models.Model>)
  nameWithType.vb: ModelCollection.Add(KeyValuePair(Of Uri, Model))
  fullName.vb: NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair(Of System.Uri, NMF.Models.Model))
  name.vb: Add(KeyValuePair(Of Uri, Model))
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
    name: Add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
    name: Add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  - name: )
- uid: NMF.Models.Repository.ModelCollection.Clear
  commentId: M:NMF.Models.Repository.ModelCollection.Clear
  parent: NMF.Models.Repository.ModelCollection
  name: Clear()
  nameWithType: ModelCollection.Clear()
  fullName: NMF.Models.Repository.ModelCollection.Clear()
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.Clear
    name: Clear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.Clear
    name: Clear
  - name: (
  - name: )
- uid: NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  commentId: M:NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: Contains(KeyValuePair<Uri, Model>)
  nameWithType: ModelCollection.Contains(KeyValuePair<Uri, Model>)
  fullName: NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair<System.Uri, NMF.Models.Model>)
  nameWithType.vb: ModelCollection.Contains(KeyValuePair(Of Uri, Model))
  fullName.vb: NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair(Of System.Uri, NMF.Models.Model))
  name.vb: Contains(KeyValuePair(Of Uri, Model))
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
    name: Contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
    name: Contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  - name: )
- uid: NMF.Models.Repository.ModelCollection.ContainsKey(System.Uri)
  commentId: M:NMF.Models.Repository.ModelCollection.ContainsKey(System.Uri)
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: ContainsKey(Uri)
  nameWithType: ModelCollection.ContainsKey(Uri)
  fullName: NMF.Models.Repository.ModelCollection.ContainsKey(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.ContainsKey(System.Uri)
    name: ContainsKey
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.ContainsKey(System.Uri)
    name: ContainsKey
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}[],System.Int32)
  commentId: M:NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}[],System.Int32)
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: CopyTo(KeyValuePair<Uri, Model>[], int)
  nameWithType: ModelCollection.CopyTo(KeyValuePair<Uri, Model>[], int)
  fullName: NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair<System.Uri, NMF.Models.Model>[], int)
  nameWithType.vb: ModelCollection.CopyTo(KeyValuePair(Of Uri, Model)(), Integer)
  fullName.vb: NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair(Of System.Uri, NMF.Models.Model)(), Integer)
  name.vb: CopyTo(KeyValuePair(Of Uri, Model)(), Integer)
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}[],System.Int32)
    name: CopyTo
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: '>'
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}[],System.Int32)
    name: CopyTo
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.Repository.ModelCollection.GetEnumerator
  commentId: M:NMF.Models.Repository.ModelCollection.GetEnumerator
  parent: NMF.Models.Repository.ModelCollection
  name: GetEnumerator()
  nameWithType: ModelCollection.GetEnumerator()
  fullName: NMF.Models.Repository.ModelCollection.GetEnumerator()
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
- uid: NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  commentId: M:NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: Remove(KeyValuePair<Uri, Model>)
  nameWithType: ModelCollection.Remove(KeyValuePair<Uri, Model>)
  fullName: NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair<System.Uri, NMF.Models.Model>)
  nameWithType.vb: ModelCollection.Remove(KeyValuePair(Of Uri, Model))
  fullName.vb: NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair(Of System.Uri, NMF.Models.Model))
  name.vb: Remove(KeyValuePair(Of Uri, Model))
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
    name: Remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})
    name: Remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  - name: )
- uid: NMF.Models.Repository.ModelCollection.Remove(System.Uri)
  commentId: M:NMF.Models.Repository.ModelCollection.Remove(System.Uri)
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: Remove(Uri)
  nameWithType: ModelCollection.Remove(Uri)
  fullName: NMF.Models.Repository.ModelCollection.Remove(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.Remove(System.Uri)
    name: Remove
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.Remove(System.Uri)
    name: Remove
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri,NMF.Models.Model@)
  commentId: M:NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri,NMF.Models.Model@)
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: TryGetValue(Uri, out Model)
  nameWithType: ModelCollection.TryGetValue(Uri, out Model)
  fullName: NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri, out NMF.Models.Model)
  nameWithType.vb: ModelCollection.TryGetValue(Uri, Model)
  fullName.vb: NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri, NMF.Models.Model)
  name.vb: TryGetValue(Uri, Model)
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri,NMF.Models.Model@)
    name: TryGetValue
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri,NMF.Models.Model@)
    name: TryGetValue
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.#ctor*
  commentId: Overload:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.#ctor
  name: ModelRepositoryModelCollection
  nameWithType: ModelRepository.ModelRepositoryModelCollection.ModelRepositoryModelCollection
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.ModelRepositoryModelCollection
  nameWithType.vb: ModelRepository.ModelRepositoryModelCollection.New
  fullName.vb: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.New
  name.vb: New
- uid: NMF.Models.Repository.ModelRepository
  commentId: T:NMF.Models.Repository.ModelRepository
  parent: NMF.Models.Repository
  name: ModelRepository
  nameWithType: ModelRepository
  fullName: NMF.Models.Repository.ModelRepository
- uid: NMF.Models.Repository.ModelCollection.Add(System.Uri,NMF.Models.Model)
  commentId: M:NMF.Models.Repository.ModelCollection.Add(System.Uri,NMF.Models.Model)
  parent: NMF.Models.Repository.ModelCollection
  isExternal: true
  name: Add(Uri, Model)
  nameWithType: ModelCollection.Add(Uri, Model)
  fullName: NMF.Models.Repository.ModelCollection.Add(System.Uri, NMF.Models.Model)
  spec.csharp:
  - uid: NMF.Models.Repository.ModelCollection.Add(System.Uri,NMF.Models.Model)
    name: Add
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
  spec.vb:
  - uid: NMF.Models.Repository.ModelCollection.Add(System.Uri,NMF.Models.Model)
    name: Add
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: )
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add*
  commentId: Overload:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add
  name: Add
  nameWithType: ModelRepository.ModelRepositoryModelCollection.Add
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: NMF.Models.Model
  commentId: T:NMF.Models.Model
  parent: NMF.Models
  name: Model
  nameWithType: Model
  fullName: NMF.Models.Model
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers*
  commentId: Overload:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers
  name: RegisterChangeHandlers
  nameWithType: ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers
- uid: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers*
  commentId: Overload:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers
  name: UnregisterChangeHandlers
  nameWithType: ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers
  fullName: NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers
