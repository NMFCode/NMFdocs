### YamlMime:ManagedReference
items:
- uid: NMF.Models.Expressions.ModelPropertyChange`2
  commentId: T:NMF.Models.Expressions.ModelPropertyChange`2
  id: ModelPropertyChange`2
  parent: NMF.Models.Expressions
  children:
  - NMF.Models.Expressions.ModelPropertyChange`2.#ctor(`0,System.String)
  - NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{INotifiable,INotifiable})
  - NMF.Models.Expressions.ModelPropertyChange`2.Attach
  - NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  - NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  - NMF.Models.Expressions.ModelPropertyChange`2.Detach
  - NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  - NMF.Models.Expressions.ModelPropertyChange`2.Dispose(System.Boolean)
  - NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  - NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  - NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  - NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  - NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  - NMF.Models.Expressions.ModelPropertyChange`2.Notify(System.Collections.Generic.IList{INotificationResult})
  - NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  - NMF.Models.Expressions.ModelPropertyChange`2.Successors
  - NMF.Models.Expressions.ModelPropertyChange`2.Value
  - NMF.Models.Expressions.ModelPropertyChange`2.ValueChanged
  - NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  langs:
  - csharp
  - vb
  name: ModelPropertyChange<TClass, TProperty>
  nameWithType: ModelPropertyChange<TClass, TProperty>
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>
  type: Class
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelPropertyChange
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 15
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nThe base class for simple property access proxies targeting a specific change event instead of the generic property changed event\n"
  example: []
  syntax:
    content: 'public abstract class ModelPropertyChange<TClass, TProperty> : INotifyReversableExpression<TProperty> where TClass : INotifyPropertyChanged'
    typeParameters:
    - id: TClass
      description: The member type for the property
    - id: TProperty
      description: The property type
    content.vb: >-
      Public MustInherit Class ModelPropertyChange(Of TClass As INotifyPropertyChanged, TProperty)

          Inherits INotifyReversableExpression(Of TProperty)
  inheritance:
  - System.Object
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty)
  name.vb: ModelPropertyChange(Of TClass, TProperty)
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  id: ModelElement
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ModelElement
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelElement
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelElement
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelElement
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 20
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  syntax:
    content: public TClass ModelElement { get; }
    parameters: []
    return:
      type: '{TClass}'
    content.vb: Public ReadOnly Property ModelElement As TClass
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ModelElement*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ModelElement
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ModelElement
- uid: NMF.Models.Expressions.ModelPropertyChange`2.#ctor(`0,System.String)
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.#ctor(`0,System.String)
  id: '#ctor(`0,System.String)'
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ModelPropertyChange(TClass, String)
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelPropertyChange(TClass, String)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelPropertyChange(TClass, System.String)
  type: Constructor
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 26
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nCreates a proxy for the given model instance\n"
  example: []
  syntax:
    content: protected ModelPropertyChange(TClass modelElement, string propertyName)
    parameters:
    - id: modelElement
      type: '{TClass}'
      description: ''
    - id: propertyName
      type: System.String
    content.vb: Protected Sub New(modelElement As TClass, propertyName As String)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.#ctor*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ModelPropertyChange(TClass, String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ModelPropertyChange(TClass, System.String)
- uid: NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  id: CanBeConstant
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: CanBeConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.CanBeConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.CanBeConstant
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanBeConstant
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 39
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nDetermines whether the expression can be replaced by a constant expression\n"
  example: []
  syntax:
    content: public bool CanBeConstant { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanBeConstant As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).CanBeConstant
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).CanBeConstant
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  id: IsConstant
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: IsConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsConstant
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsConstant
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 50
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nDetermines whether the current expression is a constant\n"
  example: []
  syntax:
    content: public bool IsConstant { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConstant As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.IsConstant*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsConstant
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsConstant
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  id: IsParameterFree
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: IsParameterFree
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsParameterFree
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsParameterFree
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsParameterFree
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 61
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nDetermines whether the current expression contains parameters\n"
  example: []
  syntax:
    content: public bool IsParameterFree { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsParameterFree As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsParameterFree
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsParameterFree
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Value
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.Value
  id: Value
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ModelPropertyChange<TClass, TProperty>.Value
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Value
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 72
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nGets or sets the current value\n"
  example: []
  syntax:
    content: public abstract TProperty Value { get; set; }
    parameters: []
    return:
      type: '{TProperty}'
    content.vb: Public MustOverride Property Value As TProperty
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Value*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Value
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Value
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  id: ValueObject
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ValueObject
  nameWithType: ModelPropertyChange<TClass, TProperty>.ValueObject
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ValueObject
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueObject
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 81
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nGets the current value as object\n"
  example: []
  syntax:
    content: public object ValueObject { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property ValueObject As Object
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ValueObject*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ValueObject
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ValueObject
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  id: IsReversable
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsReversable
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsReversable
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReversable
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 92
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nChecks whether it is allowed to set values\n"
  example: []
  syntax:
    content: public bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReversable As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.IsReversable*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsReversable
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsReversable
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Successors
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.Successors
  id: Successors
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: ModelPropertyChange<TClass, TProperty>.Successors
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Successors
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 100
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Successors*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Successors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Successors
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  id: Dependencies
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dependencies
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dependencies
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 102
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  syntax:
    content: public IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{INotifiable}
    content.vb: Public ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Dependencies*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dependencies
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dependencies
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 110
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ValueChanged
  commentId: E:NMF.Models.Expressions.ModelPropertyChange`2.ValueChanged
  id: ValueChanged
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ValueChanged
  nameWithType: ModelPropertyChange<TClass, TProperty>.ValueChanged
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ValueChanged
  type: Event
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChanged
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 115
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nGets fired when the value changed\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> ValueChanged
    return:
      type: System.EventHandler{ValueChangedEventArgs}
    content.vb: Public Event ValueChanged As EventHandler(Of ValueChangedEventArgs)
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ValueChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ValueChanged
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{INotifiable,INotifiable})
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{INotifiable,INotifiable})
  id: ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{INotifiable,INotifiable})
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ApplyParameters(IDictionary<String, Object>, IDictionary<INotifiable, INotifiable>)
  nameWithType: ModelPropertyChange<TClass, TProperty>.ApplyParameters(IDictionary<String, Object>, IDictionary<INotifiable, INotifiable>)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ApplyParameters(System.Collections.Generic.IDictionary<System.String, System.Object>, System.Collections.Generic.IDictionary<INotifiable, INotifiable>)
  type: Method
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ApplyParameters
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 123
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nApplies the given set of parameters to the expression\n"
  remarks: In case that the current expression is parameter free, it simply returns itself
  example: []
  syntax:
    content: public INotifyExpression<TProperty> ApplyParameters(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A set of parameter values
    - id: trace
      type: System.Collections.Generic.IDictionary{INotifiable,INotifiable}
    return:
      type: INotifyExpression{{TProperty}}
      description: A new expression with all parameter placeholders replaced with the parameter values
    content.vb: Public Function ApplyParameters(parameters As IDictionary(Of String, Object), trace As IDictionary(Of INotifiable, INotifiable)) As INotifyExpression(Of TProperty)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ApplyParameters(System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Collections.Generic.IDictionary(Of INotifiable, INotifiable))
  name.vb: ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Attach
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Attach
  id: Attach
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Attach()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Attach()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Attach()
  type: Method
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Attach
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 131
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nDetach a listener to this value\n"
  example: []
  syntax:
    content: public void Attach()
    content.vb: Public Sub Attach
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Attach*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Attach()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Attach()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Detach
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Detach
  id: Detach
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Detach()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Detach()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Detach()
  type: Method
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Detach
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 139
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nAttach a listener to this value\n"
  example: []
  syntax:
    content: public void Detach()
    content.vb: Public Sub Detach
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Detach*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Detach()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Detach()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  id: Reduce
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Reduce()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Reduce()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Reduce()
  type: Method
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Reduce
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 148
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: "\nSimplifies the current expression\n"
  example: []
  syntax:
    content: public INotifyExpression<TProperty> Reduce()
    return:
      type: INotifyExpression{{TProperty}}
      description: A simpler expression repüresenting the same incremental value (e.g. a constant if this expression can be constant), otherwise itself
    content.vb: Public Function Reduce As INotifyExpression(Of TProperty)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Reduce*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Reduce()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Reduce()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  id: Dispose
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dispose()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dispose()
  type: Method
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 153
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Dispose*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dispose()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dispose(System.Boolean)
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dispose(Boolean)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 159
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Dispose*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dispose(System.Boolean)
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Notify(System.Collections.Generic.IList{INotificationResult})
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Notify(System.Collections.Generic.IList{INotificationResult})
  id: Notify(System.Collections.Generic.IList{INotificationResult})
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: ModelPropertyChange<TClass, TProperty>.Notify(IList<INotificationResult>)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Notify(System.Collections.Generic.IList<INotificationResult>)
  type: Method
  source:
    remote:
      path: Models/Models/ModelPropertyChange.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Models/Models/ModelPropertyChange.cs
    startLine: 164
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  syntax:
    content: public INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{INotificationResult}
    return:
      type: INotificationResult
    content.vb: Public Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Notify*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Notify(IList(Of INotificationResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Notify(System.Collections.Generic.IList(Of INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
references:
- uid: NMF.Models.Expressions
  commentId: N:NMF.Models.Expressions
  name: NMF.Models.Expressions
  nameWithType: NMF.Models.Expressions
  fullName: NMF.Models.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ModelElement*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  name: ModelElement
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelElement
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelElement
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ModelElement
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ModelElement
- uid: '{TClass}'
  commentId: '!:TClass'
  definition: TClass
  name: TClass
  nameWithType: TClass
  fullName: TClass
- uid: TClass
  name: TClass
  nameWithType: TClass
  fullName: TClass
- uid: NMF.Models.Expressions.ModelPropertyChange`2.#ctor*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.#ctor
  name: ModelPropertyChange
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelPropertyChange
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelPropertyChange
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ModelPropertyChange
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ModelPropertyChange
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  name: CanBeConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.CanBeConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.CanBeConstant
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).CanBeConstant
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).CanBeConstant
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsConstant*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  name: IsConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsConstant
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsConstant
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsConstant
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  name: IsParameterFree
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsParameterFree
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsParameterFree
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsParameterFree
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsParameterFree
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Value*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Value
  name: Value
  nameWithType: ModelPropertyChange<TClass, TProperty>.Value
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Value
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Value
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Value
- uid: '{TProperty}'
  commentId: '!:TProperty'
  definition: TProperty
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: TProperty
  commentId: '!:TProperty'
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ValueObject*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  name: ValueObject
  nameWithType: ModelPropertyChange<TClass, TProperty>.ValueObject
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ValueObject
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ValueObject
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ValueObject
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsReversable*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  name: IsReversable
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsReversable
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsReversable
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsReversable
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsReversable
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Successors*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Successors
  name: Successors
  nameWithType: ModelPropertyChange<TClass, TProperty>.Successors
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Successors
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Successors
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Successors
- uid: ISuccessorList
  commentId: '!:ISuccessorList'
  isExternal: true
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: ISuccessorList
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dependencies*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  name: Dependencies
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dependencies
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dependencies
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dependencies
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dependencies
- uid: System.Collections.Generic.IEnumerable{INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: INotifiable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: INotifiable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
- uid: ExecutionMetaData
  commentId: '!:ExecutionMetaData'
  isExternal: true
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: ExecutionMetaData
- uid: System.EventHandler{ValueChangedEventArgs}
  commentId: T:System.EventHandler{ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters
  name: ApplyParameters
  nameWithType: ModelPropertyChange<TClass, TProperty>.ApplyParameters
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ApplyParameters
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ApplyParameters
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ApplyParameters
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{INotifiable,INotifiable}
  commentId: T:System.Collections.Generic.IDictionary{INotifiable,INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<INotifiable, INotifiable>
  nameWithType: IDictionary<INotifiable, INotifiable>
  fullName: System.Collections.Generic.IDictionary<INotifiable, INotifiable>
  nameWithType.vb: IDictionary(Of INotifiable, INotifiable)
  fullName.vb: System.Collections.Generic.IDictionary(Of INotifiable, INotifiable)
  name.vb: IDictionary(Of INotifiable, INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: INotifiable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: INotifiable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: INotifiable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: INotifiable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: INotifyExpression{{TProperty}}
  commentId: '!:INotifyExpression{`1}'
  definition: INotifyExpression`1
  name: INotifyExpression<TProperty>
  nameWithType: INotifyExpression<TProperty>
  fullName: INotifyExpression<TProperty>
  nameWithType.vb: INotifyExpression(Of TProperty)
  fullName.vb: INotifyExpression(Of TProperty)
  name.vb: INotifyExpression(Of TProperty)
  spec.csharp:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: INotifyExpression`1
  isExternal: true
  name: INotifyExpression<>
  nameWithType: INotifyExpression<>
  fullName: INotifyExpression<>
  nameWithType.vb: INotifyExpression(Of )
  fullName.vb: INotifyExpression(Of )
  name.vb: INotifyExpression(Of )
  spec.csharp:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Attach*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Attach
  name: Attach
  nameWithType: ModelPropertyChange<TClass, TProperty>.Attach
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Attach
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Attach
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Attach
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Detach*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Detach
  name: Detach
  nameWithType: ModelPropertyChange<TClass, TProperty>.Detach
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Detach
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Detach
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Detach
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Reduce*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  name: Reduce
  nameWithType: ModelPropertyChange<TClass, TProperty>.Reduce
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Reduce
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Reduce
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Reduce
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dispose*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  name: Dispose
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dispose
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dispose
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dispose
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dispose
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Notify*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Notify
  name: Notify
  nameWithType: ModelPropertyChange<TClass, TProperty>.Notify
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Notify
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Notify
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Notify
- uid: System.Collections.Generic.IList{INotificationResult}
  commentId: T:System.Collections.Generic.IList{INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: INotificationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: INotificationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: INotificationResult
  commentId: '!:INotificationResult'
  isExternal: true
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
