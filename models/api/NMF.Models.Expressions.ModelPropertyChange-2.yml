### YamlMime:ManagedReference
items:
- uid: NMF.Models.Expressions.ModelPropertyChange`2
  commentId: T:NMF.Models.Expressions.ModelPropertyChange`2
  id: ModelPropertyChange`2
  parent: NMF.Models.Expressions
  children:
  - NMF.Models.Expressions.ModelPropertyChange`2.#ctor(`0,System.String)
  - NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  - NMF.Models.Expressions.ModelPropertyChange`2.Attach
  - NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  - NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  - NMF.Models.Expressions.ModelPropertyChange`2.Detach
  - NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  - NMF.Models.Expressions.ModelPropertyChange`2.Dispose(System.Boolean)
  - NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  - NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  - NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  - NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  - NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  - NMF.Models.Expressions.ModelPropertyChange`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  - NMF.Models.Expressions.ModelPropertyChange`2.Successors
  - NMF.Models.Expressions.ModelPropertyChange`2.Value
  - NMF.Models.Expressions.ModelPropertyChange`2.ValueChanged
  - NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  langs:
  - csharp
  - vb
  name: ModelPropertyChange<TClass, TProperty>
  nameWithType: ModelPropertyChange<TClass, TProperty>
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>
  type: Class
  source:
    id: ModelPropertyChange
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 15
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: The base class for simple property access proxies targeting a specific change event instead of the generic property changed event
  example: []
  syntax:
    content: 'public abstract class ModelPropertyChange<TClass, TProperty> : INotifyReversableExpression<TProperty>, INotifyExpression<TProperty>, INotifyExpression, INotifyReversableValue<TProperty>, INotifyValue<TProperty>, INotifiable, IDisposable where TClass : INotifyPropertyChanged'
    typeParameters:
    - id: TClass
      description: The member type for the property
    - id: TProperty
      description: The property type
    content.vb: Public MustInherit Class ModelPropertyChange(Of TClass As INotifyPropertyChanged, TProperty) Implements INotifyReversableExpression(Of TProperty), INotifyExpression(Of TProperty), INotifyExpression, INotifyReversableValue(Of TProperty), INotifyValue(Of TProperty), INotifiable, IDisposable
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.INotifyReversableExpression{{TProperty}}
  - NMF.Expressions.INotifyExpression{{TProperty}}
  - NMF.Expressions.INotifyExpression
  - NMF.Expressions.INotifyReversableValue{{TProperty}}
  - NMF.Expressions.INotifyValue{{TProperty}}
  - NMF.Expressions.INotifiable
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty)
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty)
  name.vb: ModelPropertyChange(Of TClass, TProperty)
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  id: ModelElement
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ModelElement
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelElement
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelElement
  type: Property
  source:
    id: ModelElement
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 23
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: The model element
  example: []
  syntax:
    content: public TClass ModelElement { get; }
    parameters: []
    return:
      type: '{TClass}'
    content.vb: Public Property ModelElement As TClass
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ModelElement*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ModelElement
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ModelElement
- uid: NMF.Models.Expressions.ModelPropertyChange`2.#ctor(`0,System.String)
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.#ctor(`0,System.String)
  id: '#ctor(`0,System.String)'
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ModelPropertyChange(TClass, string)
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelPropertyChange(TClass, string)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelPropertyChange(TClass, string)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 30
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Creates a proxy for the given model instance
  example: []
  syntax:
    content: protected ModelPropertyChange(TClass modelElement, string propertyName)
    parameters:
    - id: modelElement
      type: '{TClass}'
      description: the model element
    - id: propertyName
      type: System.String
      description: The property name
    content.vb: Protected Sub New(modelElement As TClass, propertyName As String)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.#ctor*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).New(TClass, String)
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).New(TClass, String)
  name.vb: New(TClass, String)
- uid: NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  id: CanBeConstant
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: CanBeConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.CanBeConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.CanBeConstant
  type: Property
  source:
    id: CanBeConstant
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 45
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Determines whether the expression can be replaced by a constant expression
  example: []
  syntax:
    content: public bool CanBeConstant { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanBeConstant As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant*
  implements:
  - NMF.Expressions.INotifyExpression.CanBeConstant
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).CanBeConstant
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).CanBeConstant
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  id: IsConstant
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: IsConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsConstant
  type: Property
  source:
    id: IsConstant
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 56
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Determines whether the current expression is a constant
  example: []
  syntax:
    content: public bool IsConstant { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConstant As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.IsConstant*
  implements:
  - NMF.Expressions.INotifyExpression.IsConstant
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsConstant
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsConstant
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  id: IsParameterFree
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: IsParameterFree
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsParameterFree
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsParameterFree
  type: Property
  source:
    id: IsParameterFree
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 67
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Determines whether the current expression contains parameters
  example: []
  syntax:
    content: public bool IsParameterFree { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsParameterFree As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree*
  implements:
  - NMF.Expressions.INotifyExpression.IsParameterFree
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsParameterFree
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsParameterFree
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Value
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.Value
  id: Value
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ModelPropertyChange<TClass, TProperty>.Value
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Value
  type: Property
  source:
    id: Value
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 78
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Gets or sets the current value
  example: []
  syntax:
    content: public abstract TProperty Value { get; set; }
    parameters: []
    return:
      type: '{TProperty}'
    content.vb: Public MustOverride Property Value As TProperty
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Value*
  implements:
  - NMF.Expressions.INotifyReversableValue{{TProperty}}.Value
  - NMF.Expressions.INotifyValue{{TProperty}}.Value
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Value
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Value
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  id: ValueObject
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ValueObject
  nameWithType: ModelPropertyChange<TClass, TProperty>.ValueObject
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ValueObject
  type: Property
  source:
    id: ValueObject
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 87
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Gets the current value as object
  example: []
  syntax:
    content: public object ValueObject { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property ValueObject As Object
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ValueObject*
  implements:
  - NMF.Expressions.INotifyExpression.ValueObject
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ValueObject
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ValueObject
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  id: IsReversable
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsReversable
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsReversable
  type: Property
  source:
    id: IsReversable
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 98
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Checks whether it is allowed to set values
  example: []
  syntax:
    content: public bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReversable As Boolean
  overload: NMF.Models.Expressions.ModelPropertyChange`2.IsReversable*
  implements:
  - NMF.Expressions.INotifyReversableValue{{TProperty}}.IsReversable
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsReversable
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsReversable
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Successors
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.Successors
  id: Successors
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: ModelPropertyChange<TClass, TProperty>.Successors
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Successors
  type: Property
  source:
    id: Successors
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 107
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: The nodes that will get notified by this node.
  example: []
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Successors*
  implements:
  - NMF.Expressions.INotifiable.Successors
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Successors
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Successors
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  id: Dependencies
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dependencies
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dependencies
  type: Property
  source:
    id: Dependencies
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 110
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Nodes that notify this node.
  example: []
  syntax:
    content: public IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Dependencies*
  implements:
  - NMF.Expressions.INotifiable.Dependencies
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dependencies
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dependencies
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  commentId: P:NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  type: Property
  source:
    id: ExecutionMetaData
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 119
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Used by the execution engine during incremental execution.
  example: []
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData*
  implements:
  - NMF.Expressions.INotifiable.ExecutionMetaData
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ValueChanged
  commentId: E:NMF.Models.Expressions.ModelPropertyChange`2.ValueChanged
  id: ValueChanged
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ValueChanged
  nameWithType: ModelPropertyChange<TClass, TProperty>.ValueChanged
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ValueChanged
  type: Event
  source:
    id: ValueChanged
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 124
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Gets fired when the value changed
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> ValueChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event ValueChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Expressions.INotifyValue{{TProperty}}.ValueChanged
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ValueChanged
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ValueChanged
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  id: ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: ApplyParameters(IDictionary<string, object>, IDictionary<INotifiable, INotifiable>)
  nameWithType: ModelPropertyChange<TClass, TProperty>.ApplyParameters(IDictionary<string, object>, IDictionary<INotifiable, INotifiable>)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ApplyParameters(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<NMF.Expressions.INotifiable, NMF.Expressions.INotifiable>)
  type: Method
  source:
    id: ApplyParameters
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 127
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Applies the given set of parameters to the expression
  remarks: In case that the current expression is parameter free, it simply returns itself
  example: []
  syntax:
    content: public INotifyExpression<TProperty> ApplyParameters(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A set of parameter values
    - id: trace
      type: System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable}
      description: A trace to make sure parameters are only applied once for every DDG node
    return:
      type: NMF.Expressions.INotifyExpression{{TProperty}}
      description: A new expression with all parameter placeholders replaced with the parameter values
    content.vb: Public Function ApplyParameters(parameters As IDictionary(Of String, Object), trace As IDictionary(Of INotifiable, INotifiable)) As INotifyExpression(Of TProperty)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters*
  implements:
  - NMF.Expressions.INotifyExpression{{TProperty}}.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ApplyParameters(System.Collections.Generic.IDictionary(Of String, Object), System.Collections.Generic.IDictionary(Of NMF.Expressions.INotifiable, NMF.Expressions.INotifiable))
  name.vb: ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Attach
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Attach
  id: Attach
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Attach()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Attach()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Attach()
  type: Method
  source:
    id: Attach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 135
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Detach a listener to this value
  example: []
  syntax:
    content: public void Attach()
    content.vb: Public Sub Attach()
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Attach*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Attach()
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Attach()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Detach
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Detach
  id: Detach
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Detach()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Detach()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Detach()
  type: Method
  source:
    id: Detach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 143
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Attach a listener to this value
  example: []
  syntax:
    content: public void Detach()
    content.vb: Public Sub Detach()
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Detach*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Detach()
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Detach()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  id: Reduce
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Reduce()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Reduce()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Reduce()
  type: Method
  source:
    id: Reduce
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 152
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Simplifies the current expression
  example: []
  syntax:
    content: public INotifyExpression<TProperty> Reduce()
    return:
      type: NMF.Expressions.INotifyExpression{{TProperty}}
      description: A simpler expression repüresenting the same incremental value (e.g. a constant if this expression can be constant), otherwise itself
    content.vb: Public Function Reduce() As INotifyExpression(Of TProperty)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Reduce*
  implements:
  - NMF.Expressions.INotifyExpression{{TProperty}}.Reduce
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Reduce()
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Reduce()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  id: Dispose
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dispose()
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dispose()
  type: Method
  source:
    id: Dispose
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 158
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dispose()
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dispose()
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dispose(System.Boolean)
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dispose(bool)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dispose(bool)
  type: Method
  source:
    id: Dispose
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 168
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Disposes the current object
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: True, if managed resources should disposed, otherwise false
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Dispose*
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dispose(Boolean)
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Models.Expressions.ModelPropertyChange`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Models.Expressions.ModelPropertyChange`2
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: ModelPropertyChange<TClass, TProperty>.Notify(IList<INotificationResult>)
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    id: Notify
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\ModelPropertyChange.cs
    startLine: 174
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Expressions
  summary: Gets called when one of the dependencies signals a notification.
  example: []
  syntax:
    content: public INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
      description: Contains information about what triggered this notification.
    return:
      type: NMF.Expressions.INotificationResult
      description: An object describing the changes that happened in this notification.
    content.vb: Public Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Models.Expressions.ModelPropertyChange`2.Notify*
  implements:
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
references:
- uid: NMF.Models.Expressions
  commentId: N:NMF.Models.Expressions
  href: NMF.html
  name: NMF.Models.Expressions
  nameWithType: NMF.Models.Expressions
  fullName: NMF.Models.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Models
    name: Models
    href: NMF.Models.html
  - name: .
  - uid: NMF.Models.Expressions
    name: Expressions
    href: NMF.Models.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Models
    name: Models
    href: NMF.Models.html
  - name: .
  - uid: NMF.Models.Expressions
    name: Expressions
    href: NMF.Models.Expressions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Expressions.INotifyReversableExpression{{TProperty}}
  commentId: T:NMF.Expressions.INotifyReversableExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<TProperty>
  nameWithType: INotifyReversableExpression<TProperty>
  fullName: NMF.Expressions.INotifyReversableExpression<TProperty>
  nameWithType.vb: INotifyReversableExpression(Of TProperty)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of TProperty)
  name.vb: INotifyReversableExpression(Of TProperty)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: <
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TProperty
  - name: )
- uid: NMF.Expressions.INotifyExpression{{TProperty}}
  commentId: T:NMF.Expressions.INotifyExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<TProperty>
  nameWithType: INotifyExpression<TProperty>
  fullName: NMF.Expressions.INotifyExpression<TProperty>
  nameWithType.vb: INotifyExpression(Of TProperty)
  fullName.vb: NMF.Expressions.INotifyExpression(Of TProperty)
  name.vb: INotifyExpression(Of TProperty)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: TProperty
  - name: )
- uid: NMF.Expressions.INotifyExpression
  commentId: T:NMF.Expressions.INotifyExpression
  parent: NMF.Expressions
  name: INotifyExpression
  nameWithType: INotifyExpression
  fullName: NMF.Expressions.INotifyExpression
- uid: NMF.Expressions.INotifyReversableValue{{TProperty}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TProperty>
  nameWithType: INotifyReversableValue<TProperty>
  fullName: NMF.Expressions.INotifyReversableValue<TProperty>
  nameWithType.vb: INotifyReversableValue(Of TProperty)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TProperty)
  name.vb: INotifyReversableValue(Of TProperty)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: TProperty
  - name: )
- uid: NMF.Expressions.INotifyValue{{TProperty}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<TProperty>
  nameWithType: INotifyValue<TProperty>
  fullName: NMF.Expressions.INotifyValue<TProperty>
  nameWithType.vb: INotifyValue(Of TProperty)
  fullName.vb: NMF.Expressions.INotifyValue(Of TProperty)
  name.vb: INotifyValue(Of TProperty)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: TProperty
  - name: )
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.INotifyReversableExpression`1
  commentId: T:NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Expressions.INotifyExpression`1
  commentId: T:NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ModelElement*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ModelElement
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_ModelElement
  name: ModelElement
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelElement
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelElement
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ModelElement
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ModelElement
- uid: '{TClass}'
  commentId: '!:TClass'
  definition: TClass
  name: TClass
  nameWithType: TClass
  fullName: TClass
- uid: TClass
  name: TClass
  nameWithType: TClass
  fullName: TClass
- uid: NMF.Models.Expressions.ModelPropertyChange`2.#ctor*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.#ctor
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2__ctor__0_System_String_
  name: ModelPropertyChange
  nameWithType: ModelPropertyChange<TClass, TProperty>.ModelPropertyChange
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ModelPropertyChange
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).New
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_CanBeConstant
  name: CanBeConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.CanBeConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.CanBeConstant
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).CanBeConstant
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).CanBeConstant
- uid: NMF.Expressions.INotifyExpression.CanBeConstant
  commentId: P:NMF.Expressions.INotifyExpression.CanBeConstant
  parent: NMF.Expressions.INotifyExpression
  name: CanBeConstant
  nameWithType: INotifyExpression.CanBeConstant
  fullName: NMF.Expressions.INotifyExpression.CanBeConstant
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsConstant*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.IsConstant
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_IsConstant
  name: IsConstant
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsConstant
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsConstant
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsConstant
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsConstant
- uid: NMF.Expressions.INotifyExpression.IsConstant
  commentId: P:NMF.Expressions.INotifyExpression.IsConstant
  parent: NMF.Expressions.INotifyExpression
  name: IsConstant
  nameWithType: INotifyExpression.IsConstant
  fullName: NMF.Expressions.INotifyExpression.IsConstant
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_IsParameterFree
  name: IsParameterFree
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsParameterFree
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsParameterFree
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsParameterFree
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsParameterFree
- uid: NMF.Expressions.INotifyExpression.IsParameterFree
  commentId: P:NMF.Expressions.INotifyExpression.IsParameterFree
  parent: NMF.Expressions.INotifyExpression
  name: IsParameterFree
  nameWithType: INotifyExpression.IsParameterFree
  fullName: NMF.Expressions.INotifyExpression.IsParameterFree
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Value*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Value
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Value
  name: Value
  nameWithType: ModelPropertyChange<TClass, TProperty>.Value
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Value
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Value
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Value
- uid: NMF.Expressions.INotifyReversableValue{{TProperty}}.Value
  commentId: P:NMF.Expressions.INotifyReversableValue{`1}.Value
  parent: NMF.Expressions.INotifyReversableValue{{TProperty}}
  definition: NMF.Expressions.INotifyReversableValue`1.Value
  name: Value
  nameWithType: INotifyReversableValue<TProperty>.Value
  fullName: NMF.Expressions.INotifyReversableValue<TProperty>.Value
  nameWithType.vb: INotifyReversableValue(Of TProperty).Value
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TProperty).Value
- uid: NMF.Expressions.INotifyValue{{TProperty}}.Value
  commentId: P:NMF.Expressions.INotifyValue{`1}.Value
  parent: NMF.Expressions.INotifyValue{{TProperty}}
  definition: NMF.Expressions.INotifyValue`1.Value
  name: Value
  nameWithType: INotifyValue<TProperty>.Value
  fullName: NMF.Expressions.INotifyValue<TProperty>.Value
  nameWithType.vb: INotifyValue(Of TProperty).Value
  fullName.vb: NMF.Expressions.INotifyValue(Of TProperty).Value
- uid: '{TProperty}'
  commentId: '!:TProperty'
  definition: TProperty
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: NMF.Expressions.INotifyReversableValue`1.Value
  commentId: P:NMF.Expressions.INotifyReversableValue`1.Value
  name: Value
  nameWithType: INotifyReversableValue<T>.Value
  fullName: NMF.Expressions.INotifyReversableValue<T>.Value
  nameWithType.vb: INotifyReversableValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).Value
- uid: NMF.Expressions.INotifyValue`1.Value
  commentId: P:NMF.Expressions.INotifyValue`1.Value
  name: Value
  nameWithType: INotifyValue<T>.Value
  fullName: NMF.Expressions.INotifyValue<T>.Value
  nameWithType.vb: INotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyValue(Of T).Value
- uid: TProperty
  commentId: '!:TProperty'
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ValueObject*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ValueObject
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_ValueObject
  name: ValueObject
  nameWithType: ModelPropertyChange<TClass, TProperty>.ValueObject
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ValueObject
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ValueObject
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ValueObject
- uid: NMF.Expressions.INotifyExpression.ValueObject
  commentId: P:NMF.Expressions.INotifyExpression.ValueObject
  parent: NMF.Expressions.INotifyExpression
  name: ValueObject
  nameWithType: INotifyExpression.ValueObject
  fullName: NMF.Expressions.INotifyExpression.ValueObject
- uid: NMF.Models.Expressions.ModelPropertyChange`2.IsReversable*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.IsReversable
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_IsReversable
  name: IsReversable
  nameWithType: ModelPropertyChange<TClass, TProperty>.IsReversable
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.IsReversable
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).IsReversable
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).IsReversable
- uid: NMF.Expressions.INotifyReversableValue{{TProperty}}.IsReversable
  commentId: P:NMF.Expressions.INotifyReversableValue{`1}.IsReversable
  parent: NMF.Expressions.INotifyReversableValue{{TProperty}}
  definition: NMF.Expressions.INotifyReversableValue`1.IsReversable
  name: IsReversable
  nameWithType: INotifyReversableValue<TProperty>.IsReversable
  fullName: NMF.Expressions.INotifyReversableValue<TProperty>.IsReversable
  nameWithType.vb: INotifyReversableValue(Of TProperty).IsReversable
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TProperty).IsReversable
- uid: NMF.Expressions.INotifyReversableValue`1.IsReversable
  commentId: P:NMF.Expressions.INotifyReversableValue`1.IsReversable
  name: IsReversable
  nameWithType: INotifyReversableValue<T>.IsReversable
  fullName: NMF.Expressions.INotifyReversableValue<T>.IsReversable
  nameWithType.vb: INotifyReversableValue(Of T).IsReversable
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).IsReversable
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Successors*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Successors
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Successors
  name: Successors
  nameWithType: ModelPropertyChange<TClass, TProperty>.Successors
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Successors
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Successors
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Successors
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dependencies*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Dependencies
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Dependencies
  name: Dependencies
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dependencies
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dependencies
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dependencies
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dependencies
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ExecutionMetaData
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ExecutionMetaData
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Expressions.INotifyValue{{TProperty}}.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue{`1}.ValueChanged
  parent: NMF.Expressions.INotifyValue{{TProperty}}
  definition: NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<TProperty>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<TProperty>.ValueChanged
  nameWithType.vb: INotifyValue(Of TProperty).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of TProperty).ValueChanged
- uid: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  commentId: T:System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<NMF.Expressions.ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Expressions.ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: NMF.Expressions.INotifyValue`1.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - name: TEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - name: TEventArgs
  - name: )
- uid: NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_ApplyParameters_System_Collections_Generic_IDictionary_System_String_System_Object__System_Collections_Generic_IDictionary_NMF_Expressions_INotifiable_NMF_Expressions_INotifiable__
  name: ApplyParameters
  nameWithType: ModelPropertyChange<TClass, TProperty>.ApplyParameters
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.ApplyParameters
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).ApplyParameters
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).ApplyParameters
- uid: NMF.Expressions.INotifyExpression{{TProperty}}.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  commentId: M:NMF.Expressions.INotifyExpression{`1}.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  parent: NMF.Expressions.INotifyExpression{{TProperty}}
  definition: NMF.Expressions.INotifyExpression`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: ApplyParameters(IDictionary<string, object>, IDictionary<INotifiable, INotifiable>)
  nameWithType: INotifyExpression<TProperty>.ApplyParameters(IDictionary<string, object>, IDictionary<INotifiable, INotifiable>)
  fullName: NMF.Expressions.INotifyExpression<TProperty>.ApplyParameters(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<NMF.Expressions.INotifiable, NMF.Expressions.INotifiable>)
  nameWithType.vb: INotifyExpression(Of TProperty).ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
  fullName.vb: NMF.Expressions.INotifyExpression(Of TProperty).ApplyParameters(System.Collections.Generic.IDictionary(Of String, Object), System.Collections.Generic.IDictionary(Of NMF.Expressions.INotifiable, NMF.Expressions.INotifiable))
  name.vb: ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression{`1}.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
    name: ApplyParameters
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression{`1}.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
    name: ApplyParameters
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<string, object>
  nameWithType: IDictionary<string, object>
  fullName: System.Collections.Generic.IDictionary<string, object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<INotifiable, INotifiable>
  nameWithType: IDictionary<INotifiable, INotifiable>
  fullName: System.Collections.Generic.IDictionary<NMF.Expressions.INotifiable, NMF.Expressions.INotifiable>
  nameWithType.vb: IDictionary(Of INotifiable, INotifiable)
  fullName.vb: System.Collections.Generic.IDictionary(Of NMF.Expressions.INotifiable, NMF.Expressions.INotifiable)
  name.vb: IDictionary(Of INotifiable, INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.INotifyExpression`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  commentId: M:NMF.Expressions.INotifyExpression`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: ApplyParameters(IDictionary<string, object>, IDictionary<INotifiable, INotifiable>)
  nameWithType: INotifyExpression<T>.ApplyParameters(IDictionary<string, object>, IDictionary<INotifiable, INotifiable>)
  fullName: NMF.Expressions.INotifyExpression<T>.ApplyParameters(System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IDictionary<NMF.Expressions.INotifiable, NMF.Expressions.INotifiable>)
  nameWithType.vb: INotifyExpression(Of T).ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
  fullName.vb: NMF.Expressions.INotifyExpression(Of T).ApplyParameters(System.Collections.Generic.IDictionary(Of String, Object), System.Collections.Generic.IDictionary(Of NMF.Expressions.INotifiable, NMF.Expressions.INotifiable))
  name.vb: ApplyParameters(IDictionary(Of String, Object), IDictionary(Of INotifiable, INotifiable))
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
    name: ApplyParameters
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})
    name: ApplyParameters
  - name: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Attach*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Attach
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Attach
  name: Attach
  nameWithType: ModelPropertyChange<TClass, TProperty>.Attach
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Attach
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Attach
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Attach
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Detach*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Detach
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Detach
  name: Detach
  nameWithType: ModelPropertyChange<TClass, TProperty>.Detach
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Detach
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Detach
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Detach
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Reduce*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Reduce
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Reduce
  name: Reduce
  nameWithType: ModelPropertyChange<TClass, TProperty>.Reduce
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Reduce
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Reduce
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Reduce
- uid: NMF.Expressions.INotifyExpression{{TProperty}}.Reduce
  commentId: M:NMF.Expressions.INotifyExpression{`1}.Reduce
  parent: NMF.Expressions.INotifyExpression{{TProperty}}
  definition: NMF.Expressions.INotifyExpression`1.Reduce
  name: Reduce()
  nameWithType: INotifyExpression<TProperty>.Reduce()
  fullName: NMF.Expressions.INotifyExpression<TProperty>.Reduce()
  nameWithType.vb: INotifyExpression(Of TProperty).Reduce()
  fullName.vb: NMF.Expressions.INotifyExpression(Of TProperty).Reduce()
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression{`1}.Reduce
    name: Reduce
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression{`1}.Reduce
    name: Reduce
  - name: (
  - name: )
- uid: NMF.Expressions.INotifyExpression`1.Reduce
  commentId: M:NMF.Expressions.INotifyExpression`1.Reduce
  name: Reduce()
  nameWithType: INotifyExpression<T>.Reduce()
  fullName: NMF.Expressions.INotifyExpression<T>.Reduce()
  nameWithType.vb: INotifyExpression(Of T).Reduce()
  fullName.vb: NMF.Expressions.INotifyExpression(Of T).Reduce()
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1.Reduce
    name: Reduce
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1.Reduce
    name: Reduce
  - name: (
  - name: )
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Dispose*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Dispose
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Dispose
  name: Dispose
  nameWithType: ModelPropertyChange<TClass, TProperty>.Dispose
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Dispose
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Dispose
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: NMF.Models.Expressions.ModelPropertyChange`2.Notify*
  commentId: Overload:NMF.Models.Expressions.ModelPropertyChange`2.Notify
  href: NMF.Models.Expressions.ModelPropertyChange-2.html#NMF_Models_Expressions_ModelPropertyChange_2_Notify_System_Collections_Generic_IList_NMF_Expressions_INotificationResult__
  name: Notify
  nameWithType: ModelPropertyChange<TClass, TProperty>.Notify
  fullName: NMF.Models.Expressions.ModelPropertyChange<TClass, TProperty>.Notify
  nameWithType.vb: ModelPropertyChange(Of TClass, TProperty).Notify
  fullName.vb: NMF.Models.Expressions.ModelPropertyChange(Of TClass, TProperty).Notify
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
