### YamlMime:ManagedReference
items:
- uid: NMF.Models.Repository.MetaRepository
  commentId: T:NMF.Models.Repository.MetaRepository
  id: MetaRepository
  parent: NMF.Models.Repository
  children:
  - NMF.Models.Repository.MetaRepository.Instance
  - NMF.Models.Repository.MetaRepository.Models
  - NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#BubbledChange
  - NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#Resolve(System.Uri,System.Boolean)
  - NMF.Models.Repository.MetaRepository.Resolve(System.String)
  - NMF.Models.Repository.MetaRepository.Resolve(System.Uri)
  - NMF.Models.Repository.MetaRepository.ResolveClass(System.Type)
  - NMF.Models.Repository.MetaRepository.ResolveType(System.String)
  - NMF.Models.Repository.MetaRepository.Serializer
  langs:
  - csharp
  - vb
  name: MetaRepository
  nameWithType: MetaRepository
  fullName: NMF.Models.Repository.MetaRepository
  type: Class
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MetaRepository
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 13
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nDenotes the repository with the metamodels contained in the loaded assemblies\n"
  example: []
  syntax:
    content: 'public sealed class MetaRepository : IModelRepository'
    content.vb: >-
      Public NotInheritable Class MetaRepository
          Implements IModelRepository
  inheritance:
  - System.Object
  implements:
  - NMF.Models.Repository.IModelRepository
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#BubbledChange
  commentId: E:NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#BubbledChange
  id: NMF#Models#Repository#IModelRepository#BubbledChange
  isEii: true
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: IModelRepository.BubbledChange
  nameWithType: MetaRepository.IModelRepository.BubbledChange
  fullName: NMF.Models.Repository.MetaRepository.NMF.Models.Repository.IModelRepository.BubbledChange
  type: Event
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Models.Repository.IModelRepository.BubbledChange
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 20
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: event EventHandler<BubbledChangeEventArgs> IModelRepository.BubbledChange
    return:
      type: System.EventHandler{NMF.Models.BubbledChangeEventArgs}
    content.vb: Event NMF.Models.Repository.IModelRepository.BubbledChange As EventHandler(Of BubbledChangeEventArgs) Implements IModelRepository.BubbledChange
  implements:
  - NMF.Models.Repository.IModelRepository.BubbledChange
  nameWithType.vb: MetaRepository.NMF.Models.Repository.IModelRepository.BubbledChange
  name.vb: NMF.Models.Repository.IModelRepository.BubbledChange
- uid: NMF.Models.Repository.MetaRepository.Instance
  commentId: P:NMF.Models.Repository.MetaRepository.Instance
  id: Instance
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: MetaRepository.Instance
  fullName: NMF.Models.Repository.MetaRepository.Instance
  type: Property
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Instance
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 29
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nGets the instance\n"
  example: []
  syntax:
    content: public static MetaRepository Instance { get; }
    parameters: []
    return:
      type: NMF.Models.Repository.MetaRepository
    content.vb: Public Shared ReadOnly Property Instance As MetaRepository
  overload: NMF.Models.Repository.MetaRepository.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NMF.Models.Repository.MetaRepository.Serializer
  commentId: P:NMF.Models.Repository.MetaRepository.Serializer
  id: Serializer
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: Serializer
  nameWithType: MetaRepository.Serializer
  fullName: NMF.Models.Repository.MetaRepository.Serializer
  type: Property
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Serializer
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 40
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nGets the serializer used for the deserialization of the models\n"
  example: []
  syntax:
    content: public ModelSerializer Serializer { get; }
    parameters: []
    return:
      type: NMF.Models.Repository.Serialization.ModelSerializer
    content.vb: Public ReadOnly Property Serializer As ModelSerializer
  overload: NMF.Models.Repository.MetaRepository.Serializer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.Repository.MetaRepository.ResolveType(System.String)
  commentId: M:NMF.Models.Repository.MetaRepository.ResolveType(System.String)
  id: ResolveType(System.String)
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: ResolveType(String)
  nameWithType: MetaRepository.ResolveType(String)
  fullName: NMF.Models.Repository.MetaRepository.ResolveType(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveType
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 134
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  summary: "\nResolves the given uri into a type\n"
  example: []
  syntax:
    content: public IType ResolveType(string uriString)
    parameters:
    - id: uriString
      type: System.String
      description: The absolute uri
    return:
      type: NMF.Models.Meta.IType
      description: The type object
    content.vb: Public Function ResolveType(uriString As String) As IType
  overload: NMF.Models.Repository.MetaRepository.ResolveType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Repository.MetaRepository.ResolveClass(System.Type)
  commentId: M:NMF.Models.Repository.MetaRepository.ResolveClass(System.Type)
  id: ResolveClass(System.Type)
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: ResolveClass(Type)
  nameWithType: MetaRepository.ResolveClass(Type)
  fullName: NMF.Models.Repository.MetaRepository.ResolveClass(System.Type)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveClass
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 139
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public IType ResolveClass(Type systemType)
    parameters:
    - id: systemType
      type: System.Type
    return:
      type: NMF.Models.Meta.IType
    content.vb: Public Function ResolveClass(systemType As Type) As IType
  overload: NMF.Models.Repository.MetaRepository.ResolveClass*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Repository.MetaRepository.Resolve(System.Uri)
  commentId: M:NMF.Models.Repository.MetaRepository.Resolve(System.Uri)
  id: Resolve(System.Uri)
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: Resolve(Uri)
  nameWithType: MetaRepository.Resolve(Uri)
  fullName: NMF.Models.Repository.MetaRepository.Resolve(System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Resolve
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 305
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  example: []
  syntax:
    content: public IModelElement Resolve(Uri uri)
    parameters:
    - id: uri
      type: System.Uri
    return:
      type: NMF.Models.IModelElement
    content.vb: Public Function Resolve(uri As Uri) As IModelElement
  overload: NMF.Models.Repository.MetaRepository.Resolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Repository.MetaRepository.Resolve(System.String)
  commentId: M:NMF.Models.Repository.MetaRepository.Resolve(System.String)
  id: Resolve(System.String)
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: Resolve(String)
  nameWithType: MetaRepository.Resolve(String)
  fullName: NMF.Models.Repository.MetaRepository.Resolve(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Resolve
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 316
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  example: []
  syntax:
    content: public IModelElement Resolve(string uriString)
    parameters:
    - id: uriString
      type: System.String
    return:
      type: NMF.Models.IModelElement
    content.vb: Public Function Resolve(uriString As String) As IModelElement
  overload: NMF.Models.Repository.MetaRepository.Resolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#Resolve(System.Uri,System.Boolean)
  commentId: M:NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#Resolve(System.Uri,System.Boolean)
  id: NMF#Models#Repository#IModelRepository#Resolve(System.Uri,System.Boolean)
  isEii: true
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: IModelRepository.Resolve(Uri, Boolean)
  nameWithType: MetaRepository.IModelRepository.Resolve(Uri, Boolean)
  fullName: NMF.Models.Repository.MetaRepository.NMF.Models.Repository.IModelRepository.Resolve(System.Uri, System.Boolean)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Models.Repository.IModelRepository.Resolve
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 321
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: IModelElement IModelRepository.Resolve(Uri uri, bool loadOnDemand)
    parameters:
    - id: uri
      type: System.Uri
    - id: loadOnDemand
      type: System.Boolean
    return:
      type: NMF.Models.IModelElement
    content.vb: Function NMF.Models.Repository.IModelRepository.Resolve(uri As Uri, loadOnDemand As Boolean) As IModelElement Implements IModelRepository.Resolve
  overload: NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#Resolve*
  implements:
  - NMF.Models.Repository.IModelRepository.Resolve(System.Uri,System.Boolean)
  nameWithType.vb: MetaRepository.NMF.Models.Repository.IModelRepository.Resolve(Uri, Boolean)
  name.vb: NMF.Models.Repository.IModelRepository.Resolve(Uri, Boolean)
- uid: NMF.Models.Repository.MetaRepository.Models
  commentId: P:NMF.Models.Repository.MetaRepository.Models
  id: Models
  parent: NMF.Models.Repository.MetaRepository
  langs:
  - csharp
  - vb
  name: Models
  nameWithType: MetaRepository.Models
  fullName: NMF.Models.Repository.MetaRepository.Models
  type: Property
  source:
    remote:
      path: Models/Models/Repository/MetaRepository.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Models
    path: src/Models/Models/Repository/MetaRepository.cs
    startLine: 326
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public ModelCollection Models { get; }
    parameters: []
    return:
      type: NMF.Models.Repository.ModelCollection
    content.vb: Public ReadOnly Property Models As ModelCollection
  overload: NMF.Models.Repository.MetaRepository.Models*
  implements:
  - NMF.Models.Repository.IModelRepository.Models
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: NMF.Models.Repository
  commentId: N:NMF.Models.Repository
  name: NMF.Models.Repository
  nameWithType: NMF.Models.Repository
  fullName: NMF.Models.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Models.Repository.IModelRepository
  commentId: T:NMF.Models.Repository.IModelRepository
  parent: NMF.Models.Repository
  name: IModelRepository
  nameWithType: IModelRepository
  fullName: NMF.Models.Repository.IModelRepository
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Repository.IModelRepository.BubbledChange
  commentId: E:NMF.Models.Repository.IModelRepository.BubbledChange
  parent: NMF.Models.Repository.IModelRepository
  name: BubbledChange
  nameWithType: IModelRepository.BubbledChange
  fullName: NMF.Models.Repository.IModelRepository.BubbledChange
- uid: System.EventHandler{NMF.Models.BubbledChangeEventArgs}
  commentId: T:System.EventHandler{NMF.Models.BubbledChangeEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<BubbledChangeEventArgs>
  nameWithType: EventHandler<BubbledChangeEventArgs>
  fullName: System.EventHandler<NMF.Models.BubbledChangeEventArgs>
  nameWithType.vb: EventHandler(Of BubbledChangeEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Models.BubbledChangeEventArgs)
  name.vb: EventHandler(Of BubbledChangeEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.BubbledChangeEventArgs
    name: BubbledChangeEventArgs
    nameWithType: BubbledChangeEventArgs
    fullName: NMF.Models.BubbledChangeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.BubbledChangeEventArgs
    name: BubbledChangeEventArgs
    nameWithType: BubbledChangeEventArgs
    fullName: NMF.Models.BubbledChangeEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Repository.MetaRepository.Instance*
  commentId: Overload:NMF.Models.Repository.MetaRepository.Instance
  name: Instance
  nameWithType: MetaRepository.Instance
  fullName: NMF.Models.Repository.MetaRepository.Instance
- uid: NMF.Models.Repository.MetaRepository
  commentId: T:NMF.Models.Repository.MetaRepository
  parent: NMF.Models.Repository
  name: MetaRepository
  nameWithType: MetaRepository
  fullName: NMF.Models.Repository.MetaRepository
- uid: NMF.Models.Repository.MetaRepository.Serializer*
  commentId: Overload:NMF.Models.Repository.MetaRepository.Serializer
  name: Serializer
  nameWithType: MetaRepository.Serializer
  fullName: NMF.Models.Repository.MetaRepository.Serializer
- uid: NMF.Models.Repository.Serialization.ModelSerializer
  commentId: T:NMF.Models.Repository.Serialization.ModelSerializer
  parent: NMF.Models.Repository.Serialization
  name: ModelSerializer
  nameWithType: ModelSerializer
  fullName: NMF.Models.Repository.Serialization.ModelSerializer
- uid: NMF.Models.Repository.Serialization
  commentId: N:NMF.Models.Repository.Serialization
  name: NMF.Models.Repository.Serialization
  nameWithType: NMF.Models.Repository.Serialization
  fullName: NMF.Models.Repository.Serialization
- uid: NMF.Models.Repository.MetaRepository.ResolveType*
  commentId: Overload:NMF.Models.Repository.MetaRepository.ResolveType
  name: ResolveType
  nameWithType: MetaRepository.ResolveType
  fullName: NMF.Models.Repository.MetaRepository.ResolveType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Models.Meta.IType
  commentId: T:NMF.Models.Meta.IType
  parent: NMF.Models.Meta
  name: IType
  nameWithType: IType
  fullName: NMF.Models.Meta.IType
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: NMF.Models.Repository.MetaRepository.ResolveClass*
  commentId: Overload:NMF.Models.Repository.MetaRepository.ResolveClass
  name: ResolveClass
  nameWithType: MetaRepository.ResolveClass
  fullName: NMF.Models.Repository.MetaRepository.ResolveClass
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Models.Repository.MetaRepository.Resolve*
  commentId: Overload:NMF.Models.Repository.MetaRepository.Resolve
  name: Resolve
  nameWithType: MetaRepository.Resolve
  fullName: NMF.Models.Repository.MetaRepository.Resolve
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#Resolve*
  commentId: Overload:NMF.Models.Repository.MetaRepository.NMF#Models#Repository#IModelRepository#Resolve
  name: IModelRepository.Resolve
  nameWithType: MetaRepository.IModelRepository.Resolve
  fullName: NMF.Models.Repository.MetaRepository.NMF.Models.Repository.IModelRepository.Resolve
  nameWithType.vb: MetaRepository.NMF.Models.Repository.IModelRepository.Resolve
  name.vb: NMF.Models.Repository.IModelRepository.Resolve
- uid: NMF.Models.Repository.IModelRepository.Resolve(System.Uri,System.Boolean)
  commentId: M:NMF.Models.Repository.IModelRepository.Resolve(System.Uri,System.Boolean)
  parent: NMF.Models.Repository.IModelRepository
  isExternal: true
  name: Resolve(Uri, Boolean)
  nameWithType: IModelRepository.Resolve(Uri, Boolean)
  fullName: NMF.Models.Repository.IModelRepository.Resolve(System.Uri, System.Boolean)
  spec.csharp:
  - uid: NMF.Models.Repository.IModelRepository.Resolve(System.Uri,System.Boolean)
    name: Resolve
    nameWithType: IModelRepository.Resolve
    fullName: NMF.Models.Repository.IModelRepository.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Repository.IModelRepository.Resolve(System.Uri,System.Boolean)
    name: Resolve
    nameWithType: IModelRepository.Resolve
    fullName: NMF.Models.Repository.IModelRepository.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Models.Repository.MetaRepository.Models*
  commentId: Overload:NMF.Models.Repository.MetaRepository.Models
  name: Models
  nameWithType: MetaRepository.Models
  fullName: NMF.Models.Repository.MetaRepository.Models
- uid: NMF.Models.Repository.IModelRepository.Models
  commentId: P:NMF.Models.Repository.IModelRepository.Models
  parent: NMF.Models.Repository.IModelRepository
  name: Models
  nameWithType: IModelRepository.Models
  fullName: NMF.Models.Repository.IModelRepository.Models
- uid: NMF.Models.Repository.ModelCollection
  commentId: T:NMF.Models.Repository.ModelCollection
  parent: NMF.Models.Repository
  name: ModelCollection
  nameWithType: ModelCollection
  fullName: NMF.Models.Repository.ModelCollection
