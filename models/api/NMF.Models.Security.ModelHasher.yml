### YamlMime:ManagedReference
items:
- uid: NMF.Models.Security.ModelHasher
  commentId: T:NMF.Models.Security.ModelHasher
  id: ModelHasher
  parent: NMF.Models.Security
  children:
  - NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement)
  - NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement,System.Security.Cryptography.HashAlgorithm)
  langs:
  - csharp
  - vb
  name: ModelHasher
  nameWithType: ModelHasher
  fullName: NMF.Models.Security.ModelHasher
  type: Class
  source:
    remote:
      path: Models/Models/Security/ModelHasher.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelHasher
    path: src/Models/Models/Security/ModelHasher.cs
    startLine: 11
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Security
  summary: "\nA class that computes model hashes\n"
  example: []
  syntax:
    content: public static class ModelHasher
    content.vb: Public Module ModelHasher
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement)
  id: CreateHash(NMF.Models.IModelElement)
  parent: NMF.Models.Security.ModelHasher
  langs:
  - csharp
  - vb
  name: CreateHash(IModelElement)
  nameWithType: ModelHasher.CreateHash(IModelElement)
  fullName: NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/Security/ModelHasher.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateHash
    path: src/Models/Models/Security/ModelHasher.cs
    startLine: 18
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Security
  summary: "\nCreates a SHA512 hash for the given model\n"
  example: []
  syntax:
    content: public static byte[] CreateHash(IModelElement modelElement)
    parameters:
    - id: modelElement
      type: NMF.Models.IModelElement
      description: The model element for which a hash should be provided
    return:
      type: System.Byte[]
      description: A hash code for the given model element
    content.vb: Public Shared Function CreateHash(modelElement As IModelElement) As Byte()
  overload: NMF.Models.Security.ModelHasher.CreateHash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement,System.Security.Cryptography.HashAlgorithm)
  commentId: M:NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement,System.Security.Cryptography.HashAlgorithm)
  id: CreateHash(NMF.Models.IModelElement,System.Security.Cryptography.HashAlgorithm)
  parent: NMF.Models.Security.ModelHasher
  langs:
  - csharp
  - vb
  name: CreateHash(IModelElement, HashAlgorithm)
  nameWithType: ModelHasher.CreateHash(IModelElement, HashAlgorithm)
  fullName: NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement, System.Security.Cryptography.HashAlgorithm)
  type: Method
  source:
    remote:
      path: Models/Models/Security/ModelHasher.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateHash
    path: src/Models/Models/Security/ModelHasher.cs
    startLine: 29
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Security
  summary: "\nCreates a hash for the given model\n"
  example: []
  syntax:
    content: public static byte[] CreateHash(IModelElement modelElement, HashAlgorithm hashAlgorithm)
    parameters:
    - id: modelElement
      type: NMF.Models.IModelElement
      description: The model element for which a hash should be provided
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithm
      description: Tha hashing algorithm that should be used or null to use the default SHA512
    return:
      type: System.Byte[]
      description: A hash code for the given model element
    content.vb: Public Shared Function CreateHash(modelElement As IModelElement, hashAlgorithm As HashAlgorithm) As Byte()
  overload: NMF.Models.Security.ModelHasher.CreateHash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Models.Security
  commentId: N:NMF.Models.Security
  name: NMF.Models.Security
  nameWithType: NMF.Models.Security
  fullName: NMF.Models.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Security.ModelHasher.CreateHash*
  commentId: Overload:NMF.Models.Security.ModelHasher.CreateHash
  name: CreateHash
  nameWithType: ModelHasher.CreateHash
  fullName: NMF.Models.Security.ModelHasher.CreateHash
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: System.Security.Cryptography.HashAlgorithm
  commentId: T:System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: true
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: true
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
