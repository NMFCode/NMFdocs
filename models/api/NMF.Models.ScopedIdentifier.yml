### YamlMime:ManagedReference
items:
- uid: NMF.Models.ScopedIdentifier
  commentId: T:NMF.Models.ScopedIdentifier
  id: ScopedIdentifier
  parent: NMF.Models
  children:
  - NMF.Models.ScopedIdentifier.#ctor(NMF.Models.Meta.IAttribute,NMF.Models.Meta.IdentifierScope)
  - NMF.Models.ScopedIdentifier.Equals(NMF.Models.ScopedIdentifier)
  - NMF.Models.ScopedIdentifier.Equals(System.Object)
  - NMF.Models.ScopedIdentifier.GetHashCode
  - NMF.Models.ScopedIdentifier.Identifier
  - NMF.Models.ScopedIdentifier.op_Equality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  - NMF.Models.ScopedIdentifier.op_Inequality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  - NMF.Models.ScopedIdentifier.OriginalScope
  - NMF.Models.ScopedIdentifier.Scope
  langs:
  - csharp
  - vb
  name: ScopedIdentifier
  nameWithType: ScopedIdentifier
  fullName: NMF.Models.ScopedIdentifier
  type: Struct
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ScopedIdentifier
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 8
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: 'public struct ScopedIdentifier : IEquatable<ScopedIdentifier>'
    content.vb: Public Structure ScopedIdentifier Implements IEquatable(Of ScopedIdentifier)
  implements:
  - System.IEquatable{NMF.Models.ScopedIdentifier}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NMF.Models.ScopedIdentifier.Identifier
  commentId: P:NMF.Models.ScopedIdentifier.Identifier
  id: Identifier
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: Identifier
  nameWithType: ScopedIdentifier.Identifier
  fullName: NMF.Models.ScopedIdentifier.Identifier
  type: Property
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Identifier
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 10
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public readonly IAttribute Identifier { get; }
    parameters: []
    return:
      type: NMF.Models.Meta.IAttribute
    content.vb: Public Property Identifier As IAttribute
  overload: NMF.Models.ScopedIdentifier.Identifier*
- uid: NMF.Models.ScopedIdentifier.Scope
  commentId: P:NMF.Models.ScopedIdentifier.Scope
  id: Scope
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: ScopedIdentifier.Scope
  fullName: NMF.Models.ScopedIdentifier.Scope
  type: Property
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Scope
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 11
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public readonly IdentifierScope Scope { get; }
    parameters: []
    return:
      type: NMF.Models.Meta.IdentifierScope
    content.vb: Public Property Scope As IdentifierScope
  overload: NMF.Models.ScopedIdentifier.Scope*
- uid: NMF.Models.ScopedIdentifier.OriginalScope
  commentId: P:NMF.Models.ScopedIdentifier.OriginalScope
  id: OriginalScope
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: OriginalScope
  nameWithType: ScopedIdentifier.OriginalScope
  fullName: NMF.Models.ScopedIdentifier.OriginalScope
  type: Property
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OriginalScope
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 13
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public IdentifierScope OriginalScope { get; }
    parameters: []
    return:
      type: NMF.Models.Meta.IdentifierScope
    content.vb: Public ReadOnly Property OriginalScope As IdentifierScope
  overload: NMF.Models.ScopedIdentifier.OriginalScope*
- uid: NMF.Models.ScopedIdentifier.#ctor(NMF.Models.Meta.IAttribute,NMF.Models.Meta.IdentifierScope)
  commentId: M:NMF.Models.ScopedIdentifier.#ctor(NMF.Models.Meta.IAttribute,NMF.Models.Meta.IdentifierScope)
  id: '#ctor(NMF.Models.Meta.IAttribute,NMF.Models.Meta.IdentifierScope)'
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: ScopedIdentifier(IAttribute, IdentifierScope)
  nameWithType: ScopedIdentifier.ScopedIdentifier(IAttribute, IdentifierScope)
  fullName: NMF.Models.ScopedIdentifier.ScopedIdentifier(NMF.Models.Meta.IAttribute, NMF.Models.Meta.IdentifierScope)
  type: Constructor
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 21
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public ScopedIdentifier(IAttribute identifier, IdentifierScope scope)
    parameters:
    - id: identifier
      type: NMF.Models.Meta.IAttribute
    - id: scope
      type: NMF.Models.Meta.IdentifierScope
    content.vb: Public Sub New(identifier As IAttribute, scope As IdentifierScope)
  overload: NMF.Models.ScopedIdentifier.#ctor*
  nameWithType.vb: ScopedIdentifier.New(IAttribute, IdentifierScope)
  fullName.vb: NMF.Models.ScopedIdentifier.New(NMF.Models.Meta.IAttribute, NMF.Models.Meta.IdentifierScope)
  name.vb: New(IAttribute, IdentifierScope)
- uid: NMF.Models.ScopedIdentifier.Equals(System.Object)
  commentId: M:NMF.Models.ScopedIdentifier.Equals(System.Object)
  id: Equals(System.Object)
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: ScopedIdentifier.Equals(object)
  fullName: NMF.Models.ScopedIdentifier.Equals(object)
  type: Method
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 27
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NMF.Models.ScopedIdentifier.Equals*
  nameWithType.vb: ScopedIdentifier.Equals(Object)
  fullName.vb: NMF.Models.ScopedIdentifier.Equals(Object)
  name.vb: Equals(Object)
- uid: NMF.Models.ScopedIdentifier.op_Equality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  commentId: M:NMF.Models.ScopedIdentifier.op_Equality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  id: op_Equality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: operator ==(ScopedIdentifier, ScopedIdentifier)
  nameWithType: ScopedIdentifier.operator ==(ScopedIdentifier, ScopedIdentifier)
  fullName: NMF.Models.ScopedIdentifier.operator ==(NMF.Models.ScopedIdentifier, NMF.Models.ScopedIdentifier)
  type: Operator
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: op_Equality
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 39
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static bool operator ==(ScopedIdentifier obj1, ScopedIdentifier obj2)
    parameters:
    - id: obj1
      type: NMF.Models.ScopedIdentifier
    - id: obj2
      type: NMF.Models.ScopedIdentifier
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(obj1 As ScopedIdentifier, obj2 As ScopedIdentifier) As Boolean
  overload: NMF.Models.ScopedIdentifier.op_Equality*
  nameWithType.vb: ScopedIdentifier.=(ScopedIdentifier, ScopedIdentifier)
  fullName.vb: NMF.Models.ScopedIdentifier.=(NMF.Models.ScopedIdentifier, NMF.Models.ScopedIdentifier)
  name.vb: =(ScopedIdentifier, ScopedIdentifier)
- uid: NMF.Models.ScopedIdentifier.op_Inequality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  commentId: M:NMF.Models.ScopedIdentifier.op_Inequality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  id: op_Inequality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: operator !=(ScopedIdentifier, ScopedIdentifier)
  nameWithType: ScopedIdentifier.operator !=(ScopedIdentifier, ScopedIdentifier)
  fullName: NMF.Models.ScopedIdentifier.operator !=(NMF.Models.ScopedIdentifier, NMF.Models.ScopedIdentifier)
  type: Operator
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: op_Inequality
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 46
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static bool operator !=(ScopedIdentifier obj1, ScopedIdentifier obj2)
    parameters:
    - id: obj1
      type: NMF.Models.ScopedIdentifier
    - id: obj2
      type: NMF.Models.ScopedIdentifier
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(obj1 As ScopedIdentifier, obj2 As ScopedIdentifier) As Boolean
  overload: NMF.Models.ScopedIdentifier.op_Inequality*
  nameWithType.vb: ScopedIdentifier.<>(ScopedIdentifier, ScopedIdentifier)
  fullName.vb: NMF.Models.ScopedIdentifier.<>(NMF.Models.ScopedIdentifier, NMF.Models.ScopedIdentifier)
  name.vb: <>(ScopedIdentifier, ScopedIdentifier)
- uid: NMF.Models.ScopedIdentifier.GetHashCode
  commentId: M:NMF.Models.ScopedIdentifier.GetHashCode
  id: GetHashCode
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ScopedIdentifier.GetHashCode()
  fullName: NMF.Models.ScopedIdentifier.GetHashCode()
  type: Method
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetHashCode
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 51
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: NMF.Models.ScopedIdentifier.GetHashCode*
- uid: NMF.Models.ScopedIdentifier.Equals(NMF.Models.ScopedIdentifier)
  commentId: M:NMF.Models.ScopedIdentifier.Equals(NMF.Models.ScopedIdentifier)
  id: Equals(NMF.Models.ScopedIdentifier)
  parent: NMF.Models.ScopedIdentifier
  langs:
  - csharp
  - vb
  name: Equals(ScopedIdentifier)
  nameWithType: ScopedIdentifier.Equals(ScopedIdentifier)
  fullName: NMF.Models.ScopedIdentifier.Equals(NMF.Models.ScopedIdentifier)
  type: Method
  source:
    remote:
      path: Models/Models/ScopedIdentifier.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Models/Models/ScopedIdentifier.cs
    startLine: 58
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public bool Equals(ScopedIdentifier other)
    parameters:
    - id: other
      type: NMF.Models.ScopedIdentifier
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As ScopedIdentifier) As Boolean
  overload: NMF.Models.ScopedIdentifier.Equals*
  implements:
  - System.IEquatable{NMF.Models.ScopedIdentifier}.Equals(NMF.Models.ScopedIdentifier)
references:
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
- uid: System.IEquatable{NMF.Models.ScopedIdentifier}
  commentId: T:System.IEquatable{NMF.Models.ScopedIdentifier}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ScopedIdentifier>
  nameWithType: IEquatable<ScopedIdentifier>
  fullName: System.IEquatable<NMF.Models.ScopedIdentifier>
  nameWithType.vb: IEquatable(Of ScopedIdentifier)
  fullName.vb: System.IEquatable(Of NMF.Models.ScopedIdentifier)
  name.vb: IEquatable(Of ScopedIdentifier)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - uid: NMF.Models.ScopedIdentifier
    name: ScopedIdentifier
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.ScopedIdentifier
    name: ScopedIdentifier
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Models.ScopedIdentifier.Identifier*
  commentId: Overload:NMF.Models.ScopedIdentifier.Identifier
  name: Identifier
  nameWithType: ScopedIdentifier.Identifier
  fullName: NMF.Models.ScopedIdentifier.Identifier
- uid: NMF.Models.Meta.IAttribute
  commentId: T:NMF.Models.Meta.IAttribute
  parent: NMF.Models.Meta
  name: IAttribute
  nameWithType: IAttribute
  fullName: NMF.Models.Meta.IAttribute
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
- uid: NMF.Models.ScopedIdentifier.Scope*
  commentId: Overload:NMF.Models.ScopedIdentifier.Scope
  name: Scope
  nameWithType: ScopedIdentifier.Scope
  fullName: NMF.Models.ScopedIdentifier.Scope
- uid: NMF.Models.Meta.IdentifierScope
  commentId: T:NMF.Models.Meta.IdentifierScope
  parent: NMF.Models.Meta
  name: IdentifierScope
  nameWithType: IdentifierScope
  fullName: NMF.Models.Meta.IdentifierScope
- uid: NMF.Models.ScopedIdentifier.OriginalScope*
  commentId: Overload:NMF.Models.ScopedIdentifier.OriginalScope
  name: OriginalScope
  nameWithType: ScopedIdentifier.OriginalScope
  fullName: NMF.Models.ScopedIdentifier.OriginalScope
- uid: NMF.Models.ScopedIdentifier.#ctor*
  commentId: Overload:NMF.Models.ScopedIdentifier.#ctor
  name: ScopedIdentifier
  nameWithType: ScopedIdentifier.ScopedIdentifier
  fullName: NMF.Models.ScopedIdentifier.ScopedIdentifier
  nameWithType.vb: ScopedIdentifier.New
  fullName.vb: NMF.Models.ScopedIdentifier.New
  name.vb: New
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Models.ScopedIdentifier.Equals*
  commentId: Overload:NMF.Models.ScopedIdentifier.Equals
  name: Equals
  nameWithType: ScopedIdentifier.Equals
  fullName: NMF.Models.ScopedIdentifier.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Models.ScopedIdentifier.op_Equality*
  commentId: Overload:NMF.Models.ScopedIdentifier.op_Equality
  name: operator ==
  nameWithType: ScopedIdentifier.operator ==
  fullName: NMF.Models.ScopedIdentifier.operator ==
  nameWithType.vb: ScopedIdentifier.=
  fullName.vb: NMF.Models.ScopedIdentifier.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NMF.Models.ScopedIdentifier.op_Equality*
    name: ==
- uid: NMF.Models.ScopedIdentifier
  commentId: T:NMF.Models.ScopedIdentifier
  parent: NMF.Models
  name: ScopedIdentifier
  nameWithType: ScopedIdentifier
  fullName: NMF.Models.ScopedIdentifier
- uid: NMF.Models.ScopedIdentifier.op_Inequality*
  commentId: Overload:NMF.Models.ScopedIdentifier.op_Inequality
  name: operator !=
  nameWithType: ScopedIdentifier.operator !=
  fullName: NMF.Models.ScopedIdentifier.operator !=
  nameWithType.vb: ScopedIdentifier.<>
  fullName.vb: NMF.Models.ScopedIdentifier.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NMF.Models.ScopedIdentifier.op_Inequality*
    name: '!='
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Models.ScopedIdentifier.GetHashCode*
  commentId: Overload:NMF.Models.ScopedIdentifier.GetHashCode
  name: GetHashCode
  nameWithType: ScopedIdentifier.GetHashCode
  fullName: NMF.Models.ScopedIdentifier.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.IEquatable{NMF.Models.ScopedIdentifier}.Equals(NMF.Models.ScopedIdentifier)
  commentId: M:System.IEquatable{NMF.Models.ScopedIdentifier}.Equals(NMF.Models.ScopedIdentifier)
  parent: System.IEquatable{NMF.Models.ScopedIdentifier}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ScopedIdentifier)
  nameWithType: IEquatable<ScopedIdentifier>.Equals(ScopedIdentifier)
  fullName: System.IEquatable<NMF.Models.ScopedIdentifier>.Equals(NMF.Models.ScopedIdentifier)
  nameWithType.vb: IEquatable(Of ScopedIdentifier).Equals(ScopedIdentifier)
  fullName.vb: System.IEquatable(Of NMF.Models.ScopedIdentifier).Equals(NMF.Models.ScopedIdentifier)
  spec.csharp:
  - uid: System.IEquatable{NMF.Models.ScopedIdentifier}.Equals(NMF.Models.ScopedIdentifier)
    name: Equals
    isExternal: true
  - name: (
  - uid: NMF.Models.ScopedIdentifier
    name: ScopedIdentifier
  - name: )
  spec.vb:
  - uid: System.IEquatable{NMF.Models.ScopedIdentifier}.Equals(NMF.Models.ScopedIdentifier)
    name: Equals
    isExternal: true
  - name: (
  - uid: NMF.Models.ScopedIdentifier
    name: ScopedIdentifier
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
