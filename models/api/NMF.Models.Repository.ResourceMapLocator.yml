### YamlMime:ManagedReference
items:
- uid: NMF.Models.Repository.ResourceMapLocator
  commentId: T:NMF.Models.Repository.ResourceMapLocator
  id: ResourceMapLocator
  parent: NMF.Models.Repository
  children:
  - NMF.Models.Repository.ResourceMapLocator.#ctor(System.Reflection.Assembly)
  - NMF.Models.Repository.ResourceMapLocator.Assembly
  - NMF.Models.Repository.ResourceMapLocator.Open(System.Uri)
  langs:
  - csharp
  - vb
  name: ResourceMapLocator
  nameWithType: ResourceMapLocator
  fullName: NMF.Models.Repository.ResourceMapLocator
  type: Class
  source:
    remote:
      path: Models/Models/Repository/ResourceMapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResourceMapLocator
    path: src/Models/Models/Repository/ResourceMapLocator.cs
    startLine: 9
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: 'public class ResourceMapLocator : MapLocator, IModelLocator'
    content.vb: >-
      Public Class ResourceMapLocator
          Inherits MapLocator
          Implements IModelLocator
  inheritance:
  - System.Object
  - NMF.Models.Repository.MapLocator
  implements:
  - NMF.Models.Repository.IModelLocator
  inheritedMembers:
  - NMF.Models.Repository.MapLocator.Mappings
  - NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  - NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Models.Repository.ResourceMapLocator.Assembly
  commentId: P:NMF.Models.Repository.ResourceMapLocator.Assembly
  id: Assembly
  parent: NMF.Models.Repository.ResourceMapLocator
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: ResourceMapLocator.Assembly
  fullName: NMF.Models.Repository.ResourceMapLocator.Assembly
  type: Property
  source:
    remote:
      path: Models/Models/Repository/ResourceMapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Assembly
    path: src/Models/Models/Repository/ResourceMapLocator.cs
    startLine: 11
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public Assembly Assembly { get; }
    parameters: []
    return:
      type: System.Reflection.Assembly
    content.vb: Public ReadOnly Property Assembly As Assembly
  overload: NMF.Models.Repository.ResourceMapLocator.Assembly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.Repository.ResourceMapLocator.#ctor(System.Reflection.Assembly)
  commentId: M:NMF.Models.Repository.ResourceMapLocator.#ctor(System.Reflection.Assembly)
  id: '#ctor(System.Reflection.Assembly)'
  parent: NMF.Models.Repository.ResourceMapLocator
  langs:
  - csharp
  - vb
  name: ResourceMapLocator(Assembly)
  nameWithType: ResourceMapLocator.ResourceMapLocator(Assembly)
  fullName: NMF.Models.Repository.ResourceMapLocator.ResourceMapLocator(System.Reflection.Assembly)
  type: Constructor
  source:
    remote:
      path: Models/Models/Repository/ResourceMapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/Repository/ResourceMapLocator.cs
    startLine: 13
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public ResourceMapLocator(Assembly assembly)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
    content.vb: Public Sub New(assembly As Assembly)
  overload: NMF.Models.Repository.ResourceMapLocator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Repository.ResourceMapLocator.Open(System.Uri)
  commentId: M:NMF.Models.Repository.ResourceMapLocator.Open(System.Uri)
  id: Open(System.Uri)
  parent: NMF.Models.Repository.ResourceMapLocator
  langs:
  - csharp
  - vb
  name: Open(Uri)
  nameWithType: ResourceMapLocator.Open(Uri)
  fullName: NMF.Models.Repository.ResourceMapLocator.Open(System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/Repository/ResourceMapLocator.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Open
    path: src/Models/Models/Repository/ResourceMapLocator.cs
    startLine: 20
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Repository
  syntax:
    content: public override Stream Open(Uri repositoryId)
    parameters:
    - id: repositoryId
      type: System.Uri
    return:
      type: System.IO.Stream
    content.vb: Public Overrides Function Open(repositoryId As Uri) As Stream
  overridden: NMF.Models.Repository.MapLocator.Open(System.Uri)
  overload: NMF.Models.Repository.ResourceMapLocator.Open*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NMF.Models.Repository
  commentId: N:NMF.Models.Repository
  name: NMF.Models.Repository
  nameWithType: NMF.Models.Repository
  fullName: NMF.Models.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Models.Repository.MapLocator
  commentId: T:NMF.Models.Repository.MapLocator
  parent: NMF.Models.Repository
  name: MapLocator
  nameWithType: MapLocator
  fullName: NMF.Models.Repository.MapLocator
- uid: NMF.Models.Repository.IModelLocator
  commentId: T:NMF.Models.Repository.IModelLocator
  parent: NMF.Models.Repository
  name: IModelLocator
  nameWithType: IModelLocator
  fullName: NMF.Models.Repository.IModelLocator
- uid: NMF.Models.Repository.MapLocator.Mappings
  commentId: P:NMF.Models.Repository.MapLocator.Mappings
  parent: NMF.Models.Repository.MapLocator
  name: Mappings
  nameWithType: MapLocator.Mappings
  fullName: NMF.Models.Repository.MapLocator.Mappings
- uid: NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  commentId: M:NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  parent: NMF.Models.Repository.MapLocator
  isExternal: true
  name: CanLocate(Uri)
  nameWithType: MapLocator.CanLocate(Uri)
  fullName: NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
    name: CanLocate
    nameWithType: MapLocator.CanLocate
    fullName: NMF.Models.Repository.MapLocator.CanLocate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Repository.MapLocator.CanLocate(System.Uri)
    name: CanLocate
    nameWithType: MapLocator.CanLocate
    fullName: NMF.Models.Repository.MapLocator.CanLocate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  commentId: M:NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  parent: NMF.Models.Repository.MapLocator
  isExternal: true
  name: GetRepositoryUri(Uri)
  nameWithType: MapLocator.GetRepositoryUri(Uri)
  fullName: NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
    name: GetRepositoryUri
    nameWithType: MapLocator.GetRepositoryUri
    fullName: NMF.Models.Repository.MapLocator.GetRepositoryUri
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)
    name: GetRepositoryUri
    nameWithType: MapLocator.GetRepositoryUri
    fullName: NMF.Models.Repository.MapLocator.GetRepositoryUri
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Repository.ResourceMapLocator.Assembly*
  commentId: Overload:NMF.Models.Repository.ResourceMapLocator.Assembly
  name: Assembly
  nameWithType: ResourceMapLocator.Assembly
  fullName: NMF.Models.Repository.ResourceMapLocator.Assembly
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: NMF.Models.Repository.ResourceMapLocator.#ctor*
  commentId: Overload:NMF.Models.Repository.ResourceMapLocator.#ctor
  name: ResourceMapLocator
  nameWithType: ResourceMapLocator.ResourceMapLocator
  fullName: NMF.Models.Repository.ResourceMapLocator.ResourceMapLocator
- uid: NMF.Models.Repository.MapLocator.Open(System.Uri)
  commentId: M:NMF.Models.Repository.MapLocator.Open(System.Uri)
  parent: NMF.Models.Repository.MapLocator
  isExternal: true
  name: Open(Uri)
  nameWithType: MapLocator.Open(Uri)
  fullName: NMF.Models.Repository.MapLocator.Open(System.Uri)
  spec.csharp:
  - uid: NMF.Models.Repository.MapLocator.Open(System.Uri)
    name: Open
    nameWithType: MapLocator.Open
    fullName: NMF.Models.Repository.MapLocator.Open
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.Repository.MapLocator.Open(System.Uri)
    name: Open
    nameWithType: MapLocator.Open
    fullName: NMF.Models.Repository.MapLocator.Open
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Repository.ResourceMapLocator.Open*
  commentId: Overload:NMF.Models.Repository.ResourceMapLocator.Open
  name: Open
  nameWithType: ResourceMapLocator.Open
  fullName: NMF.Models.Repository.ResourceMapLocator.Open
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
