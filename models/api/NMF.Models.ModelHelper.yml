### YamlMime:ManagedReference
items:
- uid: NMF.Models.ModelHelper
  commentId: T:NMF.Models.ModelHelper
  id: ModelHelper
  parent: NMF.Models
  children:
  - NMF.Models.ModelHelper.CreatePath(System.String)
  - NMF.Models.ModelHelper.CreatePath(System.String,System.Int32)
  - NMF.Models.ModelHelper.IndexOfReference``1(System.Collections.Generic.IList{``0},NMF.Models.IModelElement)
  - NMF.Models.ModelHelper.Parse``1(System.String)
  - NMF.Models.ModelHelper.ParseSegment(System.String,System.String@,System.Int32@)
  - NMF.Models.ModelHelper.uriSegmentRegex
  langs:
  - csharp
  - vb
  name: ModelHelper
  nameWithType: ModelHelper
  fullName: NMF.Models.ModelHelper
  type: Class
  source:
    remote:
      path: Models/Models/ModelHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelHelper
    path: src/Models/Models/ModelHelper.cs
    startLine: 10
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static class ModelHelper
    content.vb: Public Module ModelHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Models.ModelHelper.CreatePath(System.String,System.Int32)
  commentId: M:NMF.Models.ModelHelper.CreatePath(System.String,System.Int32)
  id: CreatePath(System.String,System.Int32)
  parent: NMF.Models.ModelHelper
  langs:
  - csharp
  - vb
  name: CreatePath(String, Int32)
  nameWithType: ModelHelper.CreatePath(String, Int32)
  fullName: NMF.Models.ModelHelper.CreatePath(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/ModelHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreatePath
    path: src/Models/Models/ModelHelper.cs
    startLine: 18
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nCreates a Uri for an ordered reference where the child element has the given index\n"
  example: []
  syntax:
    content: public static string CreatePath(string reference, int index)
    parameters:
    - id: reference
      type: System.String
      description: The reference of the child element
    - id: index
      type: System.Int32
      description: The index inside the child element
    return:
      type: System.String
      description: A relative Uri for the reference with the given index
    content.vb: Public Shared Function CreatePath(reference As String, index As Integer) As String
  overload: NMF.Models.ModelHelper.CreatePath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelHelper.CreatePath(System.String)
  commentId: M:NMF.Models.ModelHelper.CreatePath(System.String)
  id: CreatePath(System.String)
  parent: NMF.Models.ModelHelper
  langs:
  - csharp
  - vb
  name: CreatePath(String)
  nameWithType: ModelHelper.CreatePath(String)
  fullName: NMF.Models.ModelHelper.CreatePath(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreatePath
    path: src/Models/Models/ModelHelper.cs
    startLine: 29
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nCreates a relative Uri for the given reference name\n"
  example: []
  syntax:
    content: public static string CreatePath(string reference)
    parameters:
    - id: reference
      type: System.String
      description: The name of the reference
    return:
      type: System.String
      description: A relative Uri for the given reference
    content.vb: Public Shared Function CreatePath(reference As String) As String
  overload: NMF.Models.ModelHelper.CreatePath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelHelper.IndexOfReference``1(System.Collections.Generic.IList{``0},NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelHelper.IndexOfReference``1(System.Collections.Generic.IList{``0},NMF.Models.IModelElement)
  id: IndexOfReference``1(System.Collections.Generic.IList{``0},NMF.Models.IModelElement)
  parent: NMF.Models.ModelHelper
  langs:
  - csharp
  - vb
  name: IndexOfReference<T>(IList<T>, IModelElement)
  nameWithType: ModelHelper.IndexOfReference<T>(IList<T>, IModelElement)
  fullName: NMF.Models.ModelHelper.IndexOfReference<T>(System.Collections.Generic.IList<T>, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IndexOfReference
    path: src/Models/Models/ModelHelper.cs
    startLine: 41
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the index of the given element inside the given reference or -1 if the element is not contained in the reference\n"
  example: []
  syntax:
    content: >-
      public static int IndexOfReference<T>(IList<T> reference, IModelElement element)

          where T : class, IModelElement
    parameters:
    - id: reference
      type: System.Collections.Generic.IList{{T}}
      description: The reference list
    - id: element
      type: NMF.Models.IModelElement
      description: The element that should be looked for
    typeParameters:
    - id: T
      description: The element type for the reference
    return:
      type: System.Int32
      description: The index of the element or -1, if the reference does not contain the given element
    content.vb: Public Shared Function IndexOfReference(Of T As {Class, IModelElement})(reference As IList(Of T), element As IModelElement) As Integer
  overload: NMF.Models.ModelHelper.IndexOfReference*
  nameWithType.vb: ModelHelper.IndexOfReference(Of T)(IList(Of T), IModelElement)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Models.ModelHelper.IndexOfReference(Of T)(System.Collections.Generic.IList(Of T), NMF.Models.IModelElement)
  name.vb: IndexOfReference(Of T)(IList(Of T), IModelElement)
- uid: NMF.Models.ModelHelper.uriSegmentRegex
  commentId: F:NMF.Models.ModelHelper.uriSegmentRegex
  id: uriSegmentRegex
  parent: NMF.Models.ModelHelper
  langs:
  - csharp
  - vb
  name: uriSegmentRegex
  nameWithType: ModelHelper.uriSegmentRegex
  fullName: NMF.Models.ModelHelper.uriSegmentRegex
  type: Field
  source:
    remote:
      path: Models/Models/ModelHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: uriSegmentRegex
    path: src/Models/Models/ModelHelper.cs
    startLine: 55
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static Regex uriSegmentRegex
    return:
      type: System.Text.RegularExpressions.Regex
    content.vb: Public Shared uriSegmentRegex As Regex
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelHelper.ParseSegment(System.String,System.String@,System.Int32@)
  commentId: M:NMF.Models.ModelHelper.ParseSegment(System.String,System.String@,System.Int32@)
  id: ParseSegment(System.String,System.String@,System.Int32@)
  parent: NMF.Models.ModelHelper
  langs:
  - csharp
  - vb
  name: ParseSegment(String, out String, out Int32)
  nameWithType: ModelHelper.ParseSegment(String, out String, out Int32)
  fullName: NMF.Models.ModelHelper.ParseSegment(System.String, out System.String, out System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/ModelHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ParseSegment
    path: src/Models/Models/ModelHelper.cs
    startLine: 63
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nParses the given relative Uri\n"
  example: []
  syntax:
    content: public static void ParseSegment(string segment, out string reference, out int index)
    parameters:
    - id: segment
      type: System.String
      description: the relative Uri
    - id: reference
      type: System.String
      description: The reference that corresponds to the Uri. This is never null.
    - id: index
      type: System.Int32
      description: The element index of the Uri or 0 if no index is given
    content.vb: Public Shared Sub ParseSegment(segment As String, ByRef reference As String, ByRef index As Integer)
  overload: NMF.Models.ModelHelper.ParseSegment*
  nameWithType.vb: ModelHelper.ParseSegment(String, ByRef String, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Models.ModelHelper.ParseSegment(System.String, ByRef System.String, ByRef System.Int32)
  name.vb: ParseSegment(String, ByRef String, ByRef Int32)
- uid: NMF.Models.ModelHelper.Parse``1(System.String)
  commentId: M:NMF.Models.ModelHelper.Parse``1(System.String)
  id: Parse``1(System.String)
  parent: NMF.Models.ModelHelper
  langs:
  - csharp
  - vb
  name: Parse<T>(String)
  nameWithType: ModelHelper.Parse<T>(String)
  fullName: NMF.Models.ModelHelper.Parse<T>(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelHelper.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Parse
    path: src/Models/Models/ModelHelper.cs
    startLine: 91
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static T Parse<T>(string text)
    parameters:
    - id: text
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Parse(Of T)(text As String) As T
  overload: NMF.Models.ModelHelper.Parse*
  nameWithType.vb: ModelHelper.Parse(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Models.ModelHelper.Parse(Of T)(System.String)
  name.vb: Parse(Of T)(String)
references:
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.ModelHelper.CreatePath*
  commentId: Overload:NMF.Models.ModelHelper.CreatePath
  name: CreatePath
  nameWithType: ModelHelper.CreatePath
  fullName: NMF.Models.ModelHelper.CreatePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Models.ModelHelper.IndexOfReference*
  commentId: Overload:NMF.Models.ModelHelper.IndexOfReference
  name: IndexOfReference
  nameWithType: ModelHelper.IndexOfReference
  fullName: NMF.Models.ModelHelper.IndexOfReference
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: NMF.Models.ModelHelper.ParseSegment*
  commentId: Overload:NMF.Models.ModelHelper.ParseSegment
  name: ParseSegment
  nameWithType: ModelHelper.ParseSegment
  fullName: NMF.Models.ModelHelper.ParseSegment
- uid: NMF.Models.ModelHelper.Parse*
  commentId: Overload:NMF.Models.ModelHelper.Parse
  name: Parse
  nameWithType: ModelHelper.Parse
  fullName: NMF.Models.ModelHelper.Parse
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
