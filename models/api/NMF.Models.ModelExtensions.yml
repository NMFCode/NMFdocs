### YamlMime:ManagedReference
items:
- uid: NMF.Models.ModelExtensions
  commentId: T:NMF.Models.ModelExtensions
  id: ModelExtensions
  parent: NMF.Models
  children:
  - NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  - NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  - NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  - NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.IO.Stream,System.Uri)
  - NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String)
  - NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String,System.Uri)
  langs:
  - csharp
  - vb
  name: ModelExtensions
  nameWithType: ModelExtensions
  fullName: NMF.Models.ModelExtensions
  type: Class
  source:
    remote:
      path: Models/Models/ModelExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelExtensions
    path: src/Models/Models/ModelExtensions.cs
    startLine: 11
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static class ModelExtensions
    content.vb: Public Module ModelExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  id: Descendants(NMF.Models.IModelElement)
  isExtensionMethod: true
  parent: NMF.Models.ModelExtensions
  langs:
  - csharp
  - vb
  name: Descendants(IModelElement)
  nameWithType: ModelExtensions.Descendants(IModelElement)
  fullName: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Descendants
    path: src/Models/Models/ModelExtensions.cs
    startLine: 13
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static IEnumerableExpression<IModelElement> Descendants(this IModelElement element)
    parameters:
    - id: element
      type: NMF.Models.IModelElement
    return:
      type: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Descendants(element As IModelElement) As IEnumerableExpression(Of IModelElement)
  overload: NMF.Models.ModelExtensions.Descendants*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  id: Ancestors(NMF.Models.IModelElement)
  isExtensionMethod: true
  parent: NMF.Models.ModelExtensions
  langs:
  - csharp
  - vb
  name: Ancestors(IModelElement)
  nameWithType: ModelExtensions.Ancestors(IModelElement)
  fullName: NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Ancestors
    path: src/Models/Models/ModelExtensions.cs
    startLine: 18
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static IEnumerableExpression<IModelElement> Ancestors(this IModelElement element)
    parameters:
    - id: element
      type: NMF.Models.IModelElement
    return:
      type: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ancestors(element As IModelElement) As IEnumerableExpression(Of IModelElement)
  overload: NMF.Models.ModelExtensions.Ancestors*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  id: AncestorTree(NMF.Models.IModelElement)
  isExtensionMethod: true
  parent: NMF.Models.ModelExtensions
  langs:
  - csharp
  - vb
  name: AncestorTree(IModelElement)
  nameWithType: ModelExtensions.AncestorTree(IModelElement)
  fullName: NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AncestorTree
    path: src/Models/Models/ModelExtensions.cs
    startLine: 23
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static IEnumerableExpression<ModelTreeItem> AncestorTree(this IModelElement element)
    parameters:
    - id: element
      type: NMF.Models.IModelElement
    return:
      type: NMF.Expressions.IEnumerableExpression{NMF.Models.ModelTreeItem}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AncestorTree(element As IModelElement) As IEnumerableExpression(Of ModelTreeItem)
  overload: NMF.Models.ModelExtensions.AncestorTree*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String)
  commentId: M:NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String)
  id: Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String)
  isExtensionMethod: true
  parent: NMF.Models.ModelExtensions
  langs:
  - csharp
  - vb
  name: Serialize(IModelSerializer, IModelElement, String)
  nameWithType: ModelExtensions.Serialize(IModelSerializer, IModelElement, String)
  fullName: NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer, NMF.Models.IModelElement, System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Serialize
    path: src/Models/Models/ModelExtensions.cs
    startLine: 28
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static void Serialize(this IModelSerializer serializer, IModelElement element, string path)
    parameters:
    - id: serializer
      type: NMF.Models.Repository.IModelSerializer
    - id: element
      type: NMF.Models.IModelElement
    - id: path
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Serialize(serializer As IModelSerializer, element As IModelElement, path As String)
  overload: NMF.Models.ModelExtensions.Serialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String,System.Uri)
  commentId: M:NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String,System.Uri)
  id: Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String,System.Uri)
  isExtensionMethod: true
  parent: NMF.Models.ModelExtensions
  langs:
  - csharp
  - vb
  name: Serialize(IModelSerializer, IModelElement, String, Uri)
  nameWithType: ModelExtensions.Serialize(IModelSerializer, IModelElement, String, Uri)
  fullName: NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer, NMF.Models.IModelElement, System.String, System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/ModelExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Serialize
    path: src/Models/Models/ModelExtensions.cs
    startLine: 46
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static void Serialize(this IModelSerializer serializer, IModelElement element, string path, Uri uri)
    parameters:
    - id: serializer
      type: NMF.Models.Repository.IModelSerializer
    - id: element
      type: NMF.Models.IModelElement
    - id: path
      type: System.String
    - id: uri
      type: System.Uri
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Serialize(serializer As IModelSerializer, element As IModelElement, path As String, uri As Uri)
  overload: NMF.Models.ModelExtensions.Serialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.IO.Stream,System.Uri)
  commentId: M:NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.IO.Stream,System.Uri)
  id: Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.IO.Stream,System.Uri)
  isExtensionMethod: true
  parent: NMF.Models.ModelExtensions
  langs:
  - csharp
  - vb
  name: Serialize(IModelSerializer, IModelElement, Stream, Uri)
  nameWithType: ModelExtensions.Serialize(IModelSerializer, IModelElement, Stream, Uri)
  fullName: NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer, NMF.Models.IModelElement, System.IO.Stream, System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/ModelExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Serialize
    path: src/Models/Models/ModelExtensions.cs
    startLine: 54
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static void Serialize(this IModelSerializer serializer, IModelElement element, Stream target, Uri uri)
    parameters:
    - id: serializer
      type: NMF.Models.Repository.IModelSerializer
    - id: element
      type: NMF.Models.IModelElement
    - id: target
      type: System.IO.Stream
    - id: uri
      type: System.Uri
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Serialize(serializer As IModelSerializer, element As IModelElement, target As Stream, uri As Uri)
  overload: NMF.Models.ModelExtensions.Serialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.ModelExtensions.Descendants*
  commentId: Overload:NMF.Models.ModelExtensions.Descendants
  name: Descendants
  nameWithType: ModelExtensions.Descendants
  fullName: NMF.Models.ModelExtensions.Descendants
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  commentId: T:NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<IModelElement>
  nameWithType: IEnumerableExpression<IModelElement>
  fullName: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerableExpression(Of IModelElement)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of NMF.Models.IModelElement)
  name.vb: IEnumerableExpression(Of IModelElement)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Models.ModelExtensions.Ancestors*
  commentId: Overload:NMF.Models.ModelExtensions.Ancestors
  name: Ancestors
  nameWithType: ModelExtensions.Ancestors
  fullName: NMF.Models.ModelExtensions.Ancestors
- uid: NMF.Models.ModelExtensions.AncestorTree*
  commentId: Overload:NMF.Models.ModelExtensions.AncestorTree
  name: AncestorTree
  nameWithType: ModelExtensions.AncestorTree
  fullName: NMF.Models.ModelExtensions.AncestorTree
- uid: NMF.Expressions.IEnumerableExpression{NMF.Models.ModelTreeItem}
  commentId: T:NMF.Expressions.IEnumerableExpression{NMF.Models.ModelTreeItem}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<ModelTreeItem>
  nameWithType: IEnumerableExpression<ModelTreeItem>
  fullName: NMF.Expressions.IEnumerableExpression<NMF.Models.ModelTreeItem>
  nameWithType.vb: IEnumerableExpression(Of ModelTreeItem)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of NMF.Models.ModelTreeItem)
  name.vb: IEnumerableExpression(Of ModelTreeItem)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.ModelTreeItem
    name: ModelTreeItem
    nameWithType: ModelTreeItem
    fullName: NMF.Models.ModelTreeItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.ModelTreeItem
    name: ModelTreeItem
    nameWithType: ModelTreeItem
    fullName: NMF.Models.ModelTreeItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelExtensions.Serialize*
  commentId: Overload:NMF.Models.ModelExtensions.Serialize
  name: Serialize
  nameWithType: ModelExtensions.Serialize
  fullName: NMF.Models.ModelExtensions.Serialize
- uid: NMF.Models.Repository.IModelSerializer
  commentId: T:NMF.Models.Repository.IModelSerializer
  parent: NMF.Models.Repository
  name: IModelSerializer
  nameWithType: IModelSerializer
  fullName: NMF.Models.Repository.IModelSerializer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Models.Repository
  commentId: N:NMF.Models.Repository
  name: NMF.Models.Repository
  nameWithType: NMF.Models.Repository
  fullName: NMF.Models.Repository
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
