### YamlMime:ManagedReference
items:
- uid: NMF.Models.Collections.AssociationOrderedSet`1
  commentId: T:NMF.Models.Collections.AssociationOrderedSet`1
  id: AssociationOrderedSet`1
  parent: NMF.Models.Collections
  children:
  - NMF.Models.Collections.AssociationOrderedSet`1.Add(`0)
  - NMF.Models.Collections.AssociationOrderedSet`1.Clear
  - NMF.Models.Collections.AssociationOrderedSet`1.Remove(`0,System.Int32)
  langs:
  - csharp
  - vb
  name: AssociationOrderedSet<T>
  nameWithType: AssociationOrderedSet<T>
  fullName: NMF.Models.Collections.AssociationOrderedSet<T>
  type: Class
  source:
    remote:
      path: Models/Models/Collections/AssociationOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AssociationOrderedSet
    path: src/Models/Models/Collections/AssociationOrderedSet.cs
    startLine: 14
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  summary: "\nDenotes an ordered set implementation to store associated elements\n"
  example: []
  syntax:
    content: 'public class AssociationOrderedSet<T> : OrderedSet<T>, IList, ICollection, IOrderedSet<T>, IList<T>, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : class, IModelElement'
    typeParameters:
    - id: T
      description: The type of elements
    content.vb: Public Class AssociationOrderedSet(Of T As {Class, IModelElement}) Inherits OrderedSet(Of T) Implements IList, ICollection, IOrderedSet(Of T), IList(Of T), ISet(Of T), ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  - NMF.Collections.Generic.DecoratedSet{{T}}
  - NMF.Collections.Generic.OrderedSet{{T}}
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - NMF.Collections.Generic.IOrderedSet{{T}}
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ISet{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - NMF.Collections.Generic.OrderedSet{{T}}.Remove({T})
  - NMF.Collections.Generic.OrderedSet{{T}}.GetEnumerator
  - NMF.Collections.Generic.OrderedSet{{T}}.IndexOf({T})
  - NMF.Collections.Generic.OrderedSet{{T}}.Insert(System.Int32,{T})
  - NMF.Collections.Generic.OrderedSet{{T}}.RemoveAt(System.Int32)
  - NMF.Collections.Generic.OrderedSet{{T}}.Item(System.Int32)
  - NMF.Collections.Generic.OrderedSet{{T}}.Replace(System.Int32,{T},{T})
  - NMF.Collections.Generic.OrderedSet{{T}}.AsReadOnly
  - NMF.Collections.Generic.DecoratedSet{{T}}.Items
  - NMF.Collections.Generic.DecoratedSet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.Contains({T})
  - NMF.Collections.Generic.DecoratedSet{{T}}.CopyTo({T}[],System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{T}}.Count
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: AssociationOrderedSet(Of T)
  fullName.vb: NMF.Models.Collections.AssociationOrderedSet(Of T)
  name.vb: AssociationOrderedSet(Of T)
- uid: NMF.Models.Collections.AssociationOrderedSet`1.Add(`0)
  commentId: M:NMF.Models.Collections.AssociationOrderedSet`1.Add(`0)
  id: Add(`0)
  parent: NMF.Models.Collections.AssociationOrderedSet`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: AssociationOrderedSet<T>.Add(T)
  fullName: NMF.Models.Collections.AssociationOrderedSet<T>.Add(T)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/AssociationOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Models/Models/Collections/AssociationOrderedSet.cs
    startLine: 17
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  example: []
  syntax:
    content: public override bool Add(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Add(item As T) As Boolean
  overridden: NMF.Collections.Generic.OrderedSet{{T}}.Add({T})
  overload: NMF.Models.Collections.AssociationOrderedSet`1.Add*
  nameWithType.vb: AssociationOrderedSet(Of T).Add(T)
  fullName.vb: NMF.Models.Collections.AssociationOrderedSet(Of T).Add(T)
- uid: NMF.Models.Collections.AssociationOrderedSet`1.Clear
  commentId: M:NMF.Models.Collections.AssociationOrderedSet`1.Clear
  id: Clear
  parent: NMF.Models.Collections.AssociationOrderedSet`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: AssociationOrderedSet<T>.Clear()
  fullName: NMF.Models.Collections.AssociationOrderedSet<T>.Clear()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/AssociationOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Models/Models/Collections/AssociationOrderedSet.cs
    startLine: 24
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  example: []
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear()
  overridden: NMF.Collections.Generic.OrderedSet{{T}}.Clear
  overload: NMF.Models.Collections.AssociationOrderedSet`1.Clear*
  nameWithType.vb: AssociationOrderedSet(Of T).Clear()
  fullName.vb: NMF.Models.Collections.AssociationOrderedSet(Of T).Clear()
- uid: NMF.Models.Collections.AssociationOrderedSet`1.Remove(`0,System.Int32)
  commentId: M:NMF.Models.Collections.AssociationOrderedSet`1.Remove(`0,System.Int32)
  id: Remove(`0,System.Int32)
  parent: NMF.Models.Collections.AssociationOrderedSet`1
  langs:
  - csharp
  - vb
  name: Remove(T, int)
  nameWithType: AssociationOrderedSet<T>.Remove(T, int)
  fullName: NMF.Models.Collections.AssociationOrderedSet<T>.Remove(T, int)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/AssociationOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Models/Models/Collections/AssociationOrderedSet.cs
    startLine: 37
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  example: []
  syntax:
    content: protected override bool Remove(T item, int index)
    parameters:
    - id: item
      type: '{T}'
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function Remove(item As T, index As Integer) As Boolean
  overridden: NMF.Collections.Generic.OrderedSet{{T}}.Remove({T},System.Int32)
  overload: NMF.Models.Collections.AssociationOrderedSet`1.Remove*
  nameWithType.vb: AssociationOrderedSet(Of T).Remove(T, Integer)
  fullName.vb: NMF.Models.Collections.AssociationOrderedSet(Of T).Remove(T, Integer)
  name.vb: Remove(T, Integer)
references:
- uid: NMF.Models.Collections
  commentId: N:NMF.Models.Collections
  name: NMF.Models.Collections
  nameWithType: NMF.Models.Collections
  fullName: NMF.Models.Collections
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Collections
    name: Collections
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Collections
    name: Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Collections.Generic.DecoratedSet{{T}}
  commentId: T:NMF.Collections.Generic.DecoratedSet{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<T>
  nameWithType: DecoratedSet<T>
  fullName: NMF.Collections.Generic.DecoratedSet<T>
  nameWithType.vb: DecoratedSet(Of T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T)
  name.vb: DecoratedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}
  commentId: T:NMF.Collections.Generic.OrderedSet{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.OrderedSet`1
  name: OrderedSet<T>
  nameWithType: OrderedSet<T>
  fullName: NMF.Collections.Generic.OrderedSet<T>
  nameWithType.vb: OrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T)
  name.vb: OrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: NMF.Collections.Generic.IOrderedSet{{T}}
  commentId: T:NMF.Collections.Generic.IOrderedSet{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.IOrderedSet`1
  name: IOrderedSet<T>
  nameWithType: IOrderedSet<T>
  fullName: NMF.Collections.Generic.IOrderedSet<T>
  nameWithType.vb: IOrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.IOrderedSet(Of T)
  name.vb: IOrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ISet{{T}}
  commentId: T:System.Collections.Generic.ISet{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Collections.Generic.OrderedSet{{T}}.Remove({T})
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.Remove(`0)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
  name: Remove(T)
  nameWithType: OrderedSet<T>.Remove(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Remove(T)
  nameWithType.vb: OrderedSet(Of T).Remove(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Remove(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.GetEnumerator
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.GetEnumerator
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: OrderedSet<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.OrderedSet<T>.GetEnumerator()
  nameWithType.vb: OrderedSet(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.IndexOf({T})
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.IndexOf(`0)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: OrderedSet<T>.IndexOf(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.IndexOf(T)
  nameWithType.vb: OrderedSet(Of T).IndexOf(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).IndexOf(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.IndexOf(`0)
    name: IndexOf
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.IndexOf(`0)
    name: IndexOf
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.Insert(System.Int32,{T})
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.Insert(System.Int32,`0)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.Insert(System.Int32,`0)
  name: Insert(int, T)
  nameWithType: OrderedSet<T>.Insert(int, T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Insert(int, T)
  nameWithType.vb: OrderedSet(Of T).Insert(Integer, T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Insert(Integer, T)
  name.vb: Insert(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Insert(System.Int32,`0)
    name: Insert
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Insert(System.Int32,`0)
    name: Insert
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.RemoveAt(System.Int32)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
  name: RemoveAt(int)
  nameWithType: OrderedSet<T>.RemoveAt(int)
  fullName: NMF.Collections.Generic.OrderedSet<T>.RemoveAt(int)
  nameWithType.vb: OrderedSet(Of T).RemoveAt(Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.Item(System.Int32)
  commentId: P:NMF.Collections.Generic.OrderedSet{`0}.Item(System.Int32)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
  name: this[int]
  nameWithType: OrderedSet<T>.this[int]
  fullName: NMF.Collections.Generic.OrderedSet<T>.this[int]
  nameWithType.vb: OrderedSet(Of T).this[](Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Item(System.Int32)
    name: this[]
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.Replace(System.Int32,{T},{T})
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.Replace(System.Int32,`0,`0)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.Replace(System.Int32,`0,`0)
  name: Replace(int, T, T)
  nameWithType: OrderedSet<T>.Replace(int, T, T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Replace(int, T, T)
  nameWithType.vb: OrderedSet(Of T).Replace(Integer, T, T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Replace(Integer, T, T)
  name.vb: Replace(Integer, T, T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Replace(System.Int32,`0,`0)
    name: Replace
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Replace(System.Int32,`0,`0)
    name: Replace
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.AsReadOnly
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.AsReadOnly
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: OrderedSet<T>.AsReadOnly()
  fullName: NMF.Collections.Generic.OrderedSet<T>.AsReadOnly()
  nameWithType.vb: OrderedSet(Of T).AsReadOnly()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).AsReadOnly()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.Items
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<T>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Items
  nameWithType.vb: DecoratedSet(Of T).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Items
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: ExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  name: IntersectWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  name: Overlaps(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.Overlaps(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  name: SetEquals(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SetEquals(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  name: UnionWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.UnionWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Contains({T})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.Contains(`0)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(T)
  nameWithType: DecoratedSet<T>.Contains(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains(T)
  nameWithType.vb: DecoratedSet(Of T).Contains(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.CopyTo(`0[],System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], int)
  nameWithType: DecoratedSet<T>.CopyTo(T[], int)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo(T[], int)
  nameWithType.vb: DecoratedSet(Of T).CopyTo(T(), Integer)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.Count
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<T>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Count
  nameWithType.vb: DecoratedSet(Of T).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Count
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Collections.Generic.DecoratedSet`1
  commentId: T:NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<T>
  nameWithType: DecoratedSet<T>
  fullName: NMF.Collections.Generic.DecoratedSet<T>
  nameWithType.vb: DecoratedSet(Of T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T)
  name.vb: DecoratedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
- uid: NMF.Collections.Generic.OrderedSet`1
  commentId: T:NMF.Collections.Generic.OrderedSet`1
  name: OrderedSet<T>
  nameWithType: OrderedSet<T>
  fullName: NMF.Collections.Generic.OrderedSet<T>
  nameWithType.vb: OrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T)
  name.vb: OrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: NMF.Collections.Generic.IOrderedSet`1
  commentId: T:NMF.Collections.Generic.IOrderedSet`1
  name: IOrderedSet<T>
  nameWithType: IOrderedSet<T>
  fullName: NMF.Collections.Generic.IOrderedSet<T>
  nameWithType.vb: IOrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.IOrderedSet(Of T)
  name.vb: IOrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.Remove(`0)
  name: Remove(T)
  nameWithType: OrderedSet<T>.Remove(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Remove(T)
  nameWithType.vb: OrderedSet(Of T).Remove(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Remove(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
  commentId: M:NMF.Collections.Generic.OrderedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: OrderedSet<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.OrderedSet<T>.GetEnumerator()
  nameWithType.vb: OrderedSet(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: OrderedSet<T>.IndexOf(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.IndexOf(T)
  nameWithType.vb: OrderedSet(Of T).IndexOf(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).IndexOf(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
    name: IndexOf
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
    name: IndexOf
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.Insert(System.Int32,`0)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(int, T)
  nameWithType: OrderedSet<T>.Insert(int, T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Insert(int, T)
  nameWithType.vb: OrderedSet(Of T).Insert(Integer, T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Insert(Integer, T)
  name.vb: Insert(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.Insert(System.Int32,`0)
    name: Insert
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Insert(System.Int32,`0)
    name: Insert
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(int)
  nameWithType: OrderedSet<T>.RemoveAt(int)
  fullName: NMF.Collections.Generic.OrderedSet<T>.RemoveAt(int)
  nameWithType.vb: OrderedSet(Of T).RemoveAt(Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
  commentId: P:NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
  isExternal: true
  name: this[int]
  nameWithType: OrderedSet<T>.this[int]
  fullName: NMF.Collections.Generic.OrderedSet<T>.this[int]
  nameWithType.vb: OrderedSet(Of T).this[](Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
    name: this[]
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.Replace(System.Int32,`0,`0)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.Replace(System.Int32,`0,`0)
  isExternal: true
  name: Replace(int, T, T)
  nameWithType: OrderedSet<T>.Replace(int, T, T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Replace(int, T, T)
  nameWithType.vb: OrderedSet(Of T).Replace(Integer, T, T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Replace(Integer, T, T)
  name.vb: Replace(Integer, T, T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.Replace(System.Int32,`0,`0)
    name: Replace
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Replace(System.Int32,`0,`0)
    name: Replace
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
  commentId: M:NMF.Collections.Generic.OrderedSet`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: OrderedSet<T>.AsReadOnly()
  fullName: NMF.Collections.Generic.OrderedSet<T>.AsReadOnly()
  nameWithType.vb: OrderedSet(Of T).AsReadOnly()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).AsReadOnly()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<T>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Items
  nameWithType.vb: DecoratedSet(Of T).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Items
- uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: ExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IntersectWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Overlaps(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.Overlaps(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SetEquals(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SetEquals(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: UnionWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.UnionWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(T)
  nameWithType: DecoratedSet<T>.Contains(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains(T)
  nameWithType.vb: DecoratedSet(Of T).Contains(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], int)
  nameWithType: DecoratedSet<T>.CopyTo(T[], int)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo(T[], int)
  nameWithType.vb: DecoratedSet(Of T).CopyTo(T(), Integer)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<T>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Count
  nameWithType.vb: DecoratedSet(Of T).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Count
- uid: NMF.Collections.Generic.OrderedSet{{T}}.Add({T})
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.Add(`0)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.Add(`0)
  name: Add(T)
  nameWithType: OrderedSet<T>.Add(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Add(T)
  nameWithType.vb: OrderedSet(Of T).Add(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Add(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
- uid: NMF.Models.Collections.AssociationOrderedSet`1.Add*
  commentId: Overload:NMF.Models.Collections.AssociationOrderedSet`1.Add
  name: Add
  nameWithType: AssociationOrderedSet<T>.Add
  fullName: NMF.Models.Collections.AssociationOrderedSet<T>.Add
  nameWithType.vb: AssociationOrderedSet(Of T).Add
  fullName.vb: NMF.Models.Collections.AssociationOrderedSet(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Collections.Generic.OrderedSet`1.Add(`0)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.Add(`0)
  name: Add(T)
  nameWithType: OrderedSet<T>.Add(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Add(T)
  nameWithType.vb: OrderedSet(Of T).Add(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Add(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.OrderedSet{{T}}.Clear
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.Clear
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.Clear
  name: Clear()
  nameWithType: OrderedSet<T>.Clear()
  fullName: NMF.Collections.Generic.OrderedSet<T>.Clear()
  nameWithType.vb: OrderedSet(Of T).Clear()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Clear
    name: Clear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Clear
    name: Clear
  - name: (
  - name: )
- uid: NMF.Models.Collections.AssociationOrderedSet`1.Clear*
  commentId: Overload:NMF.Models.Collections.AssociationOrderedSet`1.Clear
  name: Clear
  nameWithType: AssociationOrderedSet<T>.Clear
  fullName: NMF.Models.Collections.AssociationOrderedSet<T>.Clear
  nameWithType.vb: AssociationOrderedSet(Of T).Clear
  fullName.vb: NMF.Models.Collections.AssociationOrderedSet(Of T).Clear
- uid: NMF.Collections.Generic.OrderedSet`1.Clear
  commentId: M:NMF.Collections.Generic.OrderedSet`1.Clear
  name: Clear()
  nameWithType: OrderedSet<T>.Clear()
  fullName: NMF.Collections.Generic.OrderedSet<T>.Clear()
  nameWithType.vb: OrderedSet(Of T).Clear()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.Clear
    name: Clear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Clear
    name: Clear
  - name: (
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{T}}.Remove({T},System.Int32)
  commentId: M:NMF.Collections.Generic.OrderedSet{`0}.Remove(`0,System.Int32)
  parent: NMF.Collections.Generic.OrderedSet{{T}}
  definition: NMF.Collections.Generic.OrderedSet`1.Remove(`0,System.Int32)
  name: Remove(T, int)
  nameWithType: OrderedSet<T>.Remove(T, int)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Remove(T, int)
  nameWithType.vb: OrderedSet(Of T).Remove(T, Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Remove(T, Integer)
  name.vb: Remove(T, Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Remove(`0,System.Int32)
    name: Remove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`0}.Remove(`0,System.Int32)
    name: Remove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.Collections.AssociationOrderedSet`1.Remove*
  commentId: Overload:NMF.Models.Collections.AssociationOrderedSet`1.Remove
  name: Remove
  nameWithType: AssociationOrderedSet<T>.Remove
  fullName: NMF.Models.Collections.AssociationOrderedSet<T>.Remove
  nameWithType.vb: AssociationOrderedSet(Of T).Remove
  fullName.vb: NMF.Models.Collections.AssociationOrderedSet(Of T).Remove
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0,System.Int32)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.Remove(`0,System.Int32)
  isExternal: true
  name: Remove(T, int)
  nameWithType: OrderedSet<T>.Remove(T, int)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Remove(T, int)
  nameWithType.vb: OrderedSet(Of T).Remove(T, Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Remove(T, Integer)
  name.vb: Remove(T, Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0,System.Int32)
    name: Remove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0,System.Int32)
    name: Remove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
