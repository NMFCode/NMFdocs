### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.ReferenceTypeReferencesCollection
  commentId: T:NMF.Models.Meta.ReferenceTypeReferencesCollection
  id: ReferenceTypeReferencesCollection
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.ReferenceTypeReferencesCollection.#ctor(NMF.Models.Meta.IReferenceType)
  - NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  langs:
  - csharp
  - vb
  name: ReferenceTypeReferencesCollection
  nameWithType: ReferenceTypeReferencesCollection
  fullName: NMF.Models.Meta.ReferenceTypeReferencesCollection
  type: Class
  source:
    remote:
      path: Models/Models/Meta/ReferenceTypeReferencesCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReferenceTypeReferencesCollection
    path: src/Models/Models/Meta/ReferenceTypeReferencesCollection.cs
    startLine: 34
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: 'public class ReferenceTypeReferencesCollection : ObservableOppositeList<IReferenceType, IReference>, IReadOnlyList<IReference>, IReadOnlyCollection<IReference>, IList, ICollection, INotifyCollectionChanging, INotifyPropertyChanged, INotifyCollectionChanged, IListExpression<IReference>, IList<IReference>, ICollectionExpression<IReference>, IEnumerableExpression<IReference>, IEnumerableExpression, ICollection<IReference>, IEnumerable<IReference>, IEnumerable'
    content.vb: Public Class ReferenceTypeReferencesCollection Inherits ObservableOppositeList(Of IReferenceType, IReference) Implements IReadOnlyList(Of IReference), IReadOnlyCollection(Of IReference), IList, ICollection, INotifyCollectionChanging, INotifyPropertyChanged, INotifyCollectionChanged, IListExpression(Of IReference), IList(Of IReference), ICollectionExpression(Of IReference), IEnumerableExpression(Of IReference), IEnumerableExpression, ICollection(Of IReference), IEnumerable(Of IReference), IEnumerable
  inheritance:
  - System.Object
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  - NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  implements:
  - System.Collections.Generic.IReadOnlyList{NMF.Models.Meta.IReference}
  - System.Collections.Generic.IReadOnlyCollection{NMF.Models.Meta.IReference}
  - System.Collections.IList
  - System.Collections.ICollection
  - NMF.Collections.ObjectModel.INotifyCollectionChanging
  - System.ComponentModel.INotifyPropertyChanged
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Expressions.IListExpression{NMF.Models.Meta.IReference}
  - System.Collections.Generic.IList{NMF.Models.Meta.IReference}
  - NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IReference}
  - NMF.Expressions.IEnumerableExpression{NMF.Models.Meta.IReference}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.Generic.ICollection{NMF.Models.Meta.IReference}
  - System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}
  - System.Collections.IEnumerable
  inheritedMembers:
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.Parent
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ClearItems
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
  - NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ToString
  - NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.AsNotifiable
  - NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.ToString
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.CollectionChanging
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.CollectionChanged
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.PropertyChanged
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RequireEvents
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.ClearItems
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.MoveItem(System.Int32,System.Int32)
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Add(NMF.Models.Meta.IReference)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Clear
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Contains(NMF.Models.Meta.IReference)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.CopyTo(NMF.Models.Meta.IReference[],System.Int32)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.GetEnumerator
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.IndexOf(NMF.Models.Meta.IReference)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Insert(System.Int32,NMF.Models.Meta.IReference)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Remove(NMF.Models.Meta.IReference)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.RemoveAt(System.Int32)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Count
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Item(System.Int32)
  - System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Items
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NMF.Models.Meta.ReferenceTypeReferencesCollection.#ctor(NMF.Models.Meta.IReferenceType)
  commentId: M:NMF.Models.Meta.ReferenceTypeReferencesCollection.#ctor(NMF.Models.Meta.IReferenceType)
  id: '#ctor(NMF.Models.Meta.IReferenceType)'
  parent: NMF.Models.Meta.ReferenceTypeReferencesCollection
  langs:
  - csharp
  - vb
  name: ReferenceTypeReferencesCollection(IReferenceType)
  nameWithType: ReferenceTypeReferencesCollection.ReferenceTypeReferencesCollection(IReferenceType)
  fullName: NMF.Models.Meta.ReferenceTypeReferencesCollection.ReferenceTypeReferencesCollection(NMF.Models.Meta.IReferenceType)
  type: Constructor
  source:
    remote:
      path: Models/Models/Meta/ReferenceTypeReferencesCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Models/Meta/ReferenceTypeReferencesCollection.cs
    startLine: 37
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public ReferenceTypeReferencesCollection(IReferenceType parent)
    parameters:
    - id: parent
      type: NMF.Models.Meta.IReferenceType
    content.vb: Public Sub New(parent As IReferenceType)
  overload: NMF.Models.Meta.ReferenceTypeReferencesCollection.#ctor*
  nameWithType.vb: ReferenceTypeReferencesCollection.New(IReferenceType)
  fullName.vb: NMF.Models.Meta.ReferenceTypeReferencesCollection.New(NMF.Models.Meta.IReferenceType)
  name.vb: New(IReferenceType)
- uid: NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  commentId: M:NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  id: SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  parent: NMF.Models.Meta.ReferenceTypeReferencesCollection
  langs:
  - csharp
  - vb
  name: SetOpposite(IReference, IReferenceType)
  nameWithType: ReferenceTypeReferencesCollection.SetOpposite(IReference, IReferenceType)
  fullName: NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite(NMF.Models.Meta.IReference, NMF.Models.Meta.IReferenceType)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ReferenceTypeReferencesCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetOpposite
    path: src/Models/Models/Meta/ReferenceTypeReferencesCollection.cs
    startLine: 50
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: protected override void SetOpposite(IReference item, IReferenceType parent)
    parameters:
    - id: item
      type: NMF.Models.Meta.IReference
    - id: parent
      type: NMF.Models.Meta.IReferenceType
    content.vb: Protected Overrides Sub SetOpposite(item As IReference, parent As IReferenceType)
  overridden: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  overload: NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite*
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  commentId: T:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<IReference>
  nameWithType: Collection<IReference>
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>
  nameWithType.vb: Collection(Of IReference)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference)
  name.vb: Collection(Of IReference)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  commentId: T:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  parent: NMF.Collections.ObjectModel
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
  name: ObservableCollectionExtended<IReference>
  nameWithType: ObservableCollectionExtended<IReference>
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>
  nameWithType.vb: ObservableCollectionExtended(Of IReference)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference)
  name.vb: ObservableCollectionExtended(Of IReference)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}
  commentId: T:NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}
  parent: NMF.Collections.ObjectModel
  definition: NMF.Collections.ObjectModel.ObservableList`1
  name: ObservableList<IReference>
  nameWithType: ObservableList<IReference>
  fullName: NMF.Collections.ObjectModel.ObservableList<NMF.Models.Meta.IReference>
  nameWithType.vb: ObservableList(Of IReference)
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of NMF.Models.Meta.IReference)
  name.vb: ObservableList(Of IReference)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  commentId: T:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  parent: NMF.Collections.ObjectModel
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2
  name: ObservableOppositeList<IReferenceType, IReference>
  nameWithType: ObservableOppositeList<IReferenceType, IReference>
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference)
  name.vb: ObservableOppositeList(Of IReferenceType, IReference)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2
    name: ObservableOppositeList
  - name: <
  - uid: NMF.Models.Meta.IReferenceType
    name: IReferenceType
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2
    name: ObservableOppositeList
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReferenceType
    name: IReferenceType
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.Generic.IReadOnlyList{NMF.Models.Meta.IReference}
  commentId: T:System.Collections.Generic.IReadOnlyList{NMF.Models.Meta.IReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IReference>
  nameWithType: IReadOnlyList<IReference>
  fullName: System.Collections.Generic.IReadOnlyList<NMF.Models.Meta.IReference>
  nameWithType.vb: IReadOnlyList(Of IReference)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of NMF.Models.Meta.IReference)
  name.vb: IReadOnlyList(Of IReference)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.Generic.IReadOnlyCollection{NMF.Models.Meta.IReference}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{NMF.Models.Meta.IReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IReference>
  nameWithType: IReadOnlyCollection<IReference>
  fullName: System.Collections.Generic.IReadOnlyCollection<NMF.Models.Meta.IReference>
  nameWithType.vb: IReadOnlyCollection(Of IReference)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of NMF.Models.Meta.IReference)
  name.vb: IReadOnlyCollection(Of IReference)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: NMF.Collections.ObjectModel.INotifyCollectionChanging
  commentId: T:NMF.Collections.ObjectModel.INotifyCollectionChanging
  parent: NMF.Collections.ObjectModel
  name: INotifyCollectionChanging
  nameWithType: INotifyCollectionChanging
  fullName: NMF.Collections.ObjectModel.INotifyCollectionChanging
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Expressions.IListExpression{NMF.Models.Meta.IReference}
  commentId: T:NMF.Expressions.IListExpression{NMF.Models.Meta.IReference}
  parent: NMF.Expressions
  definition: NMF.Expressions.IListExpression`1
  name: IListExpression<IReference>
  nameWithType: IListExpression<IReference>
  fullName: NMF.Expressions.IListExpression<NMF.Models.Meta.IReference>
  nameWithType.vb: IListExpression(Of IReference)
  fullName.vb: NMF.Expressions.IListExpression(Of NMF.Models.Meta.IReference)
  name.vb: IListExpression(Of IReference)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.Generic.IList{NMF.Models.Meta.IReference}
  commentId: T:System.Collections.Generic.IList{NMF.Models.Meta.IReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IReference>
  nameWithType: IList<IReference>
  fullName: System.Collections.Generic.IList<NMF.Models.Meta.IReference>
  nameWithType.vb: IList(Of IReference)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Models.Meta.IReference)
  name.vb: IList(Of IReference)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IReference}
  commentId: T:NMF.Expressions.ICollectionExpression{NMF.Models.Meta.IReference}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<IReference>
  nameWithType: ICollectionExpression<IReference>
  fullName: NMF.Expressions.ICollectionExpression<NMF.Models.Meta.IReference>
  nameWithType.vb: ICollectionExpression(Of IReference)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of NMF.Models.Meta.IReference)
  name.vb: ICollectionExpression(Of IReference)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Expressions.IEnumerableExpression{NMF.Models.Meta.IReference}
  commentId: T:NMF.Expressions.IEnumerableExpression{NMF.Models.Meta.IReference}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<IReference>
  nameWithType: IEnumerableExpression<IReference>
  fullName: NMF.Expressions.IEnumerableExpression<NMF.Models.Meta.IReference>
  nameWithType.vb: IEnumerableExpression(Of IReference)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of NMF.Models.Meta.IReference)
  name.vb: IEnumerableExpression(Of IReference)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.Generic.ICollection{NMF.Models.Meta.IReference}
  commentId: T:System.Collections.Generic.ICollection{NMF.Models.Meta.IReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IReference>
  nameWithType: ICollection<IReference>
  fullName: System.Collections.Generic.ICollection<NMF.Models.Meta.IReference>
  nameWithType.vb: ICollection(Of IReference)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.Meta.IReference)
  name.vb: ICollection(Of IReference)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Models.Meta.IReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IReference>
  nameWithType: IEnumerable<IReference>
  fullName: System.Collections.Generic.IEnumerable<NMF.Models.Meta.IReference>
  nameWithType.vb: IEnumerable(Of IReference)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IReference)
  name.vb: IEnumerable(Of IReference)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.Parent
  commentId: P:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.Parent
  parent: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent
  name: Parent
  nameWithType: ObservableOppositeList<IReferenceType, IReference>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>.Parent
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference).Parent
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference).Parent
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
  name: SetOpposite(IReference, IReferenceType)
  nameWithType: ObservableOppositeList<IReferenceType, IReference>.SetOpposite(IReference, IReferenceType)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>.SetOpposite(NMF.Models.Meta.IReference, NMF.Models.Meta.IReferenceType)
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference).SetOpposite(IReference, IReferenceType)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference).SetOpposite(NMF.Models.Meta.IReference, NMF.Models.Meta.IReferenceType)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
    name: SetOpposite
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReferenceType
    name: IReferenceType
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)
    name: SetOpposite
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReferenceType
    name: IReferenceType
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ClearItems
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ClearItems
  parent: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
  name: ClearItems()
  nameWithType: ObservableOppositeList<IReferenceType, IReference>.ClearItems()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>.ClearItems()
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference).ClearItems()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference).ClearItems()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ClearItems
    name: ClearItems
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ClearItems
    name: ClearItems
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
  name: InsertItem(int, IReference)
  nameWithType: ObservableOppositeList<IReferenceType, IReference>.InsertItem(int, IReference)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>.InsertItem(int, NMF.Models.Meta.IReference)
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference).InsertItem(Integer, IReference)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference).InsertItem(Integer, NMF.Models.Meta.IReference)
  name.vb: InsertItem(Integer, IReference)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
  name: RemoveItem(int)
  nameWithType: ObservableOppositeList<IReferenceType, IReference>.RemoveItem(int)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>.RemoveItem(int)
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference).RemoveItem(Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference).RemoveItem(Integer)
  name.vb: RemoveItem(Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
  name: SetItem(int, IReference)
  nameWithType: ObservableOppositeList<IReferenceType, IReference>.SetItem(int, IReference)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>.SetItem(int, NMF.Models.Meta.IReference)
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference).SetItem(Integer, IReference)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference).SetItem(Integer, NMF.Models.Meta.IReference)
  name.vb: SetItem(Integer, IReference)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ToString
  parent: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
  name: ToString()
  nameWithType: ObservableOppositeList<IReferenceType, IReference>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference>.ToString()
  nameWithType.vb: ObservableOppositeList(Of IReferenceType, IReference).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of NMF.Models.Meta.IReferenceType, NMF.Models.Meta.IReference).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList{NMF.Models.Meta.IReferenceType,NMF.Models.Meta.IReference}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.AsNotifiable
  parent: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableList<IReference>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableList<NMF.Models.Meta.IReference>.AsNotifiable()
  nameWithType.vb: ObservableList(Of IReference).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of NMF.Models.Meta.IReference).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.ToString
  parent: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableList`1.ToString
  name: ToString()
  nameWithType: ObservableList<IReference>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableList<NMF.Models.Meta.IReference>.ToString()
  nameWithType.vb: ObservableList(Of IReference).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of NMF.Models.Meta.IReference).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList{NMF.Models.Meta.IReference}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.CollectionChanging
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableCollectionExtended<IReference>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.CollectionChanging
  nameWithType.vb: ObservableCollectionExtended(Of IReference).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.CollectionChanged
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableCollectionExtended<IReference>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.CollectionChanged
  nameWithType.vb: ObservableCollectionExtended(Of IReference).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.PropertyChanged
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableCollectionExtended<IReference>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.PropertyChanged
  nameWithType.vb: ObservableCollectionExtended(Of IReference).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableCollectionExtended<IReference>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableCollectionExtended(Of IReference).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  nameWithType: ObservableCollectionExtended<IReference>.OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, bool)
  nameWithType.vb: ObservableCollectionExtended(Of IReference).OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, Boolean)
  name.vb: OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RequireEvents
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableCollectionExtended<IReference>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.RequireEvents()
  nameWithType.vb: ObservableCollectionExtended(Of IReference).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.ClearItems
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.ClearItems
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
  name: ClearItems()
  nameWithType: ObservableCollectionExtended<IReference>.ClearItems()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.ClearItems()
  nameWithType.vb: ObservableCollectionExtended(Of IReference).ClearItems()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).ClearItems()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.ClearItems
    name: ClearItems
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.ClearItems
    name: ClearItems
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
  name: InsertItem(int, IReference)
  nameWithType: ObservableCollectionExtended<IReference>.InsertItem(int, IReference)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.InsertItem(int, NMF.Models.Meta.IReference)
  nameWithType.vb: ObservableCollectionExtended(Of IReference).InsertItem(Integer, IReference)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).InsertItem(Integer, NMF.Models.Meta.IReference)
  name.vb: InsertItem(Integer, IReference)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.InsertItem(System.Int32,NMF.Models.Meta.IReference)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.MoveItem(System.Int32,System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.MoveItem(System.Int32,System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
  name: MoveItem(int, int)
  nameWithType: ObservableCollectionExtended<IReference>.MoveItem(int, int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.MoveItem(int, int)
  nameWithType.vb: ObservableCollectionExtended(Of IReference).MoveItem(Integer, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).MoveItem(Integer, Integer)
  name.vb: MoveItem(Integer, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
  name: RemoveItem(int)
  nameWithType: ObservableCollectionExtended<IReference>.RemoveItem(int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.RemoveItem(int)
  nameWithType.vb: ObservableCollectionExtended(Of IReference).RemoveItem(Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).RemoveItem(Integer)
  name.vb: RemoveItem(Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
  name: SetItem(int, IReference)
  nameWithType: ObservableCollectionExtended<IReference>.SetItem(int, IReference)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<NMF.Models.Meta.IReference>.SetItem(int, NMF.Models.Meta.IReference)
  nameWithType.vb: ObservableCollectionExtended(Of IReference).SetItem(Integer, IReference)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of NMF.Models.Meta.IReference).SetItem(Integer, NMF.Models.Meta.IReference)
  name.vb: SetItem(Integer, IReference)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{NMF.Models.Meta.IReference}.SetItem(System.Int32,NMF.Models.Meta.IReference)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Add(NMF.Models.Meta.IReference)
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Add(NMF.Models.Meta.IReference)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Add(`0)
  name: Add(IReference)
  nameWithType: Collection<IReference>.Add(IReference)
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.Add(NMF.Models.Meta.IReference)
  nameWithType.vb: Collection(Of IReference).Add(IReference)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).Add(NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Add(NMF.Models.Meta.IReference)
    name: Add
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Add(NMF.Models.Meta.IReference)
    name: Add
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Clear
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Clear
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Clear
  name: Clear()
  nameWithType: Collection<IReference>.Clear()
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.Clear()
  nameWithType.vb: Collection(Of IReference).Clear()
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Contains(NMF.Models.Meta.IReference)
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Contains(NMF.Models.Meta.IReference)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Contains(`0)
  name: Contains(IReference)
  nameWithType: Collection<IReference>.Contains(IReference)
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.Contains(NMF.Models.Meta.IReference)
  nameWithType.vb: Collection(Of IReference).Contains(IReference)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).Contains(NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Contains(NMF.Models.Meta.IReference)
    name: Contains
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Contains(NMF.Models.Meta.IReference)
    name: Contains
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.CopyTo(NMF.Models.Meta.IReference[],System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.CopyTo(NMF.Models.Meta.IReference[],System.Int32)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(IReference[], int)
  nameWithType: Collection<IReference>.CopyTo(IReference[], int)
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.CopyTo(NMF.Models.Meta.IReference[], int)
  nameWithType.vb: Collection(Of IReference).CopyTo(IReference(), Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).CopyTo(NMF.Models.Meta.IReference(), Integer)
  name.vb: CopyTo(IReference(), Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.CopyTo(NMF.Models.Meta.IReference[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.CopyTo(NMF.Models.Meta.IReference[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.GetEnumerator
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.GetEnumerator
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: Collection<IReference>.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.GetEnumerator()
  nameWithType.vb: Collection(Of IReference).GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.IndexOf(NMF.Models.Meta.IReference)
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.IndexOf(NMF.Models.Meta.IReference)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  name: IndexOf(IReference)
  nameWithType: Collection<IReference>.IndexOf(IReference)
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.IndexOf(NMF.Models.Meta.IReference)
  nameWithType.vb: Collection(Of IReference).IndexOf(IReference)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).IndexOf(NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.IndexOf(NMF.Models.Meta.IReference)
    name: IndexOf
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.IndexOf(NMF.Models.Meta.IReference)
    name: IndexOf
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Insert(System.Int32,NMF.Models.Meta.IReference)
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Insert(System.Int32,NMF.Models.Meta.IReference)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  name: Insert(int, IReference)
  nameWithType: Collection<IReference>.Insert(int, IReference)
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.Insert(int, NMF.Models.Meta.IReference)
  nameWithType.vb: Collection(Of IReference).Insert(Integer, IReference)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).Insert(Integer, NMF.Models.Meta.IReference)
  name.vb: Insert(Integer, IReference)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Insert(System.Int32,NMF.Models.Meta.IReference)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Insert(System.Int32,NMF.Models.Meta.IReference)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Remove(NMF.Models.Meta.IReference)
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Remove(NMF.Models.Meta.IReference)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Remove(`0)
  name: Remove(IReference)
  nameWithType: Collection<IReference>.Remove(IReference)
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.Remove(NMF.Models.Meta.IReference)
  nameWithType.vb: Collection(Of IReference).Remove(IReference)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).Remove(NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Remove(NMF.Models.Meta.IReference)
    name: Remove
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Remove(NMF.Models.Meta.IReference)
    name: Remove
    isExternal: true
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  name: RemoveAt(int)
  nameWithType: Collection<IReference>.RemoveAt(int)
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.RemoveAt(int)
  nameWithType.vb: Collection(Of IReference).RemoveAt(Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Count
  commentId: P:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Count
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Count
  name: Count
  nameWithType: Collection<IReference>.Count
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.Count
  nameWithType.vb: Collection(Of IReference).Count
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).Count
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Item(System.Int32)
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  name: this[int]
  nameWithType: Collection<IReference>.this[int]
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.this[int]
  nameWithType.vb: Collection(Of IReference).this[](Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Item(System.Int32)
    name: this[]
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Items
  commentId: P:System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}.Items
  parent: System.Collections.ObjectModel.Collection{NMF.Models.Meta.IReference}
  definition: System.Collections.ObjectModel.Collection`1.Items
  name: Items
  nameWithType: Collection<IReference>.Items
  fullName: System.Collections.ObjectModel.Collection<NMF.Models.Meta.IReference>.Items
  nameWithType.vb: Collection(Of IReference).Items
  fullName.vb: System.Collections.ObjectModel.Collection(Of NMF.Models.Meta.IReference).Items
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
  commentId: T:NMF.Collections.ObjectModel.ObservableCollectionExtended`1
  name: ObservableCollectionExtended<T>
  nameWithType: ObservableCollectionExtended<T>
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>
  nameWithType.vb: ObservableCollectionExtended(Of T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T)
  name.vb: ObservableCollectionExtended(Of T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel
  commentId: N:NMF.Collections.ObjectModel
  name: NMF.Collections.ObjectModel
  nameWithType: NMF.Collections.ObjectModel
  fullName: NMF.Collections.ObjectModel
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
- uid: NMF.Collections.ObjectModel.ObservableList`1
  commentId: T:NMF.Collections.ObjectModel.ObservableList`1
  name: ObservableList<T>
  nameWithType: ObservableList<T>
  fullName: NMF.Collections.ObjectModel.ObservableList<T>
  nameWithType.vb: ObservableList(Of T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of T)
  name.vb: ObservableList(Of T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2
  commentId: T:NMF.Collections.ObjectModel.ObservableOppositeList`2
  name: ObservableOppositeList<TParent, TCollected>
  nameWithType: ObservableOppositeList<TParent, TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected)
  name.vb: ObservableOppositeList(Of TParent, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2
    name: ObservableOppositeList
  - name: <
  - name: TParent
  - name: ','
  - name: " "
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2
    name: ObservableOppositeList
  - name: (
  - name: Of
  - name: " "
  - name: TParent
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
- uid: NMF.Expressions.IListExpression`1
  commentId: T:NMF.Expressions.IListExpression`1
  name: IListExpression<T>
  nameWithType: IListExpression<T>
  fullName: NMF.Expressions.IListExpression<T>
  nameWithType.vb: IListExpression(Of T)
  fullName.vb: NMF.Expressions.IListExpression(Of T)
  name.vb: IListExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent
  commentId: P:NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent
  name: Parent
  nameWithType: ObservableOppositeList<TParent, TCollected>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.Parent
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).Parent
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).Parent
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
  name: SetOpposite(TCollected, TParent)
  nameWithType: ObservableOppositeList<TParent, TCollected>.SetOpposite(TCollected, TParent)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.SetOpposite(TCollected, TParent)
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).SetOpposite(TCollected, TParent)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).SetOpposite(TCollected, TParent)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
    name: SetOpposite
  - name: (
  - name: TCollected
  - name: ','
  - name: " "
  - name: TParent
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
    name: SetOpposite
  - name: (
  - name: TCollected
  - name: ','
  - name: " "
  - name: TParent
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
  name: ClearItems()
  nameWithType: ObservableOppositeList<TParent, TCollected>.ClearItems()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ClearItems()
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).ClearItems()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).ClearItems()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
    name: ClearItems
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
    name: ClearItems
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
  isExternal: true
  name: InsertItem(int, TCollected)
  nameWithType: ObservableOppositeList<TParent, TCollected>.InsertItem(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.InsertItem(int, TCollected)
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).InsertItem(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).InsertItem(Integer, TCollected)
  name.vb: InsertItem(Integer, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
  isExternal: true
  name: RemoveItem(int)
  nameWithType: ObservableOppositeList<TParent, TCollected>.RemoveItem(int)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.RemoveItem(int)
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).RemoveItem(Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).RemoveItem(Integer)
  name.vb: RemoveItem(Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
  isExternal: true
  name: SetItem(int, TCollected)
  nameWithType: ObservableOppositeList<TParent, TCollected>.SetItem(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.SetItem(int, TCollected)
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).SetItem(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).SetItem(Integer, TCollected)
  name.vb: SetItem(Integer, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
  name: ToString()
  nameWithType: ObservableOppositeList<TParent, TCollected>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ToString()
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableList<T>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableList<T>.AsNotifiable()
  nameWithType.vb: ObservableList(Of T).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList`1.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableList`1.ToString
  name: ToString()
  nameWithType: ObservableList<T>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableList<T>.ToString()
  nameWithType.vb: ObservableList(Of T).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of T).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableCollectionExtended<T>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.CollectionChanging
  nameWithType.vb: ObservableCollectionExtended(Of T).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableCollectionExtended<T>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.CollectionChanged
  nameWithType.vb: ObservableCollectionExtended(Of T).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableCollectionExtended<T>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.PropertyChanged
  nameWithType.vb: ObservableCollectionExtended(Of T).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableCollectionExtended<T>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableCollectionExtended(Of T).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  nameWithType: ObservableCollectionExtended<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, bool)
  nameWithType.vb: ObservableCollectionExtended(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, Boolean)
  name.vb: OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableCollectionExtended<T>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.RequireEvents()
  nameWithType.vb: ObservableCollectionExtended(Of T).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
  name: ClearItems()
  nameWithType: ObservableCollectionExtended<T>.ClearItems()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.ClearItems()
  nameWithType.vb: ObservableCollectionExtended(Of T).ClearItems()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).ClearItems()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
    name: ClearItems
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
    name: ClearItems
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
  isExternal: true
  name: InsertItem(int, T)
  nameWithType: ObservableCollectionExtended<T>.InsertItem(int, T)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.InsertItem(int, T)
  nameWithType.vb: ObservableCollectionExtended(Of T).InsertItem(Integer, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).InsertItem(Integer, T)
  name.vb: InsertItem(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
  isExternal: true
  name: MoveItem(int, int)
  nameWithType: ObservableCollectionExtended<T>.MoveItem(int, int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.MoveItem(int, int)
  nameWithType.vb: ObservableCollectionExtended(Of T).MoveItem(Integer, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).MoveItem(Integer, Integer)
  name.vb: MoveItem(Integer, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
  isExternal: true
  name: RemoveItem(int)
  nameWithType: ObservableCollectionExtended<T>.RemoveItem(int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.RemoveItem(int)
  nameWithType.vb: ObservableCollectionExtended(Of T).RemoveItem(Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).RemoveItem(Integer)
  name.vb: RemoveItem(Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
  isExternal: true
  name: SetItem(int, T)
  nameWithType: ObservableCollectionExtended<T>.SetItem(int, T)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.SetItem(int, T)
  nameWithType.vb: ObservableCollectionExtended(Of T).SetItem(Integer, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).SetItem(Integer, T)
  name.vb: SetItem(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Add(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: Collection<T>.Add(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Add(T)
  nameWithType.vb: Collection(Of T).Add(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Clear
  commentId: M:System.Collections.ObjectModel.Collection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: Collection<T>.Clear()
  fullName: System.Collections.ObjectModel.Collection<T>.Clear()
  nameWithType.vb: Collection(Of T).Clear()
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: Collection<T>.Contains(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Contains(T)
  nameWithType.vb: Collection(Of T).Contains(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], int)
  nameWithType: Collection<T>.CopyTo(T[], int)
  fullName: System.Collections.ObjectModel.Collection<T>.CopyTo(T[], int)
  nameWithType.vb: Collection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
  commentId: M:System.Collections.ObjectModel.Collection`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: Collection<T>.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<T>.GetEnumerator()
  nameWithType.vb: Collection(Of T).GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: Collection<T>.IndexOf(T)
  fullName: System.Collections.ObjectModel.Collection<T>.IndexOf(T)
  nameWithType.vb: Collection(Of T).IndexOf(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
    name: IndexOf
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
    name: IndexOf
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(int, T)
  nameWithType: Collection<T>.Insert(int, T)
  fullName: System.Collections.ObjectModel.Collection<T>.Insert(int, T)
  nameWithType.vb: Collection(Of T).Insert(Integer, T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Insert(Integer, T)
  name.vb: Insert(Integer, T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: Collection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Remove(T)
  nameWithType.vb: Collection(Of T).Remove(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(int)
  nameWithType: Collection<T>.RemoveAt(int)
  fullName: System.Collections.ObjectModel.Collection<T>.RemoveAt(int)
  nameWithType.vb: Collection(Of T).RemoveAt(Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Count
  commentId: P:System.Collections.ObjectModel.Collection`1.Count
  isExternal: true
  name: Count
  nameWithType: Collection<T>.Count
  fullName: System.Collections.ObjectModel.Collection<T>.Count
  nameWithType.vb: Collection(Of T).Count
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Count
- uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  isExternal: true
  name: this[int]
  nameWithType: Collection<T>.this[int]
  fullName: System.Collections.ObjectModel.Collection<T>.this[int]
  nameWithType.vb: Collection(Of T).this[](Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
    name: this[]
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Items
  commentId: P:System.Collections.ObjectModel.Collection`1.Items
  isExternal: true
  name: Items
  nameWithType: Collection<T>.Items
  fullName: System.Collections.ObjectModel.Collection<T>.Items
  nameWithType.vb: Collection(Of T).Items
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Items
- uid: NMF.Models.Meta.ReferenceTypeReferencesCollection.#ctor*
  commentId: Overload:NMF.Models.Meta.ReferenceTypeReferencesCollection.#ctor
  name: ReferenceTypeReferencesCollection
  nameWithType: ReferenceTypeReferencesCollection.ReferenceTypeReferencesCollection
  fullName: NMF.Models.Meta.ReferenceTypeReferencesCollection.ReferenceTypeReferencesCollection
  nameWithType.vb: ReferenceTypeReferencesCollection.New
  fullName.vb: NMF.Models.Meta.ReferenceTypeReferencesCollection.New
  name.vb: New
- uid: NMF.Models.Meta.IReferenceType
  commentId: T:NMF.Models.Meta.IReferenceType
  parent: NMF.Models.Meta
  name: IReferenceType
  nameWithType: IReferenceType
  fullName: NMF.Models.Meta.IReferenceType
- uid: NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite*
  commentId: Overload:NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite
  name: SetOpposite
  nameWithType: ReferenceTypeReferencesCollection.SetOpposite
  fullName: NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite
- uid: NMF.Models.Meta.IReference
  commentId: T:NMF.Models.Meta.IReference
  parent: NMF.Models.Meta
  name: IReference
  nameWithType: IReference
  fullName: NMF.Models.Meta.IReference
