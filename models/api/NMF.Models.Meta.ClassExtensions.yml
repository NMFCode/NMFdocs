### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.ClassExtensions
  commentId: T:NMF.Models.Meta.ClassExtensions
  id: ClassExtensions
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  - NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  - NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  - NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  - NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  - NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  - NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  - NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  langs:
  - csharp
  - vb
  name: ClassExtensions
  nameWithType: ClassExtensions
  fullName: NMF.Models.Meta.ClassExtensions
  type: Class
  source:
    id: ClassExtensions
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 10
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Denotes extension methods for Class instances
  example: []
  syntax:
    content: public static class ClassExtensions
    content.vb: Public Module ClassExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  id: IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsRefined(IClass, IReference)
  nameWithType: ClassExtensions.IsRefined(IClass, IReference)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference)
  type: Method
  source:
    id: IsRefined
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 18
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Determines whether the given reference is refined in the scope of this class
  example: []
  syntax:
    content: public static bool IsRefined(this IClass @class, IReference reference)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
      description: the context class
    - id: reference
      type: NMF.Models.Meta.IReference
      description: the reference
    return:
      type: System.Boolean
      description: True, if the reference is refined otherwise False
    content.vb: Public Shared Function IsRefined([class] As IClass, reference As IReference) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsRefined*
- uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  id: IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsRefined(IClass, IAttribute)
  nameWithType: ClassExtensions.IsRefined(IClass, IAttribute)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IAttribute)
  type: Method
  source:
    id: IsRefined
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 36
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Determines whether the given attribute is refined in the scope of this class
  example: []
  syntax:
    content: public static bool IsRefined(this IClass @class, IAttribute attribute)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
      description: the context class
    - id: attribute
      type: NMF.Models.Meta.IAttribute
      description: the attribute
    return:
      type: System.Boolean
      description: True, if the attribute is refined, otherwise False
    content.vb: Public Shared Function IsRefined([class] As IClass, attribute As IAttribute) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsRefined*
- uid: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  id: LookupReference(NMF.Models.Meta.IClass,System.String)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: LookupReference(IClass, string)
  nameWithType: ClassExtensions.LookupReference(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass, string)
  type: Method
  source:
    id: LookupReference
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 54
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Looks up the reference with the given name
  example: []
  syntax:
    content: public static IReference LookupReference(this IClass @class, string name)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
      description: the context class
    - id: name
      type: System.String
      description: the name of the reference
    return:
      type: NMF.Models.Meta.IReference
      description: The reference or null, if no such reference could be found
    content.vb: Public Shared Function LookupReference([class] As IClass, name As String) As IReference
  overload: NMF.Models.Meta.ClassExtensions.LookupReference*
  nameWithType.vb: ClassExtensions.LookupReference(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass, String)
  name.vb: LookupReference(IClass, String)
- uid: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  id: LookupOperation(NMF.Models.Meta.IClass,System.String)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: LookupOperation(IClass, string)
  nameWithType: ClassExtensions.LookupOperation(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass, string)
  type: Method
  source:
    id: LookupOperation
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 72
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Looks up the operation with the given name
  example: []
  syntax:
    content: public static IOperation LookupOperation(this IClass @class, string name)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
      description: the context class
    - id: name
      type: System.String
      description: the name of the operation
    return:
      type: NMF.Models.Meta.IOperation
      description: The operation or null, if no such operation was found
    content.vb: Public Shared Function LookupOperation([class] As IClass, name As String) As IOperation
  overload: NMF.Models.Meta.ClassExtensions.LookupOperation*
  nameWithType.vb: ClassExtensions.LookupOperation(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass, String)
  name.vb: LookupOperation(IClass, String)
- uid: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  id: LookupAttribute(NMF.Models.Meta.IClass,System.String)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: LookupAttribute(IClass, string)
  nameWithType: ClassExtensions.LookupAttribute(IClass, string)
  fullName: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass, string)
  type: Method
  source:
    id: LookupAttribute
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 90
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Looks up the attribute with the given name
  example: []
  syntax:
    content: public static IAttribute LookupAttribute(this IClass @class, string name)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
      description: the context class
    - id: name
      type: System.String
      description: the name of the attribute
    return:
      type: NMF.Models.Meta.IAttribute
      description: The attribute or null, if no such attribute could be found
    content.vb: Public Shared Function LookupAttribute([class] As IClass, name As String) As IAttribute
  overload: NMF.Models.Meta.ClassExtensions.LookupAttribute*
  nameWithType.vb: ClassExtensions.LookupAttribute(IClass, String)
  fullName.vb: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass, String)
  name.vb: LookupAttribute(IClass, String)
- uid: NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  id: IsContainerReference(NMF.Models.Meta.IReference)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsContainerReference(IReference)
  nameWithType: ClassExtensions.IsContainerReference(IReference)
  fullName: NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  type: Method
  source:
    id: IsContainerReference
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 107
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Determines whethe the given reference is a reference to the container
  example: []
  syntax:
    content: public static bool IsContainerReference(this IReference reference)
    parameters:
    - id: reference
      type: NMF.Models.Meta.IReference
      description: the reference
    return:
      type: System.Boolean
      description: True, if the reference has an opposite containment reference, otherwise False
    content.vb: Public Shared Function IsContainerReference(reference As IReference) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsContainerReference*
- uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  commentId: M:NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  id: RetrieveIdentifier(NMF.Models.Meta.IClass)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: RetrieveIdentifier(IClass)
  nameWithType: ClassExtensions.RetrieveIdentifier(IClass)
  fullName: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  type: Method
  source:
    id: RetrieveIdentifier
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 117
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Retrieves the identifier of the class
  example: []
  syntax:
    content: public static ScopedIdentifier RetrieveIdentifier(this IClass @class)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
      description: the class
    return:
      type: NMF.Models.ScopedIdentifier
      description: A scoped identifier
    content.vb: Public Shared Function RetrieveIdentifier([class] As IClass) As ScopedIdentifier
  overload: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier*
- uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  id: IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(IClass, IClass)
  nameWithType: ClassExtensions.IsAssignableFrom(IClass, IClass)
  fullName: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass, NMF.Models.Meta.IClass)
  type: Method
  source:
    id: IsAssignableFrom
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Models\Models\Meta\ClassExtensions.cs
    startLine: 143
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  summary: Determines whether an instance of the provided class can be assigned to this class
  example: []
  syntax:
    content: public static bool IsAssignableFrom(this IClass @class, IClass specificType)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
      description: the more abstract class
    - id: specificType
      type: NMF.Models.Meta.IClass
      description: the more concrete class
    return:
      type: System.Boolean
      description: True, if the provided class is a derived class, otherwise False
    content.vb: Public Shared Function IsAssignableFrom([class] As IClass, specificType As IClass) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsAssignableFrom*
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  href: NMF.html
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Models
    name: Models
    href: NMF.Models.html
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
    href: NMF.Models.Meta.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Models
    name: Models
    href: NMF.Models.html
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
    href: NMF.Models.Meta.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Meta.ClassExtensions.IsRefined*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.IsRefined
  href: NMF.Models.Meta.ClassExtensions.html#NMF_Models_Meta_ClassExtensions_IsRefined_NMF_Models_Meta_IClass_NMF_Models_Meta_IReference_
  name: IsRefined
  nameWithType: ClassExtensions.IsRefined
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined
- uid: NMF.Models.Meta.IClass
  commentId: T:NMF.Models.Meta.IClass
  parent: NMF.Models.Meta
  href: NMF.Models.Meta.IClass.html
  name: IClass
  nameWithType: IClass
  fullName: NMF.Models.Meta.IClass
- uid: NMF.Models.Meta.IReference
  commentId: T:NMF.Models.Meta.IReference
  parent: NMF.Models.Meta
  href: NMF.Models.Meta.IReference.html
  name: IReference
  nameWithType: IReference
  fullName: NMF.Models.Meta.IReference
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Models.Meta.IAttribute
  commentId: T:NMF.Models.Meta.IAttribute
  parent: NMF.Models.Meta
  href: NMF.Models.Meta.IAttribute.html
  name: IAttribute
  nameWithType: IAttribute
  fullName: NMF.Models.Meta.IAttribute
- uid: NMF.Models.Meta.ClassExtensions.LookupReference*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.LookupReference
  href: NMF.Models.Meta.ClassExtensions.html#NMF_Models_Meta_ClassExtensions_LookupReference_NMF_Models_Meta_IClass_System_String_
  name: LookupReference
  nameWithType: ClassExtensions.LookupReference
  fullName: NMF.Models.Meta.ClassExtensions.LookupReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.Models.Meta.ClassExtensions.LookupOperation*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.LookupOperation
  href: NMF.Models.Meta.ClassExtensions.html#NMF_Models_Meta_ClassExtensions_LookupOperation_NMF_Models_Meta_IClass_System_String_
  name: LookupOperation
  nameWithType: ClassExtensions.LookupOperation
  fullName: NMF.Models.Meta.ClassExtensions.LookupOperation
- uid: NMF.Models.Meta.IOperation
  commentId: T:NMF.Models.Meta.IOperation
  parent: NMF.Models.Meta
  href: NMF.Models.Meta.IOperation.html
  name: IOperation
  nameWithType: IOperation
  fullName: NMF.Models.Meta.IOperation
- uid: NMF.Models.Meta.ClassExtensions.LookupAttribute*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.LookupAttribute
  href: NMF.Models.Meta.ClassExtensions.html#NMF_Models_Meta_ClassExtensions_LookupAttribute_NMF_Models_Meta_IClass_System_String_
  name: LookupAttribute
  nameWithType: ClassExtensions.LookupAttribute
  fullName: NMF.Models.Meta.ClassExtensions.LookupAttribute
- uid: NMF.Models.Meta.ClassExtensions.IsContainerReference*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.IsContainerReference
  href: NMF.Models.Meta.ClassExtensions.html#NMF_Models_Meta_ClassExtensions_IsContainerReference_NMF_Models_Meta_IReference_
  name: IsContainerReference
  nameWithType: ClassExtensions.IsContainerReference
  fullName: NMF.Models.Meta.ClassExtensions.IsContainerReference
- uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.RetrieveIdentifier
  href: NMF.Models.Meta.ClassExtensions.html#NMF_Models_Meta_ClassExtensions_RetrieveIdentifier_NMF_Models_Meta_IClass_
  name: RetrieveIdentifier
  nameWithType: ClassExtensions.RetrieveIdentifier
  fullName: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier
- uid: NMF.Models.ScopedIdentifier
  commentId: T:NMF.Models.ScopedIdentifier
  parent: NMF.Models
  href: NMF.Models.ScopedIdentifier.html
  name: ScopedIdentifier
  nameWithType: ScopedIdentifier
  fullName: NMF.Models.ScopedIdentifier
- uid: NMF.Models
  commentId: N:NMF.Models
  href: NMF.html
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Models
    name: Models
    href: NMF.Models.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Models
    name: Models
    href: NMF.Models.html
- uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.IsAssignableFrom
  href: NMF.Models.Meta.ClassExtensions.html#NMF_Models_Meta_ClassExtensions_IsAssignableFrom_NMF_Models_Meta_IClass_NMF_Models_Meta_IClass_
  name: IsAssignableFrom
  nameWithType: ClassExtensions.IsAssignableFrom
  fullName: NMF.Models.Meta.ClassExtensions.IsAssignableFrom
