### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.ClassExtensions
  commentId: T:NMF.Models.Meta.ClassExtensions
  id: ClassExtensions
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  - NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  - NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  - NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  - NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  - NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  - NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  - NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  langs:
  - csharp
  - vb
  name: ClassExtensions
  nameWithType: ClassExtensions
  fullName: NMF.Models.Meta.ClassExtensions
  type: Class
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ClassExtensions
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 7
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static class ClassExtensions
    content.vb: Public Module ClassExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  id: IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsRefined(IClass, IReference)
  nameWithType: ClassExtensions.IsRefined(IClass, IReference)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IReference)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsRefined
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 9
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static bool IsRefined(this IClass class, IReference reference)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
    - id: reference
      type: NMF.Models.Meta.IReference
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsRefined(class As IClass, reference As IReference) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsRefined*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  id: IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsRefined(IClass, IAttribute)
  nameWithType: ClassExtensions.IsRefined(IClass, IAttribute)
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass, NMF.Models.Meta.IAttribute)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsRefined
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 21
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static bool IsRefined(this IClass class, IAttribute attribute)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
    - id: attribute
      type: NMF.Models.Meta.IAttribute
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsRefined(class As IClass, attribute As IAttribute) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsRefined*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)
  id: LookupReference(NMF.Models.Meta.IClass,System.String)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: LookupReference(IClass, String)
  nameWithType: ClassExtensions.LookupReference(IClass, String)
  fullName: NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass, System.String)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LookupReference
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 33
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static IReference LookupReference(this IClass class, string name)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
    - id: name
      type: System.String
    return:
      type: NMF.Models.Meta.IReference
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LookupReference(class As IClass, name As String) As IReference
  overload: NMF.Models.Meta.ClassExtensions.LookupReference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)
  id: LookupOperation(NMF.Models.Meta.IClass,System.String)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: LookupOperation(IClass, String)
  nameWithType: ClassExtensions.LookupOperation(IClass, String)
  fullName: NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass, System.String)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LookupOperation
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 45
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static IOperation LookupOperation(this IClass class, string name)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
    - id: name
      type: System.String
    return:
      type: NMF.Models.Meta.IOperation
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LookupOperation(class As IClass, name As String) As IOperation
  overload: NMF.Models.Meta.ClassExtensions.LookupOperation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  commentId: M:NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)
  id: LookupAttribute(NMF.Models.Meta.IClass,System.String)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: LookupAttribute(IClass, String)
  nameWithType: ClassExtensions.LookupAttribute(IClass, String)
  fullName: NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass, System.String)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LookupAttribute
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 57
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static IAttribute LookupAttribute(this IClass class, string name)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
    - id: name
      type: System.String
    return:
      type: NMF.Models.Meta.IAttribute
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LookupAttribute(class As IClass, name As String) As IAttribute
  overload: NMF.Models.Meta.ClassExtensions.LookupAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  id: IsContainerReference(NMF.Models.Meta.IReference)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsContainerReference(IReference)
  nameWithType: ClassExtensions.IsContainerReference(IReference)
  fullName: NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsContainerReference
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 69
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static bool IsContainerReference(this IReference reference)
    parameters:
    - id: reference
      type: NMF.Models.Meta.IReference
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsContainerReference(reference As IReference) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsContainerReference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  commentId: M:NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  id: RetrieveIdentifier(NMF.Models.Meta.IClass)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: RetrieveIdentifier(IClass)
  nameWithType: ClassExtensions.RetrieveIdentifier(IClass)
  fullName: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RetrieveIdentifier
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 74
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static ScopedIdentifier RetrieveIdentifier(this IClass class)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
    return:
      type: NMF.Models.ScopedIdentifier
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RetrieveIdentifier(class As IClass) As ScopedIdentifier
  overload: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  commentId: M:NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  id: IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)
  isExtensionMethod: true
  parent: NMF.Models.Meta.ClassExtensions
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(IClass, IClass)
  nameWithType: ClassExtensions.IsAssignableFrom(IClass, IClass)
  fullName: NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass, NMF.Models.Meta.IClass)
  type: Method
  source:
    remote:
      path: Models/Models/Meta/ClassExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsAssignableFrom
    path: src/Models/Models/Meta/ClassExtensions.cs
    startLine: 94
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Meta
  syntax:
    content: public static bool IsAssignableFrom(this IClass class, IClass specificType)
    parameters:
    - id: class
      type: NMF.Models.Meta.IClass
    - id: specificType
      type: NMF.Models.Meta.IClass
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAssignableFrom(class As IClass, specificType As IClass) As Boolean
  overload: NMF.Models.Meta.ClassExtensions.IsAssignableFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.Meta.ClassExtensions.IsRefined*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.IsRefined
  name: IsRefined
  nameWithType: ClassExtensions.IsRefined
  fullName: NMF.Models.Meta.ClassExtensions.IsRefined
- uid: NMF.Models.Meta.IClass
  commentId: T:NMF.Models.Meta.IClass
  parent: NMF.Models.Meta
  name: IClass
  nameWithType: IClass
  fullName: NMF.Models.Meta.IClass
- uid: NMF.Models.Meta.IReference
  commentId: T:NMF.Models.Meta.IReference
  parent: NMF.Models.Meta
  name: IReference
  nameWithType: IReference
  fullName: NMF.Models.Meta.IReference
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Models.Meta.IAttribute
  commentId: T:NMF.Models.Meta.IAttribute
  parent: NMF.Models.Meta
  name: IAttribute
  nameWithType: IAttribute
  fullName: NMF.Models.Meta.IAttribute
- uid: NMF.Models.Meta.ClassExtensions.LookupReference*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.LookupReference
  name: LookupReference
  nameWithType: ClassExtensions.LookupReference
  fullName: NMF.Models.Meta.ClassExtensions.LookupReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Models.Meta.ClassExtensions.LookupOperation*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.LookupOperation
  name: LookupOperation
  nameWithType: ClassExtensions.LookupOperation
  fullName: NMF.Models.Meta.ClassExtensions.LookupOperation
- uid: NMF.Models.Meta.IOperation
  commentId: T:NMF.Models.Meta.IOperation
  parent: NMF.Models.Meta
  name: IOperation
  nameWithType: IOperation
  fullName: NMF.Models.Meta.IOperation
- uid: NMF.Models.Meta.ClassExtensions.LookupAttribute*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.LookupAttribute
  name: LookupAttribute
  nameWithType: ClassExtensions.LookupAttribute
  fullName: NMF.Models.Meta.ClassExtensions.LookupAttribute
- uid: NMF.Models.Meta.ClassExtensions.IsContainerReference*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.IsContainerReference
  name: IsContainerReference
  nameWithType: ClassExtensions.IsContainerReference
  fullName: NMF.Models.Meta.ClassExtensions.IsContainerReference
- uid: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.RetrieveIdentifier
  name: RetrieveIdentifier
  nameWithType: ClassExtensions.RetrieveIdentifier
  fullName: NMF.Models.Meta.ClassExtensions.RetrieveIdentifier
- uid: NMF.Models.ScopedIdentifier
  commentId: T:NMF.Models.ScopedIdentifier
  parent: NMF.Models
  name: ScopedIdentifier
  nameWithType: ScopedIdentifier
  fullName: NMF.Models.ScopedIdentifier
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: NMF.Models.Meta.ClassExtensions.IsAssignableFrom*
  commentId: Overload:NMF.Models.Meta.ClassExtensions.IsAssignableFrom
  name: IsAssignableFrom
  nameWithType: ClassExtensions.IsAssignableFrom
  fullName: NMF.Models.Meta.ClassExtensions.IsAssignableFrom
