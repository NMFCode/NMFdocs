### YamlMime:ManagedReference
items:
- uid: NMF.Models.ModelElement
  commentId: T:NMF.Models.ModelElement
  id: ModelElement
  parent: NMF.Models
  children:
  - NMF.Models.ModelElement.AbsoluteUri
  - NMF.Models.ModelElement.BubbledChange
  - NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  - NMF.Models.ModelElement.Children
  - NMF.Models.ModelElement.ClassInstance
  - NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
  - NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.Delete
  - NMF.Models.ModelElement.Deleted
  - NMF.Models.ModelElement.Deleting
  - NMF.Models.ModelElement.EnforceModels
  - NMF.Models.ModelElement.Extensions
  - NMF.Models.ModelElement.Freeze
  - NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute)
  - NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  - NMF.Models.ModelElement.GetAttributeValue(System.String,System.Int32)
  - NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  - NMF.Models.ModelElement.GetClass
  - NMF.Models.ModelElement.GetCollectionForFeature(System.String)
  - NMF.Models.ModelElement.GetCompositionName(System.Object)
  - NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  - NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
  - NMF.Models.ModelElement.GetExpressionForReference(System.String)
  - NMF.Models.ModelElement.GetExtension``1
  - NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
  - NMF.Models.ModelElement.GetModelElementForReference(System.String,System.Int32)
  - NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  - NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  - NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  - NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  - NMF.Models.ModelElement.IsFrozen
  - NMF.Models.ModelElement.IsIdentified
  - NMF.Models.ModelElement.IsLocked
  - NMF.Models.ModelElement.KeyChanged
  - NMF.Models.ModelElement.Lock
  - NMF.Models.ModelElement.Model
  - NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  - NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  - NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  - NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  - NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  - NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.OnPropertyChanged(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.OnPropertyChanging(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.Parent
  - NMF.Models.ModelElement.ParentChanged
  - NMF.Models.ModelElement.PreferIdentifiers
  - NMF.Models.ModelElement.PropagateNewId(ValueChangedEventArgs)
  - NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.PropertyChanged
  - NMF.Models.ModelElement.PropertyChanging
  - NMF.Models.ModelElement.ReferencedElements
  - NMF.Models.ModelElement.RelativeUri
  - NMF.Models.ModelElement.Resolve(System.String)
  - NMF.Models.ModelElement.Resolve(System.Uri)
  - NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  - NMF.Models.ModelElement.SetFeature(System.String,System.Object)
  - NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.ToIdentifierString
  - NMF.Models.ModelElement.ToString
  - NMF.Models.ModelElement.TryUnlock
  - NMF.Models.ModelElement.Unlock
  - NMF.Models.ModelElement.UriChanged
  langs:
  - csharp
  - vb
  name: ModelElement
  nameWithType: ModelElement
  fullName: NMF.Models.ModelElement
  type: Class
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelElement
    path: src/Models/Models/ModelElement.cs
    startLine: 24
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nDefines the base class for a model element implementation\n"
  example: []
  syntax:
    content: >-
      [ModelRepresentationClass("http://nmf.codeplex.com/nmeta/#//ModelElement/")]

      public abstract class ModelElement : IModelElement, INotifyPropertyChanged, INotifyPropertyChanging
    content.vb: >-
      <ModelRepresentationClass("http://nmf.codeplex.com/nmeta/#//ModelElement/")>

      Public MustInherit Class ModelElement

          Implements IModelElement, INotifyPropertyChanged, INotifyPropertyChanging
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Models.Changes.ModelChange
  - NMF.Models.Changes.ModelChangeSet
  - NMF.Models.Changes.OperationArgument
  - NMF.Models.Meta.AttributeConstraint
  - NMF.Models.Meta.MetaElement
  - NMF.Models.Meta.ReferenceConstraint
  - NMF.Models.Model
  - NMF.Models.ModelElementExtension
  implements:
  - NMF.Models.IModelElement
  - System.ComponentModel.INotifyPropertyChanged
  - System.ComponentModel.INotifyPropertyChanging
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - NMF.Models.IModelElement.NMF.Models.ModelExtensions.Descendants
  attributes:
  - type: NMF.Models.ModelRepresentationClassAttribute
    ctor: NMF.Models.ModelRepresentationClassAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: http://nmf.codeplex.com/nmeta/#//ModelElement/
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: NMF.Models.ModelElement.Model
  commentId: P:NMF.Models.ModelElement.Model
  id: Model
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: ModelElement.Model
  fullName: NMF.Models.ModelElement.Model
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Model
    path: src/Models/Models/ModelElement.cs
    startLine: 60
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the model that contains the current model element\n"
  example: []
  syntax:
    content: >-
      [Browsable(false)]

      public Model Model { get; }
    parameters: []
    return:
      type: NMF.Models.Model
    content.vb: >-
      <Browsable(False)>

      Public ReadOnly Property Model As Model
  overload: NMF.Models.ModelElement.Model*
  implements:
  - NMF.Models.IModelElement.Model
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
    ctor: System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.ModelElement.Freeze
  commentId: M:NMF.Models.ModelElement.Freeze
  id: Freeze
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Freeze()
  nameWithType: ModelElement.Freeze()
  fullName: NMF.Models.ModelElement.Freeze()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Freeze
    path: src/Models/Models/ModelElement.cs
    startLine: 156
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nFreezes this model element such that it becomes immutable.\n"
  example: []
  syntax:
    content: public void Freeze()
    content.vb: Public Sub Freeze
  overload: NMF.Models.ModelElement.Freeze*
  implements:
  - NMF.Models.IModelElement.Freeze
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.Lock
  commentId: M:NMF.Models.ModelElement.Lock
  id: Lock
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Lock()
  nameWithType: ModelElement.Lock()
  fullName: NMF.Models.ModelElement.Lock()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Lock
    path: src/Models/Models/ModelElement.cs
    startLine: 175
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nLocks this model element against any changes (can be undone)\n"
  example: []
  syntax:
    content: public void Lock()
    content.vb: Public Sub Lock
  overload: NMF.Models.ModelElement.Lock*
  implements:
  - NMF.Models.IModelElement.Lock
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.IsFrozen
  commentId: P:NMF.Models.ModelElement.IsFrozen
  id: IsFrozen
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: IsFrozen
  nameWithType: ModelElement.IsFrozen
  fullName: NMF.Models.ModelElement.IsFrozen
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsFrozen
    path: src/Models/Models/ModelElement.cs
    startLine: 187
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public bool IsFrozen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFrozen As Boolean
  overload: NMF.Models.ModelElement.IsFrozen*
  implements:
  - NMF.Models.IModelElement.IsFrozen
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.ModelElement.IsLocked
  commentId: P:NMF.Models.ModelElement.IsLocked
  id: IsLocked
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: IsLocked
  nameWithType: ModelElement.IsLocked
  fullName: NMF.Models.ModelElement.IsLocked
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsLocked
    path: src/Models/Models/ModelElement.cs
    startLine: 189
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public bool IsLocked { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLocked As Boolean
  overload: NMF.Models.ModelElement.IsLocked*
  implements:
  - NMF.Models.IModelElement.IsLocked
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.ModelElement.Unlock
  commentId: M:NMF.Models.ModelElement.Unlock
  id: Unlock
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Unlock()
  nameWithType: ModelElement.Unlock()
  fullName: NMF.Models.ModelElement.Unlock()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Unlock
    path: src/Models/Models/ModelElement.cs
    startLine: 195
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nUnlocks this model element.\n"
  example: []
  syntax:
    content: public void Unlock()
    content.vb: Public Sub Unlock
  overload: NMF.Models.ModelElement.Unlock*
  implements:
  - NMF.Models.IModelElement.Unlock
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.TryUnlock
  commentId: M:NMF.Models.ModelElement.TryUnlock
  id: TryUnlock
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: TryUnlock()
  nameWithType: ModelElement.TryUnlock()
  fullName: NMF.Models.ModelElement.TryUnlock()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TryUnlock
    path: src/Models/Models/ModelElement.cs
    startLine: 204
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nTries to unlock the current model element in order to make changes possible\n"
  example: []
  syntax:
    content: public bool TryUnlock()
    return:
      type: System.Boolean
      description: True, if unlocking the model element succeeds, otherwise False
    content.vb: Public Function TryUnlock As Boolean
  overload: NMF.Models.ModelElement.TryUnlock*
  implements:
  - NMF.Models.IModelElement.TryUnlock
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  commentId: M:NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  id: GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetContainerReference(IModelElement, out Int32)
  nameWithType: ModelElement.GetContainerReference(IModelElement, out Int32)
  fullName: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement, out System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetContainerReference
    path: src/Models/Models/ModelElement.cs
    startLine: 355
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the container reference for the given child element\n"
  example: []
  syntax:
    content: public virtual IReference GetContainerReference(IModelElement child, out int index)
    parameters:
    - id: child
      type: NMF.Models.IModelElement
      description: The child element
    - id: index
      type: System.Int32
      description: The index of the child in the returned reference
    return:
      type: NMF.Models.Meta.IReference
      description: A composition reference or null, if the child is not contained in the model element
    content.vb: Public Overridable Function GetContainerReference(child As IModelElement, ByRef index As Integer) As IReference
  overload: NMF.Models.ModelElement.GetContainerReference*
  implements:
  - NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  nameWithType.vb: ModelElement.GetContainerReference(IModelElement, ByRef Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement, ByRef System.Int32)
  name.vb: GetContainerReference(IModelElement, ByRef Int32)
- uid: NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
  id: PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: PropagateNewModel(Model, Model, IModelElement)
  nameWithType: ModelElement.PropagateNewModel(Model, Model, IModelElement)
  fullName: NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model, NMF.Models.Model, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropagateNewModel
    path: src/Models/Models/ModelElement.cs
    startLine: 374
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nPropagates through the composition hierarchy that an entire subtree has been added to a new model\n"
  example: []
  syntax:
    content: protected virtual void PropagateNewModel(Model newModel, Model oldModel, IModelElement subtreeRoot)
    parameters:
    - id: newModel
      type: NMF.Models.Model
      description: The new model that will host the subtree
    - id: oldModel
      type: NMF.Models.Model
      description: The old model of the subtree
    - id: subtreeRoot
      type: NMF.Models.IModelElement
      description: The root element of the inserted subtree
    content.vb: Protected Overridable Sub PropagateNewModel(newModel As Model, oldModel As Model, subtreeRoot As IModelElement)
  overload: NMF.Models.ModelElement.PropagateNewModel*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  id: OnChildCreated(NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnChildCreated(IModelElement)
  nameWithType: ModelElement.OnChildCreated(IModelElement)
  fullName: NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnChildCreated
    path: src/Models/Models/ModelElement.cs
    startLine: 387
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets called when a new model element is added as a child of the current model element\n"
  remarks: This method is not called if an existing model element is moved in the composition hierarchy
  example: []
  syntax:
    content: protected virtual void OnChildCreated(IModelElement child)
    parameters:
    - id: child
      type: NMF.Models.IModelElement
      description: The child element
    content.vb: Protected Overridable Sub OnChildCreated(child As IModelElement)
  overload: NMF.Models.ModelElement.OnChildCreated*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  id: OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnParentChanging(IModelElement, IModelElement)
  nameWithType: ModelElement.OnParentChanging(IModelElement, IModelElement)
  fullName: NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnParentChanging
    path: src/Models/Models/ModelElement.cs
    startLine: 398
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets called when the parent element of the current element changes\n"
  example: []
  syntax:
    content: protected virtual void OnParentChanging(IModelElement newParent, IModelElement oldParent)
    parameters:
    - id: newParent
      type: NMF.Models.IModelElement
      description: The new parent element
    - id: oldParent
      type: NMF.Models.IModelElement
      description: The old parent element
    content.vb: Protected Overridable Sub OnParentChanging(newParent As IModelElement, oldParent As IModelElement)
  overload: NMF.Models.ModelElement.OnParentChanging*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  id: OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnParentChanged(IModelElement, IModelElement)
  nameWithType: ModelElement.OnParentChanged(IModelElement, IModelElement)
  fullName: NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnParentChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 405
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets called when the parent element of the current element changes\n"
  example: []
  syntax:
    content: protected virtual void OnParentChanged(IModelElement newParent, IModelElement oldParent)
    parameters:
    - id: newParent
      type: NMF.Models.IModelElement
      description: The new parent element
    - id: oldParent
      type: NMF.Models.IModelElement
      description: The old parent element
    content.vb: Protected Overridable Sub OnParentChanged(newParent As IModelElement, oldParent As IModelElement)
  overload: NMF.Models.ModelElement.OnParentChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.Parent
  commentId: P:NMF.Models.ModelElement.Parent
  id: Parent
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ModelElement.Parent
  fullName: NMF.Models.ModelElement.Parent
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Parent
    path: src/Models/Models/ModelElement.cs
    startLine: 413
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets or sets the parent element for the current model element\n"
  example: []
  syntax:
    content: >-
      [Browsable(false)]

      public IModelElement Parent { get; set; }
    parameters: []
    return:
      type: NMF.Models.IModelElement
    content.vb: >-
      <Browsable(False)>

      Public Property Parent As IModelElement
  overload: NMF.Models.ModelElement.Parent*
  implements:
  - NMF.Models.IModelElement.Parent
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
    ctor: System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.Children
  commentId: P:NMF.Models.ModelElement.Children
  id: Children
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: ModelElement.Children
  fullName: NMF.Models.ModelElement.Children
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Children
    path: src/Models/Models/ModelElement.cs
    startLine: 438
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets a collection with the children of the current model element\n"
  example: []
  syntax:
    content: >-
      [Browsable(false)]

      public virtual IEnumerableExpression<IModelElement> Children { get; }
    parameters: []
    return:
      type: IEnumerableExpression{NMF.Models.IModelElement}
    content.vb: >-
      <Browsable(False)>

      Public Overridable ReadOnly Property Children As IEnumerableExpression(Of IModelElement)
  overload: NMF.Models.ModelElement.Children*
  implements:
  - NMF.Models.IModelElement.Children
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
    ctor: System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: NMF.Models.ModelElement.RelativeUri
  commentId: P:NMF.Models.ModelElement.RelativeUri
  id: RelativeUri
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: RelativeUri
  nameWithType: ModelElement.RelativeUri
  fullName: NMF.Models.ModelElement.RelativeUri
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RelativeUri
    path: src/Models/Models/ModelElement.cs
    startLine: 453
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the relative Uri for the current model element\n"
  example: []
  syntax:
    content: public Uri RelativeUri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public ReadOnly Property RelativeUri As Uri
  overload: NMF.Models.ModelElement.RelativeUri*
  implements:
  - NMF.Models.IModelElement.RelativeUri
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.ModelElement.AbsoluteUri
  commentId: P:NMF.Models.ModelElement.AbsoluteUri
  id: AbsoluteUri
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: AbsoluteUri
  nameWithType: ModelElement.AbsoluteUri
  fullName: NMF.Models.ModelElement.AbsoluteUri
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AbsoluteUri
    path: src/Models/Models/ModelElement.cs
    startLine: 466
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the abolute Uri for the current model element\n"
  example: []
  syntax:
    content: public Uri AbsoluteUri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public ReadOnly Property AbsoluteUri As Uri
  overload: NMF.Models.ModelElement.AbsoluteUri*
  implements:
  - NMF.Models.IModelElement.AbsoluteUri
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
  id: CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: CreateUriWithFragment(String, Boolean, IModelElement)
  nameWithType: ModelElement.CreateUriWithFragment(String, Boolean, IModelElement)
  fullName: NMF.Models.ModelElement.CreateUriWithFragment(System.String, System.Boolean, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateUriWithFragment
    path: src/Models/Models/ModelElement.cs
    startLine: 483
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nCreates the uri with the given fragment starting from the current model element\n"
  example: []
  syntax:
    content: protected virtual Uri CreateUriWithFragment(string fragment, bool absolute, IModelElement baseElement = null)
    parameters:
    - id: fragment
      type: System.String
      description: The fragment starting from this element
    - id: absolute
      type: System.Boolean
      description: True, if an absolute Uri is desired, otherwise false
    - id: baseElement
      type: NMF.Models.IModelElement
    return:
      type: System.Uri
      description: A uri (relative or absolute)
    content.vb: Protected Overridable Function CreateUriWithFragment(fragment As String, absolute As Boolean, baseElement As IModelElement = Nothing) As Uri
  overload: NMF.Models.ModelElement.CreateUriWithFragment*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
  commentId: M:NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
  id: CreateUriFromGlobalIdentifier(System.String,System.Boolean)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: CreateUriFromGlobalIdentifier(String, Boolean)
  nameWithType: ModelElement.CreateUriFromGlobalIdentifier(String, Boolean)
  fullName: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateUriFromGlobalIdentifier
    path: src/Models/Models/ModelElement.cs
    startLine: 528
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nCreates a uri with the given fragment\n"
  example: []
  syntax:
    content: protected Uri CreateUriFromGlobalIdentifier(string fragment, bool absolute)
    parameters:
    - id: fragment
      type: System.String
      description: The fragment
    - id: absolute
      type: System.Boolean
      description: True when the Uri should be absolute, otherwise False
    return:
      type: System.Uri
      description: A uri with the given fragment
    content.vb: Protected Function CreateUriFromGlobalIdentifier(fragment As String, absolute As Boolean) As Uri
  overload: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: NMF.Models.ModelElement.PropagateNewId(ValueChangedEventArgs)
  commentId: M:NMF.Models.ModelElement.PropagateNewId(ValueChangedEventArgs)
  id: PropagateNewId(ValueChangedEventArgs)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: PropagateNewId(ValueChangedEventArgs)
  nameWithType: ModelElement.PropagateNewId(ValueChangedEventArgs)
  fullName: NMF.Models.ModelElement.PropagateNewId(ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropagateNewId
    path: src/Models/Models/ModelElement.cs
    startLine: 572
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nInforms the model that the current model element has a new id\n"
  example: []
  syntax:
    content: protected void PropagateNewId(ValueChangedEventArgs e)
    parameters:
    - id: e
      type: ValueChangedEventArgs
      description: The event data for the value change of the identifier
    content.vb: Protected Sub PropagateNewId(e As ValueChangedEventArgs)
  overload: NMF.Models.ModelElement.PropagateNewId*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: NMF.Models.ModelElement.EnforceModels
  commentId: P:NMF.Models.ModelElement.EnforceModels
  id: EnforceModels
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: EnforceModels
  nameWithType: ModelElement.EnforceModels
  fullName: NMF.Models.ModelElement.EnforceModels
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EnforceModels
    path: src/Models/Models/ModelElement.cs
    startLine: 583
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets or sets a value indicating whether a correct model containment should be enforced\n"
  example: []
  syntax:
    content: public static bool EnforceModels { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property EnforceModels As Boolean
  overload: NMF.Models.ModelElement.EnforceModels*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelElement.PreferIdentifiers
  commentId: P:NMF.Models.ModelElement.PreferIdentifiers
  id: PreferIdentifiers
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: PreferIdentifiers
  nameWithType: ModelElement.PreferIdentifiers
  fullName: NMF.Models.ModelElement.PreferIdentifiers
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PreferIdentifiers
    path: src/Models/Models/ModelElement.cs
    startLine: 588
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets or sets whether identifiers should be preferred in the serialization\n"
  example: []
  syntax:
    content: public static bool PreferIdentifiers { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property PreferIdentifiers As Boolean
  overload: NMF.Models.ModelElement.PreferIdentifiers*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Models.ModelElement.IsIdentified
  commentId: P:NMF.Models.ModelElement.IsIdentified
  id: IsIdentified
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: IsIdentified
  nameWithType: ModelElement.IsIdentified
  fullName: NMF.Models.ModelElement.IsIdentified
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsIdentified
    path: src/Models/Models/ModelElement.cs
    startLine: 593
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets a value indicating whether this item can be identified through its ToString value\n"
  example: []
  syntax:
    content: >-
      [Browsable(false)]

      public virtual bool IsIdentified { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <Browsable(False)>

      Public Overridable ReadOnly Property IsIdentified As Boolean
  overload: NMF.Models.ModelElement.IsIdentified*
  implements:
  - NMF.Models.IModelElement.IsIdentified
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
    ctor: System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: NMF.Models.ModelElement.ToIdentifierString
  commentId: M:NMF.Models.ModelElement.ToIdentifierString
  id: ToIdentifierString
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: ToIdentifierString()
  nameWithType: ModelElement.ToIdentifierString()
  fullName: NMF.Models.ModelElement.ToIdentifierString()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToIdentifierString
    path: src/Models/Models/ModelElement.cs
    startLine: 606
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the identifier for this model element\n"
  example: []
  syntax:
    content: public virtual string ToIdentifierString()
    return:
      type: System.String
    content.vb: Public Overridable Function ToIdentifierString As String
  overload: NMF.Models.ModelElement.ToIdentifierString*
  implements:
  - NMF.Models.IModelElement.ToIdentifierString
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Models.ModelElement.ToString
  commentId: M:NMF.Models.ModelElement.ToString
  id: ToString
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ModelElement.ToString()
  fullName: NMF.Models.ModelElement.ToString()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToString
    path: src/Models/Models/ModelElement.cs
    startLine: 616
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets a string representation of the current model element\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the current model element
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NMF.Models.ModelElement.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Models.ModelElement.KeyChanged
  commentId: E:NMF.Models.ModelElement.KeyChanged
  id: KeyChanged
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: KeyChanged
  nameWithType: ModelElement.KeyChanged
  fullName: NMF.Models.ModelElement.KeyChanged
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: KeyChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 632
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets fired when the identifier of the current model element changes\n"
  example: []
  syntax:
    content: public event EventHandler KeyChanged
    return:
      type: System.EventHandler
    content.vb: Public Event KeyChanged As EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  commentId: M:NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  id: OnKeyChanged(System.EventArgs)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnKeyChanged(EventArgs)
  nameWithType: ModelElement.OnKeyChanged(EventArgs)
  fullName: NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnKeyChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 639
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nFires the <xref href=\"NMF.Models.ModelElement.KeyChanged\" data-throw-if-not-resolved=\"false\"></xref> event\n"
  example: []
  syntax:
    content: protected virtual void OnKeyChanged(EventArgs e)
    parameters:
    - id: e
      type: System.EventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnKeyChanged(e As EventArgs)
  overload: NMF.Models.ModelElement.OnKeyChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.Resolve(System.Uri)
  commentId: M:NMF.Models.ModelElement.Resolve(System.Uri)
  id: Resolve(System.Uri)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Resolve(Uri)
  nameWithType: ModelElement.Resolve(Uri)
  fullName: NMF.Models.ModelElement.Resolve(System.Uri)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Resolve
    path: src/Models/Models/ModelElement.cs
    startLine: 651
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nResolves the given relative Uri from the current model element\n"
  example: []
  syntax:
    content: public IModelElement Resolve(Uri relativeUri)
    parameters:
    - id: relativeUri
      type: System.Uri
      description: A relative uri describing the path to the desired child element
    return:
      type: NMF.Models.IModelElement
      description: The corresponding child element or null, if no such was found
    content.vb: Public Function Resolve(relativeUri As Uri) As IModelElement
  overload: NMF.Models.ModelElement.Resolve*
  implements:
  - NMF.Models.IModelElement.Resolve(System.Uri)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.Resolve(System.String)
  commentId: M:NMF.Models.ModelElement.Resolve(System.String)
  id: Resolve(System.String)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Resolve(String)
  nameWithType: ModelElement.Resolve(String)
  fullName: NMF.Models.ModelElement.Resolve(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Resolve
    path: src/Models/Models/ModelElement.cs
    startLine: 664
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nResolves the given path starting from the current element\n"
  example: []
  syntax:
    content: public virtual IModelElement Resolve(string path)
    parameters:
    - id: path
      type: System.String
      description: The path
    return:
      type: NMF.Models.IModelElement
      description: The element corresponding to the given path or null, if no such element could be found
    content.vb: Public Overridable Function Resolve(path As String) As IModelElement
  overload: NMF.Models.ModelElement.Resolve*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  id: GetRelativePathForChild(NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetRelativePathForChild(IModelElement)
  nameWithType: ModelElement.GetRelativePathForChild(IModelElement)
  fullName: NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRelativePathForChild
    path: src/Models/Models/ModelElement.cs
    startLine: 688
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the relative Uri for the given child element\n"
  example: []
  syntax:
    content: protected virtual string GetRelativePathForChild(IModelElement child)
    parameters:
    - id: child
      type: NMF.Models.IModelElement
      description: The child element
    return:
      type: System.String
      description: A relative Uri to resolve the child element
    content.vb: Protected Overridable Function GetRelativePathForChild(child As IModelElement) As String
  overload: NMF.Models.ModelElement.GetRelativePathForChild*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  id: GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetRelativePathForNonIdentifiedChild(IModelElement)
  nameWithType: ModelElement.GetRelativePathForNonIdentifiedChild(IModelElement)
  fullName: NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRelativePathForNonIdentifiedChild
    path: src/Models/Models/ModelElement.cs
    startLine: 730
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the relative Uri for the given child element that is not identified\n"
  example: []
  syntax:
    content: protected virtual string GetRelativePathForNonIdentifiedChild(IModelElement child)
    parameters:
    - id: child
      type: NMF.Models.IModelElement
      description: The child element
    return:
      type: System.String
      description: A relative Uri to resolve the child element
    content.vb: Protected Overridable Function GetRelativePathForNonIdentifiedChild(child As IModelElement) As String
  overload: NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.GetCompositionName(System.Object)
  commentId: M:NMF.Models.ModelElement.GetCompositionName(System.Object)
  id: GetCompositionName(System.Object)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetCompositionName(Object)
  nameWithType: ModelElement.GetCompositionName(Object)
  fullName: NMF.Models.ModelElement.GetCompositionName(System.Object)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetCompositionName
    path: src/Models/Models/ModelElement.cs
    startLine: 735
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: protected virtual string GetCompositionName(object container)
    parameters:
    - id: container
      type: System.Object
    return:
      type: System.String
    content.vb: Protected Overridable Function GetCompositionName(container As Object) As String
  overload: NMF.Models.ModelElement.GetCompositionName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
  commentId: M:NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
  id: GetModelElementForPathSegment(System.String)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetModelElementForPathSegment(String)
  nameWithType: ModelElement.GetModelElementForPathSegment(String)
  fullName: NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetModelElementForPathSegment
    path: src/Models/Models/ModelElement.cs
    startLine: 746
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the model element for the given relative Uri\n"
  example: []
  syntax:
    content: protected IModelElement GetModelElementForPathSegment(string segment)
    parameters:
    - id: segment
      type: System.String
      description: The relative Uri
    return:
      type: NMF.Models.IModelElement
      description: The model element that corresponds to the given Uri
    content.vb: Protected Function GetModelElementForPathSegment(segment As String) As IModelElement
  overload: NMF.Models.ModelElement.GetModelElementForPathSegment*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: NMF.Models.ModelElement.GetModelElementForReference(System.String,System.Int32)
  commentId: M:NMF.Models.ModelElement.GetModelElementForReference(System.String,System.Int32)
  id: GetModelElementForReference(System.String,System.Int32)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetModelElementForReference(String, Int32)
  nameWithType: ModelElement.GetModelElementForReference(String, Int32)
  fullName: NMF.Models.ModelElement.GetModelElementForReference(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetModelElementForReference
    path: src/Models/Models/ModelElement.cs
    startLine: 784
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the Model element for the given reference and index\n"
  example: []
  syntax:
    content: protected virtual IModelElement GetModelElementForReference(string reference, int index)
    parameters:
    - id: reference
      type: System.String
      description: The reference name in upper case
    - id: index
      type: System.Int32
      description: The index of the element within the reference
    return:
      type: NMF.Models.IModelElement
      description: The model element at the given reference
    content.vb: Protected Overridable Function GetModelElementForReference(reference As String, index As Integer) As IModelElement
  overload: NMF.Models.ModelElement.GetModelElementForReference*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.GetCollectionForFeature(System.String)
  commentId: M:NMF.Models.ModelElement.GetCollectionForFeature(System.String)
  id: GetCollectionForFeature(System.String)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetCollectionForFeature(String)
  nameWithType: ModelElement.GetCollectionForFeature(String)
  fullName: NMF.Models.ModelElement.GetCollectionForFeature(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetCollectionForFeature
    path: src/Models/Models/ModelElement.cs
    startLine: 794
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the Model element collection for the given feature\n"
  example: []
  syntax:
    content: protected virtual IList GetCollectionForFeature(string feature)
    parameters:
    - id: feature
      type: System.String
      description: The features name in upper case
    return:
      type: System.Collections.IList
      description: A non-generic list of elements
    content.vb: Protected Overridable Function GetCollectionForFeature(feature As String) As IList
  overload: NMF.Models.ModelElement.GetCollectionForFeature*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.GetAttributeValue(System.String,System.Int32)
  commentId: M:NMF.Models.ModelElement.GetAttributeValue(System.String,System.Int32)
  id: GetAttributeValue(System.String,System.Int32)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetAttributeValue(String, Int32)
  nameWithType: ModelElement.GetAttributeValue(String, Int32)
  fullName: NMF.Models.ModelElement.GetAttributeValue(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetAttributeValue
    path: src/Models/Models/ModelElement.cs
    startLine: 805
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the attribute value for the given attribute\n"
  example: []
  syntax:
    content: protected virtual object GetAttributeValue(string attribute, int index)
    parameters:
    - id: attribute
      type: System.String
      description: The attributes name in upper case
    - id: index
      type: System.Int32
      description: The attributes index
    return:
      type: System.Object
      description: The attribute value
    content.vb: Protected Overridable Function GetAttributeValue(attribute As String, index As Integer) As Object
  overload: NMF.Models.ModelElement.GetAttributeValue*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.SetFeature(System.String,System.Object)
  commentId: M:NMF.Models.ModelElement.SetFeature(System.String,System.Object)
  id: SetFeature(System.String,System.Object)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: SetFeature(String, Object)
  nameWithType: ModelElement.SetFeature(String, Object)
  fullName: NMF.Models.ModelElement.SetFeature(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetFeature
    path: src/Models/Models/ModelElement.cs
    startLine: 815
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nSets the given feature to the given value\n"
  example: []
  syntax:
    content: protected virtual void SetFeature(string feature, object value)
    parameters:
    - id: feature
      type: System.String
      description: The name of the feature that should be set
    - id: value
      type: System.Object
      description: The value that should be set
    content.vb: Protected Overridable Sub SetFeature(feature As String, value As Object)
  overload: NMF.Models.ModelElement.SetFeature*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  commentId: M:NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  id: CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: CallOperation(IOperation, Object[])
  nameWithType: ModelElement.CallOperation(IOperation, Object[])
  fullName: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation, System.Object[])
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CallOperation
    path: src/Models/Models/ModelElement.cs
    startLine: 826
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nCalls the given operation\n"
  example: []
  syntax:
    content: public virtual object CallOperation(IOperation operation, object[] arguments)
    parameters:
    - id: operation
      type: NMF.Models.Meta.IOperation
      description: The operation that should be called
    - id: arguments
      type: System.Object[]
      description: The arguments used to call the operation
    return:
      type: System.Object
      description: The operation result or null, if the operation does not return any value
    content.vb: Public Overridable Function CallOperation(operation As IOperation, arguments As Object()) As Object
  overload: NMF.Models.ModelElement.CallOperation*
  implements:
  - NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  nameWithType.vb: ModelElement.CallOperation(IOperation, Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation, System.Object())
  name.vb: CallOperation(IOperation, Object())
- uid: NMF.Models.ModelElement.GetExpressionForReference(System.String)
  commentId: M:NMF.Models.ModelElement.GetExpressionForReference(System.String)
  id: GetExpressionForReference(System.String)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetExpressionForReference(String)
  nameWithType: ModelElement.GetExpressionForReference(String)
  fullName: NMF.Models.ModelElement.GetExpressionForReference(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetExpressionForReference
    path: src/Models/Models/ModelElement.cs
    startLine: 836
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets a property expression for the given reference\n"
  example: []
  syntax:
    content: protected virtual INotifyExpression<IModelElement> GetExpressionForReference(string reference)
    parameters:
    - id: reference
      type: System.String
      description: The name of the requested reference in upper case
    return:
      type: INotifyExpression{NMF.Models.IModelElement}
      description: A property expression
    content.vb: Protected Overridable Function GetExpressionForReference(reference As String) As INotifyExpression(Of IModelElement)
  overload: NMF.Models.ModelElement.GetExpressionForReference*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
  commentId: M:NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
  id: GetExpressionForAttribute(System.String)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetExpressionForAttribute(String)
  nameWithType: ModelElement.GetExpressionForAttribute(String)
  fullName: NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetExpressionForAttribute
    path: src/Models/Models/ModelElement.cs
    startLine: 846
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets a property expression for the given attribute\n"
  example: []
  syntax:
    content: protected virtual INotifyExpression<object> GetExpressionForAttribute(string attribute)
    parameters:
    - id: attribute
      type: System.String
      description: The requested attribute in upper case
    return:
      type: INotifyExpression{System.Object}
      description: A property expression
    content.vb: Protected Overridable Function GetExpressionForAttribute(attribute As String) As INotifyExpression(Of Object)
  overload: NMF.Models.ModelElement.GetExpressionForAttribute*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.Extensions
  commentId: P:NMF.Models.ModelElement.Extensions
  id: Extensions
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: ModelElement.Extensions
  fullName: NMF.Models.ModelElement.Extensions
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Extensions
    path: src/Models/Models/ModelElement.cs
    startLine: 855
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets a collection of model element extensions that have been applied to this model element\n"
  example: []
  syntax:
    content: public ICollectionExpression<ModelElementExtension> Extensions { get; }
    parameters: []
    return:
      type: ICollectionExpression{NMF.Models.ModelElementExtension}
    content.vb: Public ReadOnly Property Extensions As ICollectionExpression(Of ModelElementExtension)
  overload: NMF.Models.ModelElement.Extensions*
  implements:
  - NMF.Models.IModelElement.Extensions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.ModelElement.GetExtension``1
  commentId: M:NMF.Models.ModelElement.GetExtension``1
  id: GetExtension``1
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetExtension<T>()
  nameWithType: ModelElement.GetExtension<T>()
  fullName: NMF.Models.ModelElement.GetExtension<T>()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetExtension
    path: src/Models/Models/ModelElement.cs
    startLine: 871
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the extension with the given extension type\n"
  example: []
  syntax:
    content: >-
      public T GetExtension<T>()

          where T : ModelElementExtension
    typeParameters:
    - id: T
      description: The model element extension type
    return:
      type: '{T}'
      description: The extension of the given extension type or null, if no such exists
    content.vb: Public Function GetExtension(Of T As ModelElementExtension) As T
  overload: NMF.Models.ModelElement.GetExtension*
  implements:
  - NMF.Models.IModelElement.GetExtension``1
  nameWithType.vb: ModelElement.GetExtension(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.ModelElement.GetExtension(Of T)()
  name.vb: GetExtension(Of T)()
- uid: NMF.Models.ModelElement.ReferencedElements
  commentId: P:NMF.Models.ModelElement.ReferencedElements
  id: ReferencedElements
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: ReferencedElements
  nameWithType: ModelElement.ReferencedElements
  fullName: NMF.Models.ModelElement.ReferencedElements
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReferencedElements
    path: src/Models/Models/ModelElement.cs
    startLine: 887
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets a collection of model elements referenced from this element.\n"
  example: []
  syntax:
    content: >-
      [Browsable(false)]

      public virtual IEnumerableExpression<IModelElement> ReferencedElements { get; }
    parameters: []
    return:
      type: IEnumerableExpression{NMF.Models.IModelElement}
    content.vb: >-
      <Browsable(False)>

      Public Overridable ReadOnly Property ReferencedElements As IEnumerableExpression(Of IModelElement)
  overload: NMF.Models.ModelElement.ReferencedElements*
  implements:
  - NMF.Models.IModelElement.ReferencedElements
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
    ctor: System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: NMF.Models.ModelElement.OnPropertyChanged(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnPropertyChanged(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  id: OnPropertyChanged(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(String, ValueChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnPropertyChanged(String, ValueChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnPropertyChanged(System.String, ValueChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnPropertyChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 903
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets called when the PropertyChanged event is fired\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanged(string propertyName, ValueChangedEventArgs valueChangedEvent, Lazy<ITypedElement> feature = null)
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the changed property
    - id: valueChangedEvent
      type: ValueChangedEventArgs
      description: The original event data
    - id: feature
      type: System.Lazy{NMF.Models.Meta.ITypedElement}
    content.vb: Protected Overridable Sub OnPropertyChanged(propertyName As String, valueChangedEvent As ValueChangedEventArgs, feature As Lazy(Of ITypedElement) = Nothing)
  overload: NMF.Models.ModelElement.OnPropertyChanged*
  nameWithType.vb: ModelElement.OnPropertyChanged(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Models.ModelElement.OnPropertyChanged(System.String, ValueChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnPropertyChanged(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
- uid: NMF.Models.ModelElement.OnPropertyChanging(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnPropertyChanging(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  id: OnPropertyChanging(System.String,ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnPropertyChanging(String, ValueChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnPropertyChanging(String, ValueChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnPropertyChanging(System.String, ValueChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnPropertyChanging
    path: src/Models/Models/ModelElement.cs
    startLine: 915
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets called when the PropertyChanging event is fired\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanging(string propertyName, ValueChangedEventArgs e = null, Lazy<ITypedElement> feature = null)
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the changed property
    - id: e
      type: ValueChangedEventArgs
    - id: feature
      type: System.Lazy{NMF.Models.Meta.ITypedElement}
    content.vb: Protected Overridable Sub OnPropertyChanging(propertyName As String, e As ValueChangedEventArgs = Nothing, feature As Lazy(Of ITypedElement) = Nothing)
  overload: NMF.Models.ModelElement.OnPropertyChanging*
  nameWithType.vb: ModelElement.OnPropertyChanging(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Models.ModelElement.OnPropertyChanging(System.String, ValueChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnPropertyChanging(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
- uid: NMF.Models.ModelElement.Delete
  commentId: M:NMF.Models.ModelElement.Delete
  id: Delete
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: ModelElement.Delete()
  fullName: NMF.Models.ModelElement.Delete()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Delete
    path: src/Models/Models/ModelElement.cs
    startLine: 927
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nDeletes the current model element\n"
  example: []
  syntax:
    content: public virtual void Delete()
    content.vb: Public Overridable Sub Delete
  overload: NMF.Models.ModelElement.Delete*
  implements:
  - NMF.Models.IModelElement.Delete
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  commentId: M:NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  id: OnDeleting(NMF.Models.UriChangedEventArgs)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnDeleting(UriChangedEventArgs)
  nameWithType: ModelElement.OnDeleting(UriChangedEventArgs)
  fullName: NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnDeleting
    path: src/Models/Models/ModelElement.cs
    startLine: 955
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets called before the model element gets deleted\n"
  example: []
  syntax:
    content: protected virtual void OnDeleting(UriChangedEventArgs e)
    parameters:
    - id: e
      type: NMF.Models.UriChangedEventArgs
      description: ''
    content.vb: Protected Overridable Sub OnDeleting(e As UriChangedEventArgs)
  overload: NMF.Models.ModelElement.OnDeleting*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  commentId: M:NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  id: OnDeleted(NMF.Models.UriChangedEventArgs)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnDeleted(UriChangedEventArgs)
  nameWithType: ModelElement.OnDeleted(UriChangedEventArgs)
  fullName: NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnDeleted
    path: src/Models/Models/ModelElement.cs
    startLine: 964
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets called when the model element gets deleted\n"
  example: []
  syntax:
    content: protected virtual void OnDeleted(UriChangedEventArgs e)
    parameters:
    - id: e
      type: NMF.Models.UriChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnDeleted(e As UriChangedEventArgs)
  overload: NMF.Models.ModelElement.OnDeleted*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.PropertyChanged
  commentId: E:NMF.Models.ModelElement.PropertyChanged
  id: PropertyChanged
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: ModelElement.PropertyChanged
  fullName: NMF.Models.ModelElement.PropertyChanged
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropertyChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 991
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets fired when a property value changes\n"
  example: []
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.PropertyChanging
  commentId: E:NMF.Models.ModelElement.PropertyChanging
  id: PropertyChanging
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: PropertyChanging
  nameWithType: ModelElement.PropertyChanging
  fullName: NMF.Models.ModelElement.PropertyChanging
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropertyChanging
    path: src/Models/Models/ModelElement.cs
    startLine: 997
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets fired before a property value changes\n"
  example: []
  syntax:
    content: public event PropertyChangingEventHandler PropertyChanging
    return:
      type: System.ComponentModel.PropertyChangingEventHandler
    content.vb: Public Event PropertyChanging As PropertyChangingEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanging.PropertyChanging
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.Deleted
  commentId: E:NMF.Models.ModelElement.Deleted
  id: Deleted
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Deleted
  nameWithType: ModelElement.Deleted
  fullName: NMF.Models.ModelElement.Deleted
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Deleted
    path: src/Models/Models/ModelElement.cs
    startLine: 1003
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets fired after the model element has been deleted\n"
  example: []
  syntax:
    content: public event EventHandler<UriChangedEventArgs> Deleted
    return:
      type: System.EventHandler{NMF.Models.UriChangedEventArgs}
    content.vb: Public Event Deleted As EventHandler(Of UriChangedEventArgs)
  implements:
  - NMF.Models.IModelElement.Deleted
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.Deleting
  commentId: E:NMF.Models.ModelElement.Deleting
  id: Deleting
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: Deleting
  nameWithType: ModelElement.Deleting
  fullName: NMF.Models.ModelElement.Deleting
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Deleting
    path: src/Models/Models/ModelElement.cs
    startLine: 1009
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets fired before the model element gets deleted\n"
  example: []
  syntax:
    content: public event EventHandler<UriChangedEventArgs> Deleting
    return:
      type: System.EventHandler{NMF.Models.UriChangedEventArgs}
    content.vb: Public Event Deleting As EventHandler(Of UriChangedEventArgs)
  implements:
  - NMF.Models.IModelElement.Deleting
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.UriChanged
  commentId: E:NMF.Models.ModelElement.UriChanged
  id: UriChanged
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: UriChanged
  nameWithType: ModelElement.UriChanged
  fullName: NMF.Models.ModelElement.UriChanged
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UriChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 1015
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets fired when the Uri of this element changes\n"
  example: []
  syntax:
    content: public event EventHandler<UriChangedEventArgs> UriChanged
    return:
      type: System.EventHandler{NMF.Models.UriChangedEventArgs}
    content.vb: Public Event UriChanged As EventHandler(Of UriChangedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.GetClass
  commentId: M:NMF.Models.ModelElement.GetClass
  id: GetClass
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetClass()
  nameWithType: ModelElement.GetClass()
  fullName: NMF.Models.ModelElement.GetClass()
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetClass
    path: src/Models/Models/ModelElement.cs
    startLine: 1030
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the class of the current model element\n"
  example: []
  syntax:
    content: public abstract IClass GetClass()
    return:
      type: NMF.Models.Meta.IClass
      description: The class of the current model element
    content.vb: Public MustOverride Function GetClass As IClass
  overload: NMF.Models.ModelElement.GetClass*
  implements:
  - NMF.Models.IModelElement.GetClass
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: NMF.Models.ModelElement.ClassInstance
  commentId: P:NMF.Models.ModelElement.ClassInstance
  id: ClassInstance
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: ClassInstance
  nameWithType: ModelElement.ClassInstance
  fullName: NMF.Models.ModelElement.ClassInstance
  type: Property
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ClassInstance
    path: src/Models/Models/ModelElement.cs
    startLine: 1036
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the NMeta class object for this type\n"
  example: []
  syntax:
    content: public static IClass ClassInstance { get; }
    parameters: []
    return:
      type: NMF.Models.Meta.IClass
    content.vb: Public Shared ReadOnly Property ClassInstance As IClass
  overload: NMF.Models.ModelElement.ClassInstance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute)
  id: GetAttributeValue(NMF.Models.Meta.IAttribute)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetAttributeValue(IAttribute)
  nameWithType: ModelElement.GetAttributeValue(IAttribute)
  fullName: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetAttributeValue
    path: src/Models/Models/ModelElement.cs
    startLine: 1050
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the value for the given attribute\n"
  example: []
  syntax:
    content: public virtual object GetAttributeValue(IAttribute attribute)
    parameters:
    - id: attribute
      type: NMF.Models.Meta.IAttribute
      description: The attribute whose value is queried
    return:
      type: System.Object
      description: The attribute value
    content.vb: Public Overridable Function GetAttributeValue(attribute As IAttribute) As Object
  overload: NMF.Models.ModelElement.GetAttributeValue*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  commentId: M:NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  id: GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetReferencedElement(IReference, Int32)
  nameWithType: ModelElement.GetReferencedElement(IReference, Int32)
  fullName: NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference, System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetReferencedElement
    path: src/Models/Models/ModelElement.cs
    startLine: 1061
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the referenced element of the current model element for the given reference\n"
  example: []
  syntax:
    content: public IModelElement GetReferencedElement(IReference reference, int index = 0)
    parameters:
    - id: reference
      type: NMF.Models.Meta.IReference
      description: The reference
    - id: index
      type: System.Int32
      description: The index of the desired model element, if multi-valued reference
    return:
      type: NMF.Models.IModelElement
      description: The referenced element for the given reference
    content.vb: Public Function GetReferencedElement(reference As IReference, index As Integer = 0) As IModelElement
  overload: NMF.Models.ModelElement.GetReferencedElement*
  implements:
  - NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  id: SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: SetReferencedElement(IReference, IModelElement)
  nameWithType: ModelElement.SetReferencedElement(IReference, IModelElement)
  fullName: NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetReferencedElement
    path: src/Models/Models/ModelElement.cs
    startLine: 1073
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nSets the referenced element of the current model element for the given reference\n"
  example: []
  syntax:
    content: public void SetReferencedElement(IReference reference, IModelElement element)
    parameters:
    - id: reference
      type: NMF.Models.Meta.IReference
      description: The reference
    - id: element
      type: NMF.Models.IModelElement
      description: The element that should be set
    content.vb: Public Sub SetReferencedElement(reference As IReference, element As IModelElement)
  overload: NMF.Models.ModelElement.SetReferencedElement*
  implements:
  - NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  id: GetReferencedElements(NMF.Models.Meta.IReference)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetReferencedElements(IReference)
  nameWithType: ModelElement.GetReferencedElements(IReference)
  fullName: NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetReferencedElements
    path: src/Models/Models/ModelElement.cs
    startLine: 1084
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the referenced elements of the current model element for the given reference\n"
  example: []
  syntax:
    content: public IList GetReferencedElements(IReference reference)
    parameters:
    - id: reference
      type: NMF.Models.Meta.IReference
      description: The reference
    return:
      type: System.Collections.IList
      description: A collection of referenced elements
    content.vb: Public Function GetReferencedElements(reference As IReference) As IList
  overload: NMF.Models.ModelElement.GetReferencedElements*
  implements:
  - NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  commentId: M:NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  id: GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetAttributeValue(IAttribute, Int32)
  nameWithType: ModelElement.GetAttributeValue(IAttribute, Int32)
  fullName: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute, System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetAttributeValue
    path: src/Models/Models/ModelElement.cs
    startLine: 1095
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the value of the current model element under the given attribute\n"
  example: []
  syntax:
    content: public object GetAttributeValue(IAttribute attribute, int index = 0)
    parameters:
    - id: attribute
      type: NMF.Models.Meta.IAttribute
      description: The attribute
    - id: index
      type: System.Int32
      description: The index of the desired value, if multi-valued attribute
    return:
      type: System.Object
      description: The attributes value
    content.vb: Public Function GetAttributeValue(attribute As IAttribute, index As Integer = 0) As Object
  overload: NMF.Models.ModelElement.GetAttributeValue*
  implements:
  - NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  commentId: M:NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  id: SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: SetAttributeValue(IAttribute, Object)
  nameWithType: ModelElement.SetAttributeValue(IAttribute, Object)
  fullName: NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute, System.Object)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetAttributeValue
    path: src/Models/Models/ModelElement.cs
    startLine: 1107
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nSets the value of the current model element for the given attribute\n"
  example: []
  syntax:
    content: public void SetAttributeValue(IAttribute attribute, object value)
    parameters:
    - id: attribute
      type: NMF.Models.Meta.IAttribute
      description: The attribute
    - id: value
      type: System.Object
      description: The value that should be set
    content.vb: Public Sub SetAttributeValue(attribute As IAttribute, value As Object)
  overload: NMF.Models.ModelElement.SetAttributeValue*
  implements:
  - NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  id: GetAttributeValues(NMF.Models.Meta.IAttribute)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: GetAttributeValues(IAttribute)
  nameWithType: ModelElement.GetAttributeValues(IAttribute)
  fullName: NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetAttributeValues
    path: src/Models/Models/ModelElement.cs
    startLine: 1118
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets the values for the given attribute\n"
  example: []
  syntax:
    content: public IList GetAttributeValues(IAttribute attribute)
    parameters:
    - id: attribute
      type: NMF.Models.Meta.IAttribute
      description: The attribute whose value is queried
    return:
      type: System.Collections.IList
      description: The attribute value collection
    content.vb: Public Function GetAttributeValues(attribute As IAttribute) As IList
  overload: NMF.Models.ModelElement.GetAttributeValues*
  implements:
  - NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  id: OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(String, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnCollectionChanged(String, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnCollectionChanged(System.String, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnCollectionChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 1129
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nRaises the Bubbled Change event for the given collection change\n"
  example: []
  syntax:
    content: protected void OnCollectionChanged(string propertyName, NotifyCollectionChangedEventArgs e, Lazy<ITypedElement> feature = null)
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the property that has changed
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
      description: The event data
    - id: feature
      type: System.Lazy{NMF.Models.Meta.ITypedElement}
    content.vb: Protected Sub OnCollectionChanged(propertyName As String, e As NotifyCollectionChangedEventArgs, feature As Lazy(Of ITypedElement) = Nothing)
  overload: NMF.Models.ModelElement.OnCollectionChanged*
  nameWithType.vb: ModelElement.OnCollectionChanged(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Models.ModelElement.OnCollectionChanged(System.String, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnCollectionChanged(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
- uid: NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  id: OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnCollectionChanging(String, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnCollectionChanging(String, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnCollectionChanging(System.String, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnCollectionChanging
    path: src/Models/Models/ModelElement.cs
    startLine: 1140
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nRaises the Bubbled Change event for the given upcoming collection change\n"
  example: []
  syntax:
    content: protected void OnCollectionChanging(string propertyName, NotifyCollectionChangedEventArgs e, Lazy<ITypedElement> feature = null)
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the property that has changed
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
      description: The event data
    - id: feature
      type: System.Lazy{NMF.Models.Meta.ITypedElement}
    content.vb: Protected Sub OnCollectionChanging(propertyName As String, e As NotifyCollectionChangedEventArgs, feature As Lazy(Of ITypedElement) = Nothing)
  overload: NMF.Models.ModelElement.OnCollectionChanging*
  nameWithType.vb: ModelElement.OnCollectionChanging(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Models.ModelElement.OnCollectionChanging(System.String, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnCollectionChanging(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
- uid: NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  commentId: M:NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  id: OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: OnBubbledChange(BubbledChangeEventArgs)
  nameWithType: ModelElement.OnBubbledChange(BubbledChangeEventArgs)
  fullName: NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnBubbledChange
    path: src/Models/Models/ModelElement.cs
    startLine: 1151
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nFires the BubbledChange event\n"
  example: []
  syntax:
    content: protected virtual void OnBubbledChange(BubbledChangeEventArgs e)
    parameters:
    - id: e
      type: NMF.Models.BubbledChangeEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnBubbledChange(e As BubbledChangeEventArgs)
  overload: NMF.Models.ModelElement.OnBubbledChange*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.ModelElement.BubbledChange
  commentId: E:NMF.Models.ModelElement.BubbledChange
  id: BubbledChange
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: BubbledChange
  nameWithType: ModelElement.BubbledChange
  fullName: NMF.Models.ModelElement.BubbledChange
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: BubbledChange
    path: src/Models/Models/ModelElement.cs
    startLine: 1167
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nIs fired when an element in the below containment hierarchy has changed\n"
  example: []
  syntax:
    content: public event EventHandler<BubbledChangeEventArgs> BubbledChange
    return:
      type: System.EventHandler{NMF.Models.BubbledChangeEventArgs}
    content.vb: Public Event BubbledChange As EventHandler(Of BubbledChangeEventArgs)
  implements:
  - NMF.Models.IModelElement.BubbledChange
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.ModelElement.ParentChanged
  commentId: E:NMF.Models.ModelElement.ParentChanged
  id: ParentChanged
  parent: NMF.Models.ModelElement
  langs:
  - csharp
  - vb
  name: ParentChanged
  nameWithType: ModelElement.ParentChanged
  fullName: NMF.Models.ModelElement.ParentChanged
  type: Event
  source:
    remote:
      path: Models/Models/ModelElement.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ParentChanged
    path: src/Models/Models/ModelElement.cs
    startLine: 1186
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  summary: "\nGets fired when the container of the current model element has changed\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> ParentChanged
    return:
      type: System.EventHandler{ValueChangedEventArgs}
    content.vb: Public Event ParentChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Models.IModelElement.ParentChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.ComponentModel.INotifyPropertyChanging
  commentId: T:System.ComponentModel.INotifyPropertyChanging
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanging
  nameWithType: INotifyPropertyChanging
  fullName: System.ComponentModel.INotifyPropertyChanging
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement.NMF.Models.ModelExtensions.Descendants
  commentId: M:NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  parent: NMF.Models.ModelExtensions
  definition: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  name: Descendants()
  nameWithType: ModelExtensions.Descendants()
  fullName: NMF.Models.ModelExtensions.Descendants()
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.Descendants
    name: Descendants
    nameWithType: ModelExtensions.Descendants
    fullName: NMF.Models.ModelExtensions.Descendants
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.Descendants
    name: Descendants
    nameWithType: ModelExtensions.Descendants
    fullName: NMF.Models.ModelExtensions.Descendants
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  name: Descendants(IModelElement)
  nameWithType: ModelExtensions.Descendants(IModelElement)
  fullName: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
    name: Descendants
    nameWithType: ModelExtensions.Descendants
    fullName: NMF.Models.ModelExtensions.Descendants
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)
    name: Descendants
    nameWithType: ModelExtensions.Descendants
    fullName: NMF.Models.ModelExtensions.Descendants
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelExtensions
  commentId: T:NMF.Models.ModelExtensions
  parent: NMF.Models
  name: ModelExtensions
  nameWithType: ModelExtensions
  fullName: NMF.Models.ModelExtensions
- uid: NMF.Models.ModelElement.Model*
  commentId: Overload:NMF.Models.ModelElement.Model
  name: Model
  nameWithType: ModelElement.Model
  fullName: NMF.Models.ModelElement.Model
- uid: NMF.Models.IModelElement.Model
  commentId: P:NMF.Models.IModelElement.Model
  parent: NMF.Models.IModelElement
  name: Model
  nameWithType: IModelElement.Model
  fullName: NMF.Models.IModelElement.Model
- uid: NMF.Models.Model
  commentId: T:NMF.Models.Model
  parent: NMF.Models
  name: Model
  nameWithType: Model
  fullName: NMF.Models.Model
- uid: NMF.Models.ModelElement.Freeze*
  commentId: Overload:NMF.Models.ModelElement.Freeze
  name: Freeze
  nameWithType: ModelElement.Freeze
  fullName: NMF.Models.ModelElement.Freeze
- uid: NMF.Models.IModelElement.Freeze
  commentId: M:NMF.Models.IModelElement.Freeze
  parent: NMF.Models.IModelElement
  name: Freeze()
  nameWithType: IModelElement.Freeze()
  fullName: NMF.Models.IModelElement.Freeze()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Freeze
    name: Freeze
    nameWithType: IModelElement.Freeze
    fullName: NMF.Models.IModelElement.Freeze
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Freeze
    name: Freeze
    nameWithType: IModelElement.Freeze
    fullName: NMF.Models.IModelElement.Freeze
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.Lock*
  commentId: Overload:NMF.Models.ModelElement.Lock
  name: Lock
  nameWithType: ModelElement.Lock
  fullName: NMF.Models.ModelElement.Lock
- uid: NMF.Models.IModelElement.Lock
  commentId: M:NMF.Models.IModelElement.Lock
  parent: NMF.Models.IModelElement
  name: Lock()
  nameWithType: IModelElement.Lock()
  fullName: NMF.Models.IModelElement.Lock()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Lock
    name: Lock
    nameWithType: IModelElement.Lock
    fullName: NMF.Models.IModelElement.Lock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Lock
    name: Lock
    nameWithType: IModelElement.Lock
    fullName: NMF.Models.IModelElement.Lock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.IsFrozen*
  commentId: Overload:NMF.Models.ModelElement.IsFrozen
  name: IsFrozen
  nameWithType: ModelElement.IsFrozen
  fullName: NMF.Models.ModelElement.IsFrozen
- uid: NMF.Models.IModelElement.IsFrozen
  commentId: P:NMF.Models.IModelElement.IsFrozen
  parent: NMF.Models.IModelElement
  name: IsFrozen
  nameWithType: IModelElement.IsFrozen
  fullName: NMF.Models.IModelElement.IsFrozen
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Models.ModelElement.IsLocked*
  commentId: Overload:NMF.Models.ModelElement.IsLocked
  name: IsLocked
  nameWithType: ModelElement.IsLocked
  fullName: NMF.Models.ModelElement.IsLocked
- uid: NMF.Models.IModelElement.IsLocked
  commentId: P:NMF.Models.IModelElement.IsLocked
  parent: NMF.Models.IModelElement
  name: IsLocked
  nameWithType: IModelElement.IsLocked
  fullName: NMF.Models.IModelElement.IsLocked
- uid: NMF.Models.ModelElement.Unlock*
  commentId: Overload:NMF.Models.ModelElement.Unlock
  name: Unlock
  nameWithType: ModelElement.Unlock
  fullName: NMF.Models.ModelElement.Unlock
- uid: NMF.Models.IModelElement.Unlock
  commentId: M:NMF.Models.IModelElement.Unlock
  parent: NMF.Models.IModelElement
  name: Unlock()
  nameWithType: IModelElement.Unlock()
  fullName: NMF.Models.IModelElement.Unlock()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Unlock
    name: Unlock
    nameWithType: IModelElement.Unlock
    fullName: NMF.Models.IModelElement.Unlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Unlock
    name: Unlock
    nameWithType: IModelElement.Unlock
    fullName: NMF.Models.IModelElement.Unlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.TryUnlock*
  commentId: Overload:NMF.Models.ModelElement.TryUnlock
  name: TryUnlock
  nameWithType: ModelElement.TryUnlock
  fullName: NMF.Models.ModelElement.TryUnlock
- uid: NMF.Models.IModelElement.TryUnlock
  commentId: M:NMF.Models.IModelElement.TryUnlock
  parent: NMF.Models.IModelElement
  name: TryUnlock()
  nameWithType: IModelElement.TryUnlock()
  fullName: NMF.Models.IModelElement.TryUnlock()
  spec.csharp:
  - uid: NMF.Models.IModelElement.TryUnlock
    name: TryUnlock
    nameWithType: IModelElement.TryUnlock
    fullName: NMF.Models.IModelElement.TryUnlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.TryUnlock
    name: TryUnlock
    nameWithType: IModelElement.TryUnlock
    fullName: NMF.Models.IModelElement.TryUnlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.GetContainerReference*
  commentId: Overload:NMF.Models.ModelElement.GetContainerReference
  name: GetContainerReference
  nameWithType: ModelElement.GetContainerReference
  fullName: NMF.Models.ModelElement.GetContainerReference
- uid: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  commentId: M:NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: GetContainerReference(IModelElement, Int32)
  nameWithType: IModelElement.GetContainerReference(IModelElement, Int32)
  fullName: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement, System.Int32)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
    name: GetContainerReference
    nameWithType: IModelElement.GetContainerReference
    fullName: NMF.Models.IModelElement.GetContainerReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
    name: GetContainerReference
    nameWithType: IModelElement.GetContainerReference
    fullName: NMF.Models.IModelElement.GetContainerReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Models.Meta.IReference
  commentId: T:NMF.Models.Meta.IReference
  parent: NMF.Models.Meta
  name: IReference
  nameWithType: IReference
  fullName: NMF.Models.Meta.IReference
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: NMF.Models.ModelElement.PropagateNewModel*
  commentId: Overload:NMF.Models.ModelElement.PropagateNewModel
  name: PropagateNewModel
  nameWithType: ModelElement.PropagateNewModel
  fullName: NMF.Models.ModelElement.PropagateNewModel
- uid: NMF.Models.ModelElement.OnChildCreated*
  commentId: Overload:NMF.Models.ModelElement.OnChildCreated
  name: OnChildCreated
  nameWithType: ModelElement.OnChildCreated
  fullName: NMF.Models.ModelElement.OnChildCreated
- uid: NMF.Models.ModelElement.OnParentChanging*
  commentId: Overload:NMF.Models.ModelElement.OnParentChanging
  name: OnParentChanging
  nameWithType: ModelElement.OnParentChanging
  fullName: NMF.Models.ModelElement.OnParentChanging
- uid: NMF.Models.ModelElement.OnParentChanged*
  commentId: Overload:NMF.Models.ModelElement.OnParentChanged
  name: OnParentChanged
  nameWithType: ModelElement.OnParentChanged
  fullName: NMF.Models.ModelElement.OnParentChanged
- uid: NMF.Models.ModelElement.Parent*
  commentId: Overload:NMF.Models.ModelElement.Parent
  name: Parent
  nameWithType: ModelElement.Parent
  fullName: NMF.Models.ModelElement.Parent
- uid: NMF.Models.IModelElement.Parent
  commentId: P:NMF.Models.IModelElement.Parent
  parent: NMF.Models.IModelElement
  name: Parent
  nameWithType: IModelElement.Parent
  fullName: NMF.Models.IModelElement.Parent
- uid: NMF.Models.ModelElement.Children*
  commentId: Overload:NMF.Models.ModelElement.Children
  name: Children
  nameWithType: ModelElement.Children
  fullName: NMF.Models.ModelElement.Children
- uid: NMF.Models.IModelElement.Children
  commentId: P:NMF.Models.IModelElement.Children
  parent: NMF.Models.IModelElement
  name: Children
  nameWithType: IModelElement.Children
  fullName: NMF.Models.IModelElement.Children
- uid: IEnumerableExpression{NMF.Models.IModelElement}
  commentId: '!:IEnumerableExpression{NMF.Models.IModelElement}'
  definition: IEnumerableExpression`1
  name: IEnumerableExpression<IModelElement>
  nameWithType: IEnumerableExpression<IModelElement>
  fullName: IEnumerableExpression<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerableExpression(Of IModelElement)
  fullName.vb: IEnumerableExpression(Of NMF.Models.IModelElement)
  name.vb: IEnumerableExpression(Of IModelElement)
  spec.csharp:
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerableExpression`1
  isExternal: true
  name: IEnumerableExpression<>
  nameWithType: IEnumerableExpression<>
  fullName: IEnumerableExpression<>
  nameWithType.vb: IEnumerableExpression(Of )
  fullName.vb: IEnumerableExpression(Of )
  name.vb: IEnumerableExpression(Of )
  spec.csharp:
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.RelativeUri*
  commentId: Overload:NMF.Models.ModelElement.RelativeUri
  name: RelativeUri
  nameWithType: ModelElement.RelativeUri
  fullName: NMF.Models.ModelElement.RelativeUri
- uid: NMF.Models.IModelElement.RelativeUri
  commentId: P:NMF.Models.IModelElement.RelativeUri
  parent: NMF.Models.IModelElement
  name: RelativeUri
  nameWithType: IModelElement.RelativeUri
  fullName: NMF.Models.IModelElement.RelativeUri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: NMF.Models.ModelElement.AbsoluteUri*
  commentId: Overload:NMF.Models.ModelElement.AbsoluteUri
  name: AbsoluteUri
  nameWithType: ModelElement.AbsoluteUri
  fullName: NMF.Models.ModelElement.AbsoluteUri
- uid: NMF.Models.IModelElement.AbsoluteUri
  commentId: P:NMF.Models.IModelElement.AbsoluteUri
  parent: NMF.Models.IModelElement
  name: AbsoluteUri
  nameWithType: IModelElement.AbsoluteUri
  fullName: NMF.Models.IModelElement.AbsoluteUri
- uid: NMF.Models.ModelElement.CreateUriWithFragment*
  commentId: Overload:NMF.Models.ModelElement.CreateUriWithFragment
  name: CreateUriWithFragment
  nameWithType: ModelElement.CreateUriWithFragment
  fullName: NMF.Models.ModelElement.CreateUriWithFragment
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier*
  commentId: Overload:NMF.Models.ModelElement.CreateUriFromGlobalIdentifier
  name: CreateUriFromGlobalIdentifier
  nameWithType: ModelElement.CreateUriFromGlobalIdentifier
  fullName: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier
- uid: NMF.Models.ModelElement.PropagateNewId*
  commentId: Overload:NMF.Models.ModelElement.PropagateNewId
  name: PropagateNewId
  nameWithType: ModelElement.PropagateNewId
  fullName: NMF.Models.ModelElement.PropagateNewId
- uid: ValueChangedEventArgs
  isExternal: true
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: ValueChangedEventArgs
- uid: NMF.Models.ModelElement.EnforceModels*
  commentId: Overload:NMF.Models.ModelElement.EnforceModels
  name: EnforceModels
  nameWithType: ModelElement.EnforceModels
  fullName: NMF.Models.ModelElement.EnforceModels
- uid: NMF.Models.ModelElement.PreferIdentifiers*
  commentId: Overload:NMF.Models.ModelElement.PreferIdentifiers
  name: PreferIdentifiers
  nameWithType: ModelElement.PreferIdentifiers
  fullName: NMF.Models.ModelElement.PreferIdentifiers
- uid: NMF.Models.ModelElement.IsIdentified*
  commentId: Overload:NMF.Models.ModelElement.IsIdentified
  name: IsIdentified
  nameWithType: ModelElement.IsIdentified
  fullName: NMF.Models.ModelElement.IsIdentified
- uid: NMF.Models.IModelElement.IsIdentified
  commentId: P:NMF.Models.IModelElement.IsIdentified
  parent: NMF.Models.IModelElement
  name: IsIdentified
  nameWithType: IModelElement.IsIdentified
  fullName: NMF.Models.IModelElement.IsIdentified
- uid: NMF.Models.ModelElement.ToIdentifierString*
  commentId: Overload:NMF.Models.ModelElement.ToIdentifierString
  name: ToIdentifierString
  nameWithType: ModelElement.ToIdentifierString
  fullName: NMF.Models.ModelElement.ToIdentifierString
- uid: NMF.Models.IModelElement.ToIdentifierString
  commentId: M:NMF.Models.IModelElement.ToIdentifierString
  parent: NMF.Models.IModelElement
  name: ToIdentifierString()
  nameWithType: IModelElement.ToIdentifierString()
  fullName: NMF.Models.IModelElement.ToIdentifierString()
  spec.csharp:
  - uid: NMF.Models.IModelElement.ToIdentifierString
    name: ToIdentifierString
    nameWithType: IModelElement.ToIdentifierString
    fullName: NMF.Models.IModelElement.ToIdentifierString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.ToIdentifierString
    name: ToIdentifierString
    nameWithType: IModelElement.ToIdentifierString
    fullName: NMF.Models.IModelElement.ToIdentifierString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.ToString*
  commentId: Overload:NMF.Models.ModelElement.ToString
  name: ToString
  nameWithType: ModelElement.ToString
  fullName: NMF.Models.ModelElement.ToString
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: NMF.Models.ModelElement.KeyChanged
  commentId: E:NMF.Models.ModelElement.KeyChanged
  parent: NMF.Models.ModelElement
  name: KeyChanged
  nameWithType: ModelElement.KeyChanged
  fullName: NMF.Models.ModelElement.KeyChanged
- uid: NMF.Models.ModelElement.OnKeyChanged*
  commentId: Overload:NMF.Models.ModelElement.OnKeyChanged
  name: OnKeyChanged
  nameWithType: ModelElement.OnKeyChanged
  fullName: NMF.Models.ModelElement.OnKeyChanged
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: NMF.Models.ModelElement
  commentId: T:NMF.Models.ModelElement
  parent: NMF.Models
  name: ModelElement
  nameWithType: ModelElement
  fullName: NMF.Models.ModelElement
- uid: NMF.Models.ModelElement.Resolve*
  commentId: Overload:NMF.Models.ModelElement.Resolve
  name: Resolve
  nameWithType: ModelElement.Resolve
  fullName: NMF.Models.ModelElement.Resolve
- uid: NMF.Models.IModelElement.Resolve(System.Uri)
  commentId: M:NMF.Models.IModelElement.Resolve(System.Uri)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: Resolve(Uri)
  nameWithType: IModelElement.Resolve(Uri)
  fullName: NMF.Models.IModelElement.Resolve(System.Uri)
  spec.csharp:
  - uid: NMF.Models.IModelElement.Resolve(System.Uri)
    name: Resolve
    nameWithType: IModelElement.Resolve
    fullName: NMF.Models.IModelElement.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Resolve(System.Uri)
    name: Resolve
    nameWithType: IModelElement.Resolve
    fullName: NMF.Models.IModelElement.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.GetRelativePathForChild*
  commentId: Overload:NMF.Models.ModelElement.GetRelativePathForChild
  name: GetRelativePathForChild
  nameWithType: ModelElement.GetRelativePathForChild
  fullName: NMF.Models.ModelElement.GetRelativePathForChild
- uid: NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild*
  commentId: Overload:NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild
  name: GetRelativePathForNonIdentifiedChild
  nameWithType: ModelElement.GetRelativePathForNonIdentifiedChild
  fullName: NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild
- uid: NMF.Models.ModelElement.GetCompositionName*
  commentId: Overload:NMF.Models.ModelElement.GetCompositionName
  name: GetCompositionName
  nameWithType: ModelElement.GetCompositionName
  fullName: NMF.Models.ModelElement.GetCompositionName
- uid: NMF.Models.ModelElement.GetModelElementForPathSegment*
  commentId: Overload:NMF.Models.ModelElement.GetModelElementForPathSegment
  name: GetModelElementForPathSegment
  nameWithType: ModelElement.GetModelElementForPathSegment
  fullName: NMF.Models.ModelElement.GetModelElementForPathSegment
- uid: NMF.Models.ModelElement.GetModelElementForReference*
  commentId: Overload:NMF.Models.ModelElement.GetModelElementForReference
  name: GetModelElementForReference
  nameWithType: ModelElement.GetModelElementForReference
  fullName: NMF.Models.ModelElement.GetModelElementForReference
- uid: NMF.Models.ModelElement.GetCollectionForFeature*
  commentId: Overload:NMF.Models.ModelElement.GetCollectionForFeature
  name: GetCollectionForFeature
  nameWithType: ModelElement.GetCollectionForFeature
  fullName: NMF.Models.ModelElement.GetCollectionForFeature
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Models.ModelElement.GetAttributeValue*
  commentId: Overload:NMF.Models.ModelElement.GetAttributeValue
  name: GetAttributeValue
  nameWithType: ModelElement.GetAttributeValue
  fullName: NMF.Models.ModelElement.GetAttributeValue
- uid: NMF.Models.ModelElement.SetFeature*
  commentId: Overload:NMF.Models.ModelElement.SetFeature
  name: SetFeature
  nameWithType: ModelElement.SetFeature
  fullName: NMF.Models.ModelElement.SetFeature
- uid: NMF.Models.ModelElement.CallOperation*
  commentId: Overload:NMF.Models.ModelElement.CallOperation
  name: CallOperation
  nameWithType: ModelElement.CallOperation
  fullName: NMF.Models.ModelElement.CallOperation
- uid: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  commentId: M:NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  parent: NMF.Models.IModelElement
  isExternal: true
  name: CallOperation(IOperation, Object[])
  nameWithType: IModelElement.CallOperation(IOperation, Object[])
  fullName: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation, System.Object[])
  nameWithType.vb: IModelElement.CallOperation(IOperation, Object())
  fullName.vb: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation, System.Object())
  name.vb: CallOperation(IOperation, Object())
  spec.csharp:
  - uid: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
    name: CallOperation
    nameWithType: IModelElement.CallOperation
    fullName: NMF.Models.IModelElement.CallOperation
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
    nameWithType: IOperation
    fullName: NMF.Models.Meta.IOperation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
    name: CallOperation
    nameWithType: IModelElement.CallOperation
    fullName: NMF.Models.IModelElement.CallOperation
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
    nameWithType: IOperation
    fullName: NMF.Models.Meta.IOperation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Meta.IOperation
  commentId: T:NMF.Models.Meta.IOperation
  parent: NMF.Models.Meta
  name: IOperation
  nameWithType: IOperation
  fullName: NMF.Models.Meta.IOperation
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NMF.Models.ModelElement.GetExpressionForReference*
  commentId: Overload:NMF.Models.ModelElement.GetExpressionForReference
  name: GetExpressionForReference
  nameWithType: ModelElement.GetExpressionForReference
  fullName: NMF.Models.ModelElement.GetExpressionForReference
- uid: INotifyExpression{NMF.Models.IModelElement}
  commentId: '!:INotifyExpression{NMF.Models.IModelElement}'
  definition: INotifyExpression`1
  name: INotifyExpression<IModelElement>
  nameWithType: INotifyExpression<IModelElement>
  fullName: INotifyExpression<NMF.Models.IModelElement>
  nameWithType.vb: INotifyExpression(Of IModelElement)
  fullName.vb: INotifyExpression(Of NMF.Models.IModelElement)
  name.vb: INotifyExpression(Of IModelElement)
  spec.csharp:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: INotifyExpression`1
  isExternal: true
  name: INotifyExpression<>
  nameWithType: INotifyExpression<>
  fullName: INotifyExpression<>
  nameWithType.vb: INotifyExpression(Of )
  fullName.vb: INotifyExpression(Of )
  name.vb: INotifyExpression(Of )
  spec.csharp:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.GetExpressionForAttribute*
  commentId: Overload:NMF.Models.ModelElement.GetExpressionForAttribute
  name: GetExpressionForAttribute
  nameWithType: ModelElement.GetExpressionForAttribute
  fullName: NMF.Models.ModelElement.GetExpressionForAttribute
- uid: INotifyExpression{System.Object}
  commentId: '!:INotifyExpression{System.Object}'
  definition: INotifyExpression`1
  name: INotifyExpression<Object>
  nameWithType: INotifyExpression<Object>
  fullName: INotifyExpression<System.Object>
  nameWithType.vb: INotifyExpression(Of Object)
  fullName.vb: INotifyExpression(Of System.Object)
  name.vb: INotifyExpression(Of Object)
  spec.csharp:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: INotifyExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.Extensions*
  commentId: Overload:NMF.Models.ModelElement.Extensions
  name: Extensions
  nameWithType: ModelElement.Extensions
  fullName: NMF.Models.ModelElement.Extensions
- uid: NMF.Models.IModelElement.Extensions
  commentId: P:NMF.Models.IModelElement.Extensions
  parent: NMF.Models.IModelElement
  name: Extensions
  nameWithType: IModelElement.Extensions
  fullName: NMF.Models.IModelElement.Extensions
- uid: ICollectionExpression{NMF.Models.ModelElementExtension}
  commentId: '!:ICollectionExpression{NMF.Models.ModelElementExtension}'
  definition: ICollectionExpression`1
  name: ICollectionExpression<ModelElementExtension>
  nameWithType: ICollectionExpression<ModelElementExtension>
  fullName: ICollectionExpression<NMF.Models.ModelElementExtension>
  nameWithType.vb: ICollectionExpression(Of ModelElementExtension)
  fullName.vb: ICollectionExpression(Of NMF.Models.ModelElementExtension)
  name.vb: ICollectionExpression(Of ModelElementExtension)
  spec.csharp:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.ModelElementExtension
    name: ModelElementExtension
    nameWithType: ModelElementExtension
    fullName: NMF.Models.ModelElementExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.ModelElementExtension
    name: ModelElementExtension
    nameWithType: ModelElementExtension
    fullName: NMF.Models.ModelElementExtension
  - name: )
    nameWithType: )
    fullName: )
- uid: ICollectionExpression`1
  isExternal: true
  name: ICollectionExpression<>
  nameWithType: ICollectionExpression<>
  fullName: ICollectionExpression<>
  nameWithType.vb: ICollectionExpression(Of )
  fullName.vb: ICollectionExpression(Of )
  name.vb: ICollectionExpression(Of )
  spec.csharp:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.GetExtension*
  commentId: Overload:NMF.Models.ModelElement.GetExtension
  name: GetExtension
  nameWithType: ModelElement.GetExtension
  fullName: NMF.Models.ModelElement.GetExtension
- uid: NMF.Models.IModelElement.GetExtension``1
  commentId: M:NMF.Models.IModelElement.GetExtension``1
  parent: NMF.Models.IModelElement
  name: GetExtension<T>()
  nameWithType: IModelElement.GetExtension<T>()
  fullName: NMF.Models.IModelElement.GetExtension<T>()
  nameWithType.vb: IModelElement.GetExtension(Of T)()
  fullName.vb: NMF.Models.IModelElement.GetExtension(Of T)()
  name.vb: GetExtension(Of T)()
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetExtension``1
    name: GetExtension<T>
    nameWithType: IModelElement.GetExtension<T>
    fullName: NMF.Models.IModelElement.GetExtension<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetExtension``1
    name: GetExtension(Of T)
    nameWithType: IModelElement.GetExtension(Of T)
    fullName: NMF.Models.IModelElement.GetExtension(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Models.ModelElement.ReferencedElements*
  commentId: Overload:NMF.Models.ModelElement.ReferencedElements
  name: ReferencedElements
  nameWithType: ModelElement.ReferencedElements
  fullName: NMF.Models.ModelElement.ReferencedElements
- uid: NMF.Models.IModelElement.ReferencedElements
  commentId: P:NMF.Models.IModelElement.ReferencedElements
  parent: NMF.Models.IModelElement
  name: ReferencedElements
  nameWithType: IModelElement.ReferencedElements
  fullName: NMF.Models.IModelElement.ReferencedElements
- uid: NMF.Models.ModelElement.OnPropertyChanged*
  commentId: Overload:NMF.Models.ModelElement.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: ModelElement.OnPropertyChanged
  fullName: NMF.Models.ModelElement.OnPropertyChanged
- uid: System.Lazy{NMF.Models.Meta.ITypedElement}
  commentId: T:System.Lazy{NMF.Models.Meta.ITypedElement}
  parent: System
  definition: System.Lazy`1
  name: Lazy<ITypedElement>
  nameWithType: Lazy<ITypedElement>
  fullName: System.Lazy<NMF.Models.Meta.ITypedElement>
  nameWithType.vb: Lazy(Of ITypedElement)
  fullName.vb: System.Lazy(Of NMF.Models.Meta.ITypedElement)
  name.vb: Lazy(Of ITypedElement)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
    nameWithType: ITypedElement
    fullName: NMF.Models.Meta.ITypedElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
    nameWithType: ITypedElement
    fullName: NMF.Models.Meta.ITypedElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Lazy`1
  commentId: T:System.Lazy`1
  isExternal: true
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  nameWithType.vb: Lazy(Of T)
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.OnPropertyChanging*
  commentId: Overload:NMF.Models.ModelElement.OnPropertyChanging
  name: OnPropertyChanging
  nameWithType: ModelElement.OnPropertyChanging
  fullName: NMF.Models.ModelElement.OnPropertyChanging
- uid: NMF.Models.ModelElement.Delete*
  commentId: Overload:NMF.Models.ModelElement.Delete
  name: Delete
  nameWithType: ModelElement.Delete
  fullName: NMF.Models.ModelElement.Delete
- uid: NMF.Models.IModelElement.Delete
  commentId: M:NMF.Models.IModelElement.Delete
  parent: NMF.Models.IModelElement
  name: Delete()
  nameWithType: IModelElement.Delete()
  fullName: NMF.Models.IModelElement.Delete()
  spec.csharp:
  - uid: NMF.Models.IModelElement.Delete
    name: Delete
    nameWithType: IModelElement.Delete
    fullName: NMF.Models.IModelElement.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.Delete
    name: Delete
    nameWithType: IModelElement.Delete
    fullName: NMF.Models.IModelElement.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.OnDeleting*
  commentId: Overload:NMF.Models.ModelElement.OnDeleting
  name: OnDeleting
  nameWithType: ModelElement.OnDeleting
  fullName: NMF.Models.ModelElement.OnDeleting
- uid: NMF.Models.UriChangedEventArgs
  commentId: T:NMF.Models.UriChangedEventArgs
  parent: NMF.Models
  name: UriChangedEventArgs
  nameWithType: UriChangedEventArgs
  fullName: NMF.Models.UriChangedEventArgs
- uid: NMF.Models.ModelElement.OnDeleted*
  commentId: Overload:NMF.Models.ModelElement.OnDeleted
  name: OnDeleted
  nameWithType: ModelElement.OnDeleted
  fullName: NMF.Models.ModelElement.OnDeleted
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: System.ComponentModel.INotifyPropertyChanging.PropertyChanging
  commentId: E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging
  parent: System.ComponentModel.INotifyPropertyChanging
  isExternal: true
  name: PropertyChanging
  nameWithType: INotifyPropertyChanging.PropertyChanging
  fullName: System.ComponentModel.INotifyPropertyChanging.PropertyChanging
- uid: System.ComponentModel.PropertyChangingEventHandler
  commentId: T:System.ComponentModel.PropertyChangingEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangingEventHandler
  nameWithType: PropertyChangingEventHandler
  fullName: System.ComponentModel.PropertyChangingEventHandler
- uid: NMF.Models.IModelElement.Deleted
  commentId: E:NMF.Models.IModelElement.Deleted
  parent: NMF.Models.IModelElement
  name: Deleted
  nameWithType: IModelElement.Deleted
  fullName: NMF.Models.IModelElement.Deleted
- uid: System.EventHandler{NMF.Models.UriChangedEventArgs}
  commentId: T:System.EventHandler{NMF.Models.UriChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<UriChangedEventArgs>
  nameWithType: EventHandler<UriChangedEventArgs>
  fullName: System.EventHandler<NMF.Models.UriChangedEventArgs>
  nameWithType.vb: EventHandler(Of UriChangedEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Models.UriChangedEventArgs)
  name.vb: EventHandler(Of UriChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.UriChangedEventArgs
    name: UriChangedEventArgs
    nameWithType: UriChangedEventArgs
    fullName: NMF.Models.UriChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.UriChangedEventArgs
    name: UriChangedEventArgs
    nameWithType: UriChangedEventArgs
    fullName: NMF.Models.UriChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement.Deleting
  commentId: E:NMF.Models.IModelElement.Deleting
  parent: NMF.Models.IModelElement
  name: Deleting
  nameWithType: IModelElement.Deleting
  fullName: NMF.Models.IModelElement.Deleting
- uid: NMF.Models.ModelElement.GetClass*
  commentId: Overload:NMF.Models.ModelElement.GetClass
  name: GetClass
  nameWithType: ModelElement.GetClass
  fullName: NMF.Models.ModelElement.GetClass
- uid: NMF.Models.IModelElement.GetClass
  commentId: M:NMF.Models.IModelElement.GetClass
  parent: NMF.Models.IModelElement
  name: GetClass()
  nameWithType: IModelElement.GetClass()
  fullName: NMF.Models.IModelElement.GetClass()
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetClass
    name: GetClass
    nameWithType: IModelElement.GetClass
    fullName: NMF.Models.IModelElement.GetClass
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetClass
    name: GetClass
    nameWithType: IModelElement.GetClass
    fullName: NMF.Models.IModelElement.GetClass
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Meta.IClass
  commentId: T:NMF.Models.Meta.IClass
  parent: NMF.Models.Meta
  name: IClass
  nameWithType: IClass
  fullName: NMF.Models.Meta.IClass
- uid: NMF.Models.ModelElement.ClassInstance*
  commentId: Overload:NMF.Models.ModelElement.ClassInstance
  name: ClassInstance
  nameWithType: ModelElement.ClassInstance
  fullName: NMF.Models.ModelElement.ClassInstance
- uid: NMF.Models.Meta.IAttribute
  commentId: T:NMF.Models.Meta.IAttribute
  parent: NMF.Models.Meta
  name: IAttribute
  nameWithType: IAttribute
  fullName: NMF.Models.Meta.IAttribute
- uid: NMF.Models.ModelElement.GetReferencedElement*
  commentId: Overload:NMF.Models.ModelElement.GetReferencedElement
  name: GetReferencedElement
  nameWithType: ModelElement.GetReferencedElement
  fullName: NMF.Models.ModelElement.GetReferencedElement
- uid: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  commentId: M:NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: GetReferencedElement(IReference, Int32)
  nameWithType: IModelElement.GetReferencedElement(IReference, Int32)
  fullName: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference, System.Int32)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
    name: GetReferencedElement
    nameWithType: IModelElement.GetReferencedElement
    fullName: NMF.Models.IModelElement.GetReferencedElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
    name: GetReferencedElement
    nameWithType: IModelElement.GetReferencedElement
    fullName: NMF.Models.IModelElement.GetReferencedElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.SetReferencedElement*
  commentId: Overload:NMF.Models.ModelElement.SetReferencedElement
  name: SetReferencedElement
  nameWithType: ModelElement.SetReferencedElement
  fullName: NMF.Models.ModelElement.SetReferencedElement
- uid: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  commentId: M:NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  parent: NMF.Models.IModelElement
  name: SetReferencedElement(IReference, IModelElement)
  nameWithType: IModelElement.SetReferencedElement(IReference, IModelElement)
  fullName: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference, NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
    name: SetReferencedElement
    nameWithType: IModelElement.SetReferencedElement
    fullName: NMF.Models.IModelElement.SetReferencedElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
    name: SetReferencedElement
    nameWithType: IModelElement.SetReferencedElement
    fullName: NMF.Models.IModelElement.SetReferencedElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.GetReferencedElements*
  commentId: Overload:NMF.Models.ModelElement.GetReferencedElements
  name: GetReferencedElements
  nameWithType: ModelElement.GetReferencedElements
  fullName: NMF.Models.ModelElement.GetReferencedElements
- uid: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  parent: NMF.Models.IModelElement
  name: GetReferencedElements(IReference)
  nameWithType: IModelElement.GetReferencedElements(IReference)
  fullName: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
    name: GetReferencedElements
    nameWithType: IModelElement.GetReferencedElements
    fullName: NMF.Models.IModelElement.GetReferencedElements
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
    name: GetReferencedElements
    nameWithType: IModelElement.GetReferencedElements
    fullName: NMF.Models.IModelElement.GetReferencedElements
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
    nameWithType: IReference
    fullName: NMF.Models.Meta.IReference
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  commentId: M:NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: GetAttributeValue(IAttribute, Int32)
  nameWithType: IModelElement.GetAttributeValue(IAttribute, Int32)
  fullName: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute, System.Int32)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
    name: GetAttributeValue
    nameWithType: IModelElement.GetAttributeValue
    fullName: NMF.Models.IModelElement.GetAttributeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
    nameWithType: IAttribute
    fullName: NMF.Models.Meta.IAttribute
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
    name: GetAttributeValue
    nameWithType: IModelElement.GetAttributeValue
    fullName: NMF.Models.IModelElement.GetAttributeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
    nameWithType: IAttribute
    fullName: NMF.Models.Meta.IAttribute
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.SetAttributeValue*
  commentId: Overload:NMF.Models.ModelElement.SetAttributeValue
  name: SetAttributeValue
  nameWithType: ModelElement.SetAttributeValue
  fullName: NMF.Models.ModelElement.SetAttributeValue
- uid: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  commentId: M:NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  parent: NMF.Models.IModelElement
  isExternal: true
  name: SetAttributeValue(IAttribute, Object)
  nameWithType: IModelElement.SetAttributeValue(IAttribute, Object)
  fullName: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute, System.Object)
  spec.csharp:
  - uid: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
    name: SetAttributeValue
    nameWithType: IModelElement.SetAttributeValue
    fullName: NMF.Models.IModelElement.SetAttributeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
    nameWithType: IAttribute
    fullName: NMF.Models.Meta.IAttribute
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
    name: SetAttributeValue
    nameWithType: IModelElement.SetAttributeValue
    fullName: NMF.Models.IModelElement.SetAttributeValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
    nameWithType: IAttribute
    fullName: NMF.Models.Meta.IAttribute
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.GetAttributeValues*
  commentId: Overload:NMF.Models.ModelElement.GetAttributeValues
  name: GetAttributeValues
  nameWithType: ModelElement.GetAttributeValues
  fullName: NMF.Models.ModelElement.GetAttributeValues
- uid: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  parent: NMF.Models.IModelElement
  name: GetAttributeValues(IAttribute)
  nameWithType: IModelElement.GetAttributeValues(IAttribute)
  fullName: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
    name: GetAttributeValues
    nameWithType: IModelElement.GetAttributeValues
    fullName: NMF.Models.IModelElement.GetAttributeValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
    nameWithType: IAttribute
    fullName: NMF.Models.Meta.IAttribute
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
    name: GetAttributeValues
    nameWithType: IModelElement.GetAttributeValues
    fullName: NMF.Models.IModelElement.GetAttributeValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
    nameWithType: IAttribute
    fullName: NMF.Models.Meta.IAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.ModelElement.OnCollectionChanged*
  commentId: Overload:NMF.Models.ModelElement.OnCollectionChanged
  name: OnCollectionChanged
  nameWithType: ModelElement.OnCollectionChanged
  fullName: NMF.Models.ModelElement.OnCollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventArgs
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: NMF.Models.ModelElement.OnCollectionChanging*
  commentId: Overload:NMF.Models.ModelElement.OnCollectionChanging
  name: OnCollectionChanging
  nameWithType: ModelElement.OnCollectionChanging
  fullName: NMF.Models.ModelElement.OnCollectionChanging
- uid: NMF.Models.ModelElement.OnBubbledChange*
  commentId: Overload:NMF.Models.ModelElement.OnBubbledChange
  name: OnBubbledChange
  nameWithType: ModelElement.OnBubbledChange
  fullName: NMF.Models.ModelElement.OnBubbledChange
- uid: NMF.Models.BubbledChangeEventArgs
  commentId: T:NMF.Models.BubbledChangeEventArgs
  parent: NMF.Models
  name: BubbledChangeEventArgs
  nameWithType: BubbledChangeEventArgs
  fullName: NMF.Models.BubbledChangeEventArgs
- uid: NMF.Models.IModelElement.BubbledChange
  commentId: E:NMF.Models.IModelElement.BubbledChange
  parent: NMF.Models.IModelElement
  name: BubbledChange
  nameWithType: IModelElement.BubbledChange
  fullName: NMF.Models.IModelElement.BubbledChange
- uid: System.EventHandler{NMF.Models.BubbledChangeEventArgs}
  commentId: T:System.EventHandler{NMF.Models.BubbledChangeEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<BubbledChangeEventArgs>
  nameWithType: EventHandler<BubbledChangeEventArgs>
  fullName: System.EventHandler<NMF.Models.BubbledChangeEventArgs>
  nameWithType.vb: EventHandler(Of BubbledChangeEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Models.BubbledChangeEventArgs)
  name.vb: EventHandler(Of BubbledChangeEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.BubbledChangeEventArgs
    name: BubbledChangeEventArgs
    nameWithType: BubbledChangeEventArgs
    fullName: NMF.Models.BubbledChangeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.BubbledChangeEventArgs
    name: BubbledChangeEventArgs
    nameWithType: BubbledChangeEventArgs
    fullName: NMF.Models.BubbledChangeEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement.ParentChanged
  commentId: E:NMF.Models.IModelElement.ParentChanged
  parent: NMF.Models.IModelElement
  name: ParentChanged
  nameWithType: IModelElement.ParentChanged
  fullName: NMF.Models.IModelElement.ParentChanged
- uid: System.EventHandler{ValueChangedEventArgs}
  commentId: T:System.EventHandler{ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
