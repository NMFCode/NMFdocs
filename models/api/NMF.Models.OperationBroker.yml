### YamlMime:ManagedReference
items:
- uid: NMF.Models.OperationBroker
  commentId: T:NMF.Models.OperationBroker
  id: OperationBroker
  parent: NMF.Models
  children:
  - NMF.Models.OperationBroker.GetRegisteredDelegate``1(NMF.Models.Meta.IOperation)
  - NMF.Models.OperationBroker.GetRegisteredDelegate``1(System.Lazy{NMF.Models.Meta.IOperation})
  - NMF.Models.OperationBroker.Instance
  - NMF.Models.OperationBroker.RegisterDelegate(NMF.Models.Meta.IOperation,System.Object)
  - NMF.Models.OperationBroker.RegisterDelegate(System.Lazy{NMF.Models.Meta.IOperation},System.Object)
  langs:
  - csharp
  - vb
  name: OperationBroker
  nameWithType: OperationBroker
  fullName: NMF.Models.OperationBroker
  type: Class
  source:
    remote:
      path: Models/Models/OperationBroker.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OperationBroker
    path: src/Models/Models/OperationBroker.cs
    startLine: 8
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public class OperationBroker
    content.vb: Public Class OperationBroker
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Models.OperationBroker.Instance
  commentId: P:NMF.Models.OperationBroker.Instance
  id: Instance
  parent: NMF.Models.OperationBroker
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: OperationBroker.Instance
  fullName: NMF.Models.OperationBroker.Instance
  type: Property
  source:
    remote:
      path: Models/Models/OperationBroker.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Instance
    path: src/Models/Models/OperationBroker.cs
    startLine: 14
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public static OperationBroker Instance { get; }
    parameters: []
    return:
      type: NMF.Models.OperationBroker
    content.vb: Public Shared ReadOnly Property Instance As OperationBroker
  overload: NMF.Models.OperationBroker.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NMF.Models.OperationBroker.GetRegisteredDelegate``1(NMF.Models.Meta.IOperation)
  commentId: M:NMF.Models.OperationBroker.GetRegisteredDelegate``1(NMF.Models.Meta.IOperation)
  id: GetRegisteredDelegate``1(NMF.Models.Meta.IOperation)
  parent: NMF.Models.OperationBroker
  langs:
  - csharp
  - vb
  name: GetRegisteredDelegate<TDelegate>(IOperation)
  nameWithType: OperationBroker.GetRegisteredDelegate<TDelegate>(IOperation)
  fullName: NMF.Models.OperationBroker.GetRegisteredDelegate<TDelegate>(NMF.Models.Meta.IOperation)
  type: Method
  source:
    remote:
      path: Models/Models/OperationBroker.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRegisteredDelegate
    path: src/Models/Models/OperationBroker.cs
    startLine: 24
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: >-
      public TDelegate GetRegisteredDelegate<TDelegate>(IOperation op)

          where TDelegate : class
    parameters:
    - id: op
      type: NMF.Models.Meta.IOperation
    typeParameters:
    - id: TDelegate
    return:
      type: '{TDelegate}'
    content.vb: Public Function GetRegisteredDelegate(Of TDelegate As Class)(op As IOperation) As TDelegate
  overload: NMF.Models.OperationBroker.GetRegisteredDelegate*
  nameWithType.vb: OperationBroker.GetRegisteredDelegate(Of TDelegate)(IOperation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.OperationBroker.GetRegisteredDelegate(Of TDelegate)(NMF.Models.Meta.IOperation)
  name.vb: GetRegisteredDelegate(Of TDelegate)(IOperation)
- uid: NMF.Models.OperationBroker.GetRegisteredDelegate``1(System.Lazy{NMF.Models.Meta.IOperation})
  commentId: M:NMF.Models.OperationBroker.GetRegisteredDelegate``1(System.Lazy{NMF.Models.Meta.IOperation})
  id: GetRegisteredDelegate``1(System.Lazy{NMF.Models.Meta.IOperation})
  parent: NMF.Models.OperationBroker
  langs:
  - csharp
  - vb
  name: GetRegisteredDelegate<TDelegate>(Lazy<IOperation>)
  nameWithType: OperationBroker.GetRegisteredDelegate<TDelegate>(Lazy<IOperation>)
  fullName: NMF.Models.OperationBroker.GetRegisteredDelegate<TDelegate>(System.Lazy<NMF.Models.Meta.IOperation>)
  type: Method
  source:
    remote:
      path: Models/Models/OperationBroker.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRegisteredDelegate
    path: src/Models/Models/OperationBroker.cs
    startLine: 46
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: >-
      public TDelegate GetRegisteredDelegate<TDelegate>(Lazy<IOperation> op)

          where TDelegate : class
    parameters:
    - id: op
      type: System.Lazy{NMF.Models.Meta.IOperation}
    typeParameters:
    - id: TDelegate
    return:
      type: '{TDelegate}'
    content.vb: Public Function GetRegisteredDelegate(Of TDelegate As Class)(op As Lazy(Of IOperation)) As TDelegate
  overload: NMF.Models.OperationBroker.GetRegisteredDelegate*
  nameWithType.vb: OperationBroker.GetRegisteredDelegate(Of TDelegate)(Lazy(Of IOperation))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.OperationBroker.GetRegisteredDelegate(Of TDelegate)(System.Lazy(Of NMF.Models.Meta.IOperation))
  name.vb: GetRegisteredDelegate(Of TDelegate)(Lazy(Of IOperation))
- uid: NMF.Models.OperationBroker.RegisterDelegate(NMF.Models.Meta.IOperation,System.Object)
  commentId: M:NMF.Models.OperationBroker.RegisterDelegate(NMF.Models.Meta.IOperation,System.Object)
  id: RegisterDelegate(NMF.Models.Meta.IOperation,System.Object)
  parent: NMF.Models.OperationBroker
  langs:
  - csharp
  - vb
  name: RegisterDelegate(IOperation, Object)
  nameWithType: OperationBroker.RegisterDelegate(IOperation, Object)
  fullName: NMF.Models.OperationBroker.RegisterDelegate(NMF.Models.Meta.IOperation, System.Object)
  type: Method
  source:
    remote:
      path: Models/Models/OperationBroker.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterDelegate
    path: src/Models/Models/OperationBroker.cs
    startLine: 59
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public void RegisterDelegate(IOperation op, object delegate)
    parameters:
    - id: op
      type: NMF.Models.Meta.IOperation
    - id: delegate
      type: System.Object
    content.vb: Public Sub RegisterDelegate(op As IOperation, delegate As Object)
  overload: NMF.Models.OperationBroker.RegisterDelegate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.OperationBroker.RegisterDelegate(System.Lazy{NMF.Models.Meta.IOperation},System.Object)
  commentId: M:NMF.Models.OperationBroker.RegisterDelegate(System.Lazy{NMF.Models.Meta.IOperation},System.Object)
  id: RegisterDelegate(System.Lazy{NMF.Models.Meta.IOperation},System.Object)
  parent: NMF.Models.OperationBroker
  langs:
  - csharp
  - vb
  name: RegisterDelegate(Lazy<IOperation>, Object)
  nameWithType: OperationBroker.RegisterDelegate(Lazy<IOperation>, Object)
  fullName: NMF.Models.OperationBroker.RegisterDelegate(System.Lazy<NMF.Models.Meta.IOperation>, System.Object)
  type: Method
  source:
    remote:
      path: Models/Models/OperationBroker.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterDelegate
    path: src/Models/Models/OperationBroker.cs
    startLine: 71
  assemblies:
  - NMF.Models
  namespace: NMF.Models
  syntax:
    content: public void RegisterDelegate(Lazy<IOperation> op, object delegate)
    parameters:
    - id: op
      type: System.Lazy{NMF.Models.Meta.IOperation}
    - id: delegate
      type: System.Object
    content.vb: Public Sub RegisterDelegate(op As Lazy(Of IOperation), delegate As Object)
  overload: NMF.Models.OperationBroker.RegisterDelegate*
  nameWithType.vb: OperationBroker.RegisterDelegate(Lazy(Of IOperation), Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Models.OperationBroker.RegisterDelegate(System.Lazy(Of NMF.Models.Meta.IOperation), System.Object)
  name.vb: RegisterDelegate(Lazy(Of IOperation), Object)
references:
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models.OperationBroker.Instance*
  commentId: Overload:NMF.Models.OperationBroker.Instance
  name: Instance
  nameWithType: OperationBroker.Instance
  fullName: NMF.Models.OperationBroker.Instance
- uid: NMF.Models.OperationBroker
  commentId: T:NMF.Models.OperationBroker
  parent: NMF.Models
  name: OperationBroker
  nameWithType: OperationBroker
  fullName: NMF.Models.OperationBroker
- uid: NMF.Models.OperationBroker.GetRegisteredDelegate*
  commentId: Overload:NMF.Models.OperationBroker.GetRegisteredDelegate
  name: GetRegisteredDelegate
  nameWithType: OperationBroker.GetRegisteredDelegate
  fullName: NMF.Models.OperationBroker.GetRegisteredDelegate
- uid: NMF.Models.Meta.IOperation
  commentId: T:NMF.Models.Meta.IOperation
  parent: NMF.Models.Meta
  name: IOperation
  nameWithType: IOperation
  fullName: NMF.Models.Meta.IOperation
- uid: '{TDelegate}'
  commentId: '!:TDelegate'
  definition: TDelegate
  name: TDelegate
  nameWithType: TDelegate
  fullName: TDelegate
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: TDelegate
  name: TDelegate
  nameWithType: TDelegate
  fullName: TDelegate
- uid: System.Lazy{NMF.Models.Meta.IOperation}
  commentId: T:System.Lazy{NMF.Models.Meta.IOperation}
  parent: System
  definition: System.Lazy`1
  name: Lazy<IOperation>
  nameWithType: Lazy<IOperation>
  fullName: System.Lazy<NMF.Models.Meta.IOperation>
  nameWithType.vb: Lazy(Of IOperation)
  fullName.vb: System.Lazy(Of NMF.Models.Meta.IOperation)
  name.vb: Lazy(Of IOperation)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
    nameWithType: IOperation
    fullName: NMF.Models.Meta.IOperation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
    nameWithType: IOperation
    fullName: NMF.Models.Meta.IOperation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Lazy`1
  commentId: T:System.Lazy`1
  isExternal: true
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  nameWithType.vb: Lazy(Of T)
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.OperationBroker.RegisterDelegate*
  commentId: Overload:NMF.Models.OperationBroker.RegisterDelegate
  name: RegisterDelegate
  nameWithType: OperationBroker.RegisterDelegate
  fullName: NMF.Models.OperationBroker.RegisterDelegate
