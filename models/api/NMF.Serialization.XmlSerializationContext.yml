### YamlMime:ManagedReference
items:
- uid: NMF.Serialization.XmlSerializationContext
  commentId: T:NMF.Serialization.XmlSerializationContext
  id: XmlSerializationContext
  parent: NMF.Serialization
  children:
  - NMF.Serialization.XmlSerializationContext.#ctor(System.Object)
  - NMF.Serialization.XmlSerializationContext.BlockOpposite(System.Object,NMF.Serialization.IPropertySerializationInfo)
  - NMF.Serialization.XmlSerializationContext.Cleanup
  - NMF.Serialization.XmlSerializationContext.ContainsId(System.String,System.Type)
  - NMF.Serialization.XmlSerializationContext.IsOppositeSet(System.Object,NMF.Serialization.IPropertySerializationInfo)
  - NMF.Serialization.XmlSerializationContext.OnNameClash(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  - NMF.Serialization.XmlSerializationContext.RegisterId(System.String,System.Object)
  - NMF.Serialization.XmlSerializationContext.Resolve(System.String,System.Type,System.Type,System.Boolean,System.Boolean,System.Object)
  - NMF.Serialization.XmlSerializationContext.Root
  langs:
  - csharp
  - vb
  name: XmlSerializationContext
  nameWithType: XmlSerializationContext
  fullName: NMF.Serialization.XmlSerializationContext
  type: Class
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: XmlSerializationContext
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 7
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public class XmlSerializationContext
    content.vb: Public Class XmlSerializationContext
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Serialization.Xmi.XmiSerializationContext
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Serialization.XmlSerializationContext.#ctor(System.Object)
  commentId: M:NMF.Serialization.XmlSerializationContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: XmlSerializationContext(Object)
  nameWithType: XmlSerializationContext.XmlSerializationContext(Object)
  fullName: NMF.Serialization.XmlSerializationContext.XmlSerializationContext(System.Object)
  type: Constructor
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 35
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public XmlSerializationContext(object root)
    parameters:
    - id: root
      type: System.Object
    content.vb: Public Sub New(root As Object)
  overload: NMF.Serialization.XmlSerializationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Serialization.XmlSerializationContext.RegisterId(System.String,System.Object)
  commentId: M:NMF.Serialization.XmlSerializationContext.RegisterId(System.String,System.Object)
  id: RegisterId(System.String,System.Object)
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: RegisterId(String, Object)
  nameWithType: XmlSerializationContext.RegisterId(String, Object)
  fullName: NMF.Serialization.XmlSerializationContext.RegisterId(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterId
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 50
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public virtual void RegisterId(string id, object value)
    parameters:
    - id: id
      type: System.String
    - id: value
      type: System.Object
    content.vb: Public Overridable Sub RegisterId(id As String, value As Object)
  overload: NMF.Serialization.XmlSerializationContext.RegisterId*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Serialization.XmlSerializationContext.Cleanup
  commentId: M:NMF.Serialization.XmlSerializationContext.Cleanup
  id: Cleanup
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: Cleanup()
  nameWithType: XmlSerializationContext.Cleanup()
  fullName: NMF.Serialization.XmlSerializationContext.Cleanup()
  type: Method
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Cleanup
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 59
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public virtual void Cleanup()
    content.vb: Public Overridable Sub Cleanup
  overload: NMF.Serialization.XmlSerializationContext.Cleanup*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Serialization.XmlSerializationContext.ContainsId(System.String,System.Type)
  commentId: M:NMF.Serialization.XmlSerializationContext.ContainsId(System.String,System.Type)
  id: ContainsId(System.String,System.Type)
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: ContainsId(String, Type)
  nameWithType: XmlSerializationContext.ContainsId(String, Type)
  fullName: NMF.Serialization.XmlSerializationContext.ContainsId(System.String, System.Type)
  type: Method
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ContainsId
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 109
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public virtual bool ContainsId(string id, Type type)
    parameters:
    - id: id
      type: System.String
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ContainsId(id As String, type As Type) As Boolean
  overload: NMF.Serialization.XmlSerializationContext.ContainsId*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Serialization.XmlSerializationContext.OnNameClash(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  commentId: M:NMF.Serialization.XmlSerializationContext.OnNameClash(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  id: OnNameClash(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: OnNameClash(String, Type, IEnumerable<Object>, Object)
  nameWithType: XmlSerializationContext.OnNameClash(String, Type, IEnumerable<Object>, Object)
  fullName: NMF.Serialization.XmlSerializationContext.OnNameClash(System.String, System.Type, System.Collections.Generic.IEnumerable<System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnNameClash
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 131
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: protected virtual object OnNameClash(string id, Type type, IEnumerable<object> candidates, object source)
    parameters:
    - id: id
      type: System.String
    - id: type
      type: System.Type
    - id: candidates
      type: System.Collections.Generic.IEnumerable{System.Object}
    - id: source
      type: System.Object
    return:
      type: System.Object
    content.vb: Protected Overridable Function OnNameClash(id As String, type As Type, candidates As IEnumerable(Of Object), source As Object) As Object
  overload: NMF.Serialization.XmlSerializationContext.OnNameClash*
  nameWithType.vb: XmlSerializationContext.OnNameClash(String, Type, IEnumerable(Of Object), Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Serialization.XmlSerializationContext.OnNameClash(System.String, System.Type, System.Collections.Generic.IEnumerable(Of System.Object), System.Object)
  name.vb: OnNameClash(String, Type, IEnumerable(Of Object), Object)
- uid: NMF.Serialization.XmlSerializationContext.Resolve(System.String,System.Type,System.Type,System.Boolean,System.Boolean,System.Object)
  commentId: M:NMF.Serialization.XmlSerializationContext.Resolve(System.String,System.Type,System.Type,System.Boolean,System.Boolean,System.Object)
  id: Resolve(System.String,System.Type,System.Type,System.Boolean,System.Boolean,System.Object)
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: Resolve(String, Type, Type, Boolean, Boolean, Object)
  nameWithType: XmlSerializationContext.Resolve(String, Type, Type, Boolean, Boolean, Object)
  fullName: NMF.Serialization.XmlSerializationContext.Resolve(System.String, System.Type, System.Type, System.Boolean, System.Boolean, System.Object)
  type: Method
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Resolve
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 136
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public virtual object Resolve(string id, Type type, Type minType = null, bool exactType = false, bool failOnConflict = true, object source = null)
    parameters:
    - id: id
      type: System.String
    - id: type
      type: System.Type
    - id: minType
      type: System.Type
    - id: exactType
      type: System.Boolean
    - id: failOnConflict
      type: System.Boolean
    - id: source
      type: System.Object
    return:
      type: System.Object
    content.vb: Public Overridable Function Resolve(id As String, type As Type, minType As Type = Nothing, exactType As Boolean = False, failOnConflict As Boolean = True, source As Object = Nothing) As Object
  overload: NMF.Serialization.XmlSerializationContext.Resolve*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Serialization.XmlSerializationContext.IsOppositeSet(System.Object,NMF.Serialization.IPropertySerializationInfo)
  commentId: M:NMF.Serialization.XmlSerializationContext.IsOppositeSet(System.Object,NMF.Serialization.IPropertySerializationInfo)
  id: IsOppositeSet(System.Object,NMF.Serialization.IPropertySerializationInfo)
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: IsOppositeSet(Object, IPropertySerializationInfo)
  nameWithType: XmlSerializationContext.IsOppositeSet(Object, IPropertySerializationInfo)
  fullName: NMF.Serialization.XmlSerializationContext.IsOppositeSet(System.Object, NMF.Serialization.IPropertySerializationInfo)
  type: Method
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsOppositeSet
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 225
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public bool IsOppositeSet(object instance, IPropertySerializationInfo property)
    parameters:
    - id: instance
      type: System.Object
    - id: property
      type: NMF.Serialization.IPropertySerializationInfo
    return:
      type: System.Boolean
    content.vb: Public Function IsOppositeSet(instance As Object, property As IPropertySerializationInfo) As Boolean
  overload: NMF.Serialization.XmlSerializationContext.IsOppositeSet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Serialization.XmlSerializationContext.BlockOpposite(System.Object,NMF.Serialization.IPropertySerializationInfo)
  commentId: M:NMF.Serialization.XmlSerializationContext.BlockOpposite(System.Object,NMF.Serialization.IPropertySerializationInfo)
  id: BlockOpposite(System.Object,NMF.Serialization.IPropertySerializationInfo)
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: BlockOpposite(Object, IPropertySerializationInfo)
  nameWithType: XmlSerializationContext.BlockOpposite(Object, IPropertySerializationInfo)
  fullName: NMF.Serialization.XmlSerializationContext.BlockOpposite(System.Object, NMF.Serialization.IPropertySerializationInfo)
  type: Method
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: BlockOpposite
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 232
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public void BlockOpposite(object value, IPropertySerializationInfo property)
    parameters:
    - id: value
      type: System.Object
    - id: property
      type: NMF.Serialization.IPropertySerializationInfo
    content.vb: Public Sub BlockOpposite(value As Object, property As IPropertySerializationInfo)
  overload: NMF.Serialization.XmlSerializationContext.BlockOpposite*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Serialization.XmlSerializationContext.Root
  commentId: P:NMF.Serialization.XmlSerializationContext.Root
  id: Root
  parent: NMF.Serialization.XmlSerializationContext
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: XmlSerializationContext.Root
  fullName: NMF.Serialization.XmlSerializationContext.Root
  type: Property
  source:
    remote:
      path: Models/Serialization/XML/XmlSerializationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Root
    path: src/Models/Serialization/XML/XmlSerializationContext.cs
    startLine: 239
  assemblies:
  - NMF.Serialization
  namespace: NMF.Serialization
  syntax:
    content: public object Root { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Root As Object
  overload: NMF.Serialization.XmlSerializationContext.Root*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: NMF.Serialization
  commentId: N:NMF.Serialization
  name: NMF.Serialization
  nameWithType: NMF.Serialization
  fullName: NMF.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Serialization.XmlSerializationContext.#ctor*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.#ctor
  name: XmlSerializationContext
  nameWithType: XmlSerializationContext.XmlSerializationContext
  fullName: NMF.Serialization.XmlSerializationContext.XmlSerializationContext
- uid: NMF.Serialization.XmlSerializationContext.RegisterId*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.RegisterId
  name: RegisterId
  nameWithType: XmlSerializationContext.RegisterId
  fullName: NMF.Serialization.XmlSerializationContext.RegisterId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Serialization.XmlSerializationContext.Cleanup*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.Cleanup
  name: Cleanup
  nameWithType: XmlSerializationContext.Cleanup
  fullName: NMF.Serialization.XmlSerializationContext.Cleanup
- uid: NMF.Serialization.XmlSerializationContext.ContainsId*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.ContainsId
  name: ContainsId
  nameWithType: XmlSerializationContext.ContainsId
  fullName: NMF.Serialization.XmlSerializationContext.ContainsId
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Serialization.XmlSerializationContext.OnNameClash*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.OnNameClash
  name: OnNameClash
  nameWithType: XmlSerializationContext.OnNameClash
  fullName: NMF.Serialization.XmlSerializationContext.OnNameClash
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Serialization.XmlSerializationContext.Resolve*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.Resolve
  name: Resolve
  nameWithType: XmlSerializationContext.Resolve
  fullName: NMF.Serialization.XmlSerializationContext.Resolve
- uid: NMF.Serialization.XmlSerializationContext.IsOppositeSet*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.IsOppositeSet
  name: IsOppositeSet
  nameWithType: XmlSerializationContext.IsOppositeSet
  fullName: NMF.Serialization.XmlSerializationContext.IsOppositeSet
- uid: NMF.Serialization.IPropertySerializationInfo
  commentId: T:NMF.Serialization.IPropertySerializationInfo
  parent: NMF.Serialization
  name: IPropertySerializationInfo
  nameWithType: IPropertySerializationInfo
  fullName: NMF.Serialization.IPropertySerializationInfo
- uid: NMF.Serialization.XmlSerializationContext.BlockOpposite*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.BlockOpposite
  name: BlockOpposite
  nameWithType: XmlSerializationContext.BlockOpposite
  fullName: NMF.Serialization.XmlSerializationContext.BlockOpposite
- uid: NMF.Serialization.XmlSerializationContext.Root*
  commentId: Overload:NMF.Serialization.XmlSerializationContext.Root
  name: Root
  nameWithType: XmlSerializationContext.Root
  fullName: NMF.Serialization.XmlSerializationContext.Root
