### YamlMime:ManagedReference
items:
- uid: NMF.Models.Collections.ReferenceCollection
  commentId: T:NMF.Models.Collections.ReferenceCollection
  id: ReferenceCollection
  parent: NMF.Models.Collections
  children:
  - NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  - NMF.Models.Collections.ReferenceCollection.AsNotifiable
  - NMF.Models.Collections.ReferenceCollection.AttachCore
  - NMF.Models.Collections.ReferenceCollection.Clear
  - NMF.Models.Collections.ReferenceCollection.CollectionChanged
  - NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  - NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  - NMF.Models.Collections.ReferenceCollection.Count
  - NMF.Models.Collections.ReferenceCollection.DetachCore
  - NMF.Models.Collections.ReferenceCollection.Dispose
  - NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  - NMF.Models.Collections.ReferenceCollection.GetEnumerator
  - NMF.Models.Collections.ReferenceCollection.IsReadOnly
  - NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression#AsNotifiable
  - NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression{NMF#Models#IModelElement}#AsNotifiable
  - NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,NMF.Expressions.ValueChangedEventArgs)
  - NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  - NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ReferenceCollection
  nameWithType: ReferenceCollection
  fullName: NMF.Models.Collections.ReferenceCollection
  type: Class
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReferenceCollection
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 11
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: 'public abstract class ReferenceCollection : ICollectionExpression<IModelElement>, IEnumerableExpression<IModelElement>, IEnumerableExpression, ICollection<IModelElement>, IEnumerable<IModelElement>, IEnumerable, INotifyCollectionChanged, IDisposable'
    content.vb: >-
      Public MustInherit Class ReferenceCollection
          Implements ICollectionExpression(Of IModelElement), IEnumerableExpression(Of IModelElement), IEnumerableExpression, ICollection(Of IModelElement), IEnumerable(Of IModelElement), IEnumerable, INotifyCollectionChanged, IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.IncrementalizationConfiguration.Configuration.ConfigurationChildrenCollection
  - NMF.Expressions.IncrementalizationConfiguration.Configuration.ConfigurationReferencedElementsCollection
  - NMF.Interop.Ecore.EAnnotation.EAnnotationChildrenCollection
  - NMF.Interop.Ecore.EAnnotation.EAnnotationReferencedElementsCollection
  - NMF.Interop.Ecore.EClass.EClassChildrenCollection
  - NMF.Interop.Ecore.EClass.EClassReferencedElementsCollection
  - NMF.Interop.Ecore.EClassifier.EClassifierChildrenCollection
  - NMF.Interop.Ecore.EClassifier.EClassifierReferencedElementsCollection
  - NMF.Interop.Ecore.EEnum.EEnumChildrenCollection
  - NMF.Interop.Ecore.EEnum.EEnumReferencedElementsCollection
  - NMF.Interop.Ecore.EEnumLiteral.EEnumLiteralReferencedElementsCollection
  - NMF.Interop.Ecore.EFactory.EFactoryReferencedElementsCollection
  - NMF.Interop.Ecore.EGenericType.EGenericTypeChildrenCollection
  - NMF.Interop.Ecore.EGenericType.EGenericTypeReferencedElementsCollection
  - NMF.Interop.Ecore.EModelElement.EModelElementChildrenCollection
  - NMF.Interop.Ecore.EModelElement.EModelElementReferencedElementsCollection
  - NMF.Interop.Ecore.EOperation.EOperationChildrenCollection
  - NMF.Interop.Ecore.EOperation.EOperationReferencedElementsCollection
  - NMF.Interop.Ecore.EPackage.EPackageChildrenCollection
  - NMF.Interop.Ecore.EPackage.EPackageReferencedElementsCollection
  - NMF.Interop.Ecore.EParameter.EParameterReferencedElementsCollection
  - NMF.Interop.Ecore.EReference.EReferenceReferencedElementsCollection
  - NMF.Interop.Ecore.EStructuralFeature.EStructuralFeatureReferencedElementsCollection
  - NMF.Interop.Ecore.ETypedElement.ETypedElementChildrenCollection
  - NMF.Interop.Ecore.ETypedElement.ETypedElementReferencedElementsCollection
  - NMF.Interop.Ecore.ETypeParameter.ETypeParameterChildrenCollection
  - NMF.Interop.Ecore.ETypeParameter.ETypeParameterReferencedElementsCollection
  - NMF.Interop.Layout.ReferenceLayoutInformation.ReferenceLayoutInformationReferencedElementsCollection
  - NMF.Interop.Type.SimpleAnyType.SimpleAnyTypeReferencedElementsCollection
  - NMF.Interop.Type.XMLTypeDocumentRoot.XMLTypeDocumentRootChildrenCollection
  - NMF.Interop.Type.XMLTypeDocumentRoot.XMLTypeDocumentRootReferencedElementsCollection
  - NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection
  - NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection
  - NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection
  - NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection
  - NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection
  - NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection
  - NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection
  - NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection
  - NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection
  - NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection
  - NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection
  - NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection
  - NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection
  - NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection
  - NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection
  - NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection
  - NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection
  - NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection
  - NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection
  - NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection
  - NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection
  - NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection
  - NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection
  - NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection
  - NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection
  - NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection
  - NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection
  - NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection
  - NMF.Models.Meta.Class.ClassChildrenCollection
  - NMF.Models.Meta.Class.ClassReferencedElementsCollection
  - NMF.Models.Meta.Enumeration.EnumerationChildrenCollection
  - NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection
  - NMF.Models.Meta.Event.EventReferencedElementsCollection
  - NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection
  - NMF.Models.Meta.Literal.LiteralReferencedElementsCollection
  - NMF.Models.Meta.Namespace.NamespaceChildrenCollection
  - NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection
  - NMF.Models.Meta.Operation.OperationChildrenCollection
  - NMF.Models.Meta.Operation.OperationReferencedElementsCollection
  - NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection
  - NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection
  - NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection
  - NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection
  - NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection
  - NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection
  - NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection
  - NMF.Models.Meta.Type.TypeReferencedElementsCollection
  - NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection
  - NMF.Models.Model.ModelChildrenCollection
  - NMF.Models.Model.ModelReferencedElementsCollection
  implements:
  - NMF.Expressions.ICollectionExpression{NMF.Models.IModelElement}
  - NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  - System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: NMF.Models.Collections.ReferenceCollection.GetEnumerator
  commentId: M:NMF.Models.Collections.ReferenceCollection.GetEnumerator
  id: GetEnumerator
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ReferenceCollection.GetEnumerator()
  fullName: NMF.Models.Collections.ReferenceCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 13
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public abstract IEnumerator<IModelElement> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NMF.Models.IModelElement}
    content.vb: Public MustOverride Function GetEnumerator As IEnumerator(Of IModelElement)
  overload: NMF.Models.Collections.ReferenceCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}.GetEnumerator
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ReferenceCollection.IEnumerable.GetEnumerator()
  fullName: NMF.Models.Collections.ReferenceCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 15
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ReferenceCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NMF.Models.Collections.ReferenceCollection.AttachCore
  commentId: M:NMF.Models.Collections.ReferenceCollection.AttachCore
  id: AttachCore
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: AttachCore()
  nameWithType: ReferenceCollection.AttachCore()
  fullName: NMF.Models.Collections.ReferenceCollection.AttachCore()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AttachCore
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 20
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: protected abstract void AttachCore()
    content.vb: Protected MustOverride Sub AttachCore
  overload: NMF.Models.Collections.ReferenceCollection.AttachCore*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: NMF.Models.Collections.ReferenceCollection.DetachCore
  commentId: M:NMF.Models.Collections.ReferenceCollection.DetachCore
  id: DetachCore
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: DetachCore()
  nameWithType: ReferenceCollection.DetachCore()
  fullName: NMF.Models.Collections.ReferenceCollection.DetachCore()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DetachCore
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 22
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: protected abstract void DetachCore()
    content.vb: Protected MustOverride Sub DetachCore
  overload: NMF.Models.Collections.ReferenceCollection.DetachCore*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: NMF.Models.Collections.ReferenceCollection.CollectionChanged
  commentId: E:NMF.Models.Collections.ReferenceCollection.CollectionChanged
  id: CollectionChanged
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: ReferenceCollection.CollectionChanged
  fullName: NMF.Models.Collections.ReferenceCollection.CollectionChanged
  type: Event
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CollectionChanged
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 24
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  id: Add(NMF.Models.IModelElement)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: Add(IModelElement)
  nameWithType: ReferenceCollection.Add(IModelElement)
  fullName: NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 26
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public abstract void Add(IModelElement item)
    parameters:
    - id: item
      type: NMF.Models.IModelElement
    content.vb: Public MustOverride Sub Add(item As IModelElement)
  overload: NMF.Models.Collections.ReferenceCollection.Add*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Add(NMF.Models.IModelElement)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: NMF.Models.Collections.ReferenceCollection.Clear
  commentId: M:NMF.Models.Collections.ReferenceCollection.Clear
  id: Clear
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ReferenceCollection.Clear()
  fullName: NMF.Models.Collections.ReferenceCollection.Clear()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 28
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public abstract void Clear()
    content.vb: Public MustOverride Sub Clear
  overload: NMF.Models.Collections.ReferenceCollection.Clear*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Clear
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  id: Contains(NMF.Models.IModelElement)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: Contains(IModelElement)
  nameWithType: ReferenceCollection.Contains(IModelElement)
  fullName: NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 30
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public abstract bool Contains(IModelElement item)
    parameters:
    - id: item
      type: NMF.Models.IModelElement
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Contains(item As IModelElement) As Boolean
  overload: NMF.Models.Collections.ReferenceCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Contains(NMF.Models.IModelElement)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  commentId: M:NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)
  id: CopyTo(NMF.Models.IModelElement[],System.Int32)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: CopyTo(IModelElement[], Int32)
  nameWithType: ReferenceCollection.CopyTo(IModelElement[], Int32)
  fullName: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[], System.Int32)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 32
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public abstract void CopyTo(IModelElement[] array, int arrayIndex)
    parameters:
    - id: array
      type: NMF.Models.IModelElement[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public MustOverride Sub CopyTo(array As IModelElement(), arrayIndex As Integer)
  overload: NMF.Models.Collections.ReferenceCollection.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.CopyTo(NMF.Models.IModelElement[],System.Int32)
  nameWithType.vb: ReferenceCollection.CopyTo(IModelElement(), Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement(), System.Int32)
  name.vb: CopyTo(IModelElement(), Int32)
- uid: NMF.Models.Collections.ReferenceCollection.Count
  commentId: P:NMF.Models.Collections.ReferenceCollection.Count
  id: Count
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ReferenceCollection.Count
  fullName: NMF.Models.Collections.ReferenceCollection.Count
  type: Property
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 34
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public abstract int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public MustOverride ReadOnly Property Count As Integer
  overload: NMF.Models.Collections.ReferenceCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Count
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: NMF.Models.Collections.ReferenceCollection.IsReadOnly
  commentId: P:NMF.Models.Collections.ReferenceCollection.IsReadOnly
  id: IsReadOnly
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ReferenceCollection.IsReadOnly
  fullName: NMF.Models.Collections.ReferenceCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReadOnly
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 39
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: NMF.Models.Collections.ReferenceCollection.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  id: Remove(NMF.Models.IModelElement)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: Remove(IModelElement)
  nameWithType: ReferenceCollection.Remove(IModelElement)
  fullName: NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 44
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public abstract bool Remove(IModelElement item)
    parameters:
    - id: item
      type: NMF.Models.IModelElement
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Remove(item As IModelElement) As Boolean
  overload: NMF.Models.Collections.ReferenceCollection.Remove*
  implements:
  - System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Remove(NMF.Models.IModelElement)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: NMF.Models.Collections.ReferenceCollection.AsNotifiable
  commentId: M:NMF.Models.Collections.ReferenceCollection.AsNotifiable
  id: AsNotifiable
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: ReferenceCollection.AsNotifiable()
  fullName: NMF.Models.Collections.ReferenceCollection.AsNotifiable()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 46
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public INotifyCollection<IModelElement> AsNotifiable()
    return:
      type: NMF.Expressions.INotifyCollection{NMF.Models.IModelElement}
    content.vb: Public Function AsNotifiable As INotifyCollection(Of IModelElement)
  overload: NMF.Models.Collections.ReferenceCollection.AsNotifiable*
  implements:
  - NMF.Expressions.ICollectionExpression{NMF.Models.IModelElement}.AsNotifiable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression{NMF#Models#IModelElement}#AsNotifiable
  commentId: M:NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression{NMF#Models#IModelElement}#AsNotifiable
  id: NMF#Expressions#IEnumerableExpression{NMF#Models#IModelElement}#AsNotifiable
  isEii: true
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: IEnumerableExpression<IModelElement>.AsNotifiable()
  nameWithType: ReferenceCollection.IEnumerableExpression<IModelElement>.AsNotifiable()
  fullName: NMF.Models.Collections.ReferenceCollection.NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 52
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: INotifyEnumerable<IModelElement> IEnumerableExpression<IModelElement>.AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Models.IModelElement}
    content.vb: Function NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable As INotifyEnumerable(Of IModelElement) Implements IEnumerableExpression(Of IModelElement).AsNotifiable
  overload: NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression{NMF#Models#IModelElement}#AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}.AsNotifiable
  nameWithType.vb: ReferenceCollection.NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable()
- uid: NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression#AsNotifiable
  commentId: M:NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression#AsNotifiable
  id: NMF#Expressions#IEnumerableExpression#AsNotifiable
  isEii: true
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: IEnumerableExpression.AsNotifiable()
  nameWithType: ReferenceCollection.IEnumerableExpression.AsNotifiable()
  fullName: NMF.Models.Collections.ReferenceCollection.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IEnumerableExpression.AsNotifiable
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 57
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: INotifyEnumerable IEnumerableExpression.AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable
    content.vb: Function NMF.Expressions.IEnumerableExpression.AsNotifiable As INotifyEnumerable Implements IEnumerableExpression.AsNotifiable
  overload: NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: ReferenceCollection.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable()
- uid: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: PropagateCollectionChanges(Object, NotifyCollectionChangedEventArgs)
  nameWithType: ReferenceCollection.PropagateCollectionChanges(Object, NotifyCollectionChangedEventArgs)
  fullName: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropagateCollectionChanges
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 62
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: protected void PropagateCollectionChanges(object sender, NotifyCollectionChangedEventArgs e)
    parameters:
    - id: sender
      type: System.Object
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    content.vb: Protected Sub PropagateCollectionChanges(sender As Object, e As NotifyCollectionChangedEventArgs)
  overload: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,NMF.Expressions.ValueChangedEventArgs)
  id: PropagateValueChanges(System.Object,NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: PropagateValueChanges(Object, ValueChangedEventArgs)
  nameWithType: ReferenceCollection.PropagateValueChanges(Object, ValueChangedEventArgs)
  fullName: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object, NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropagateValueChanges
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 67
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: protected void PropagateValueChanges(object sender, ValueChangedEventArgs e)
    parameters:
    - id: sender
      type: System.Object
    - id: e
      type: NMF.Expressions.ValueChangedEventArgs
    content.vb: Protected Sub PropagateValueChanges(sender As Object, e As ValueChangedEventArgs)
  overload: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ReferenceCollection.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnCollectionChanged
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 89
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
    parameters:
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    content.vb: Protected Overridable Sub OnCollectionChanged(e As NotifyCollectionChangedEventArgs)
  overload: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Collections.ReferenceCollection.Dispose
  commentId: M:NMF.Models.Collections.ReferenceCollection.Dispose
  id: Dispose
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ReferenceCollection.Dispose()
  fullName: NMF.Models.Collections.ReferenceCollection.Dispose()
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 94
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Models.Collections.ReferenceCollection.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  commentId: M:NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NMF.Models.Collections.ReferenceCollection
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ReferenceCollection.Dispose(Boolean)
  fullName: NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Models/Models/Collections/ReferenceCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Models/Models/Collections/ReferenceCollection.cs
    startLine: 100
  assemblies:
  - NMF.Models
  namespace: NMF.Models.Collections
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NMF.Models.Collections.ReferenceCollection.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: NMF.Models.Collections
  commentId: N:NMF.Models.Collections
  name: NMF.Models.Collections
  nameWithType: NMF.Models.Collections
  fullName: NMF.Models.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.ICollectionExpression{NMF.Models.IModelElement}
  commentId: T:NMF.Expressions.ICollectionExpression{NMF.Models.IModelElement}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<IModelElement>
  nameWithType: ICollectionExpression<IModelElement>
  fullName: NMF.Expressions.ICollectionExpression<NMF.Models.IModelElement>
  nameWithType.vb: ICollectionExpression(Of IModelElement)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of NMF.Models.IModelElement)
  name.vb: ICollectionExpression(Of IModelElement)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  commentId: T:NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<IModelElement>
  nameWithType: IEnumerableExpression<IModelElement>
  fullName: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerableExpression(Of IModelElement)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of NMF.Models.IModelElement)
  name.vb: IEnumerableExpression(Of IModelElement)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  commentId: T:System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IModelElement>
  nameWithType: ICollection<IModelElement>
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>
  nameWithType.vb: ICollection(Of IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement)
  name.vb: ICollection(Of IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IModelElement>
  nameWithType: IEnumerable<IModelElement>
  fullName: System.Collections.Generic.IEnumerable<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerable(Of IModelElement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Models.IModelElement)
  name.vb: IEnumerable(Of IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: NMF.Models.Collections.ReferenceCollection.GetEnumerator*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: ReferenceCollection.GetEnumerator
  fullName: NMF.Models.Collections.ReferenceCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<IModelElement>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NMF.Models.IModelElement>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of IModelElement).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Models.IModelElement).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<IModelElement>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<NMF.Models.IModelElement>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of IModelElement).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of NMF.Models.IModelElement).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{NMF.Models.IModelElement}
  commentId: T:System.Collections.Generic.IEnumerator{NMF.Models.IModelElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<IModelElement>
  nameWithType: IEnumerator<IModelElement>
  fullName: System.Collections.Generic.IEnumerator<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerator(Of IModelElement)
  fullName.vb: System.Collections.Generic.IEnumerator(Of NMF.Models.IModelElement)
  name.vb: IEnumerator(Of IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ReferenceCollection.IEnumerable.GetEnumerator
  fullName: NMF.Models.Collections.ReferenceCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ReferenceCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NMF.Models.Collections.ReferenceCollection.AttachCore*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.AttachCore
  name: AttachCore
  nameWithType: ReferenceCollection.AttachCore
  fullName: NMF.Models.Collections.ReferenceCollection.AttachCore
- uid: NMF.Models.Collections.ReferenceCollection.DetachCore*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.DetachCore
  name: DetachCore
  nameWithType: ReferenceCollection.DetachCore
  fullName: NMF.Models.Collections.ReferenceCollection.DetachCore
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: NMF.Models.Collections.ReferenceCollection.Add*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.Add
  name: Add
  nameWithType: ReferenceCollection.Add
  fullName: NMF.Models.Collections.ReferenceCollection.Add
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Add(NMF.Models.IModelElement)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Add(NMF.Models.IModelElement)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(IModelElement)
  nameWithType: ICollection<IModelElement>.Add(IModelElement)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Add(NMF.Models.IModelElement)
  nameWithType.vb: ICollection(Of IModelElement).Add(IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Add(NMF.Models.IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<IModelElement>.Add
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of IModelElement).Add
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: NMF.Models.Collections.ReferenceCollection.Clear*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.Clear
  name: Clear
  nameWithType: ReferenceCollection.Clear
  fullName: NMF.Models.Collections.ReferenceCollection.Clear
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Clear
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Clear
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<IModelElement>.Clear()
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Clear()
  nameWithType.vb: ICollection(Of IModelElement).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<IModelElement>.Clear
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of IModelElement).Clear
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.Contains*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.Contains
  name: Contains
  nameWithType: ReferenceCollection.Contains
  fullName: NMF.Models.Collections.ReferenceCollection.Contains
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Contains(NMF.Models.IModelElement)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Contains(NMF.Models.IModelElement)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(IModelElement)
  nameWithType: ICollection<IModelElement>.Contains(IModelElement)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Contains(NMF.Models.IModelElement)
  nameWithType.vb: ICollection(Of IModelElement).Contains(IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Contains(NMF.Models.IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<IModelElement>.Contains
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of IModelElement).Contains
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.CopyTo*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.CopyTo
  name: CopyTo
  nameWithType: ReferenceCollection.CopyTo
  fullName: NMF.Models.Collections.ReferenceCollection.CopyTo
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.CopyTo(NMF.Models.IModelElement[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.CopyTo(NMF.Models.IModelElement[],System.Int32)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(IModelElement[], Int32)
  nameWithType: ICollection<IModelElement>.CopyTo(IModelElement[], Int32)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.CopyTo(NMF.Models.IModelElement[], System.Int32)
  nameWithType.vb: ICollection(Of IModelElement).CopyTo(IModelElement(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).CopyTo(NMF.Models.IModelElement(), System.Int32)
  name.vb: CopyTo(IModelElement(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<IModelElement>.CopyTo
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of IModelElement).CopyTo
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.IModelElement[]
  isExternal: true
  name: IModelElement[]
  nameWithType: IModelElement[]
  fullName: NMF.Models.IModelElement[]
  nameWithType.vb: IModelElement()
  fullName.vb: NMF.Models.IModelElement()
  name.vb: IModelElement()
  spec.csharp:
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.Count*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.Count
  name: Count
  nameWithType: ReferenceCollection.Count
  fullName: NMF.Models.Collections.ReferenceCollection.Count
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Count
  commentId: P:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Count
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<IModelElement>.Count
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Count
  nameWithType.vb: ICollection(Of IModelElement).Count
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Models.Collections.ReferenceCollection.IsReadOnly*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.IsReadOnly
  name: IsReadOnly
  nameWithType: ReferenceCollection.IsReadOnly
  fullName: NMF.Models.Collections.ReferenceCollection.IsReadOnly
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.IsReadOnly
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<IModelElement>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.IsReadOnly
  nameWithType.vb: ICollection(Of IModelElement).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Models.Collections.ReferenceCollection.Remove*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.Remove
  name: Remove
  nameWithType: ReferenceCollection.Remove
  fullName: NMF.Models.Collections.ReferenceCollection.Remove
- uid: System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Remove(NMF.Models.IModelElement)
  commentId: M:System.Collections.Generic.ICollection{NMF.Models.IModelElement}.Remove(NMF.Models.IModelElement)
  parent: System.Collections.Generic.ICollection{NMF.Models.IModelElement}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(IModelElement)
  nameWithType: ICollection<IModelElement>.Remove(IModelElement)
  fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Remove(NMF.Models.IModelElement)
  nameWithType.vb: ICollection(Of IModelElement).Remove(IModelElement)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Remove(NMF.Models.IModelElement)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<IModelElement>.Remove
    fullName: System.Collections.Generic.ICollection<NMF.Models.IModelElement>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of IModelElement).Remove
    fullName: System.Collections.Generic.ICollection(Of NMF.Models.IModelElement).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.AsNotifiable*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.AsNotifiable
  name: AsNotifiable
  nameWithType: ReferenceCollection.AsNotifiable
  fullName: NMF.Models.Collections.ReferenceCollection.AsNotifiable
- uid: NMF.Expressions.ICollectionExpression{NMF.Models.IModelElement}.AsNotifiable
  commentId: M:NMF.Expressions.ICollectionExpression{NMF.Models.IModelElement}.AsNotifiable
  parent: NMF.Expressions.ICollectionExpression{NMF.Models.IModelElement}
  definition: NMF.Expressions.ICollectionExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ICollectionExpression<IModelElement>.AsNotifiable()
  fullName: NMF.Expressions.ICollectionExpression<NMF.Models.IModelElement>.AsNotifiable()
  nameWithType.vb: ICollectionExpression(Of IModelElement).AsNotifiable()
  fullName.vb: NMF.Expressions.ICollectionExpression(Of NMF.Models.IModelElement).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression<IModelElement>.AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression<NMF.Models.IModelElement>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression(Of IModelElement).AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression(Of NMF.Models.IModelElement).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyCollection{NMF.Models.IModelElement}
  commentId: T:NMF.Expressions.INotifyCollection{NMF.Models.IModelElement}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<IModelElement>
  nameWithType: INotifyCollection<IModelElement>
  fullName: NMF.Expressions.INotifyCollection<NMF.Models.IModelElement>
  nameWithType.vb: INotifyCollection(Of IModelElement)
  fullName.vb: NMF.Expressions.INotifyCollection(Of NMF.Models.IModelElement)
  name.vb: INotifyCollection(Of IModelElement)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.ICollectionExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ICollectionExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable()
  nameWithType.vb: ICollectionExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression<T>.AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyCollection`1
  commentId: T:NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression{NMF#Models#IModelElement}#AsNotifiable*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression{NMF#Models#IModelElement}#AsNotifiable
  name: IEnumerableExpression<IModelElement>.AsNotifiable
  nameWithType: ReferenceCollection.IEnumerableExpression<IModelElement>.AsNotifiable
  fullName: NMF.Models.Collections.ReferenceCollection.NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable
  nameWithType.vb: ReferenceCollection.NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable
  name.vb: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  definition: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<IModelElement>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of IModelElement).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of NMF.Models.IModelElement).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<IModelElement>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of IModelElement).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of NMF.Models.IModelElement).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{NMF.Models.IModelElement}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Models.IModelElement}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<IModelElement>
  nameWithType: INotifyEnumerable<IModelElement>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Models.IModelElement>
  nameWithType.vb: INotifyEnumerable(Of IModelElement)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Models.IModelElement)
  name.vb: INotifyEnumerable(Of IModelElement)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.IModelElement
    name: IModelElement
    nameWithType: IModelElement
    fullName: NMF.Models.IModelElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.NMF#Expressions#IEnumerableExpression#AsNotifiable
  name: IEnumerableExpression.AsNotifiable
  nameWithType: ReferenceCollection.IEnumerableExpression.AsNotifiable
  fullName: NMF.Models.Collections.ReferenceCollection.NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: ReferenceCollection.NMF.Expressions.IEnumerableExpression.AsNotifiable
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression
  name: AsNotifiable()
  nameWithType: IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges
  name: PropagateCollectionChanges
  nameWithType: ReferenceCollection.PropagateCollectionChanges
  fullName: NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventArgs
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
- uid: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.PropagateValueChanges
  name: PropagateValueChanges
  nameWithType: ReferenceCollection.PropagateValueChanges
  fullName: NMF.Models.Collections.ReferenceCollection.PropagateValueChanges
- uid: NMF.Expressions.ValueChangedEventArgs
  commentId: T:NMF.Expressions.ValueChangedEventArgs
  parent: NMF.Expressions
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: NMF.Expressions.ValueChangedEventArgs
- uid: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.OnCollectionChanged
  name: OnCollectionChanged
  nameWithType: ReferenceCollection.OnCollectionChanged
  fullName: NMF.Models.Collections.ReferenceCollection.OnCollectionChanged
- uid: NMF.Models.Collections.ReferenceCollection.Dispose*
  commentId: Overload:NMF.Models.Collections.ReferenceCollection.Dispose
  name: Dispose
  nameWithType: ReferenceCollection.Dispose
  fullName: NMF.Models.Collections.ReferenceCollection.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
